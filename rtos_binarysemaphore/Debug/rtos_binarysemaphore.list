
rtos_binarysemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800463c  0800463c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004644  08004644  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800464c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e1c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e30  20012e30  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e212  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002339  00000000  00000000  0002e256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d18  00000000  00000000  000313b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f5b4  00000000  00000000  000320c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f159  00000000  00000000  0005167c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c56e9  00000000  00000000  000607d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125ebe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a88  00000000  00000000  00125f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045dc 	.word	0x080045dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080045dc 	.word	0x080045dc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <task1>:
TaskHandle_t high_task;
TaskHandle_t low_task;
SemaphoreHandle_t mysemaphore;

void task1()		//High Priority Task
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	while(1)
	{
		if(mysemaphore!=NULL)	// check for semaphore available
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <task1+0x58>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d01f      	beq.n	8000522 <task1+0x4e>
		{
			if(xSemaphoreTake(mysemaphore,10)==pdTRUE)	//Take semaphore
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <task1+0x58>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	210a      	movs	r1, #10
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 feb1 	bl	8002250 <xQueueSemaphoreTake>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d116      	bne.n	8000522 <task1+0x4e>
			{
				GPIOB->ODR^=(1<<14);		// toggle LED 3
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <task1+0x5c>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <task1+0x5c>)
 80004fa:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80004fe:	6153      	str	r3, [r2, #20]
				for(uint32_t a=0;a<100000;a++);
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	e002      	b.n	800050c <task1+0x38>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <task1+0x60>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d9f8      	bls.n	8000506 <task1+0x32>
				xSemaphoreGive(mysemaphore);	// give semaphore
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <task1+0x58>)
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	f001 fc0f 	bl	8001d40 <xQueueGenericSend>
			}
		}
		vTaskDelay(1000);			// task delay
 8000522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000526:	f002 fa6b 	bl	8002a00 <vTaskDelay>
		if(mysemaphore!=NULL)	// check for semaphore available
 800052a:	e7d6      	b.n	80004da <task1+0x6>
 800052c:	20000038 	.word	0x20000038
 8000530:	40020400 	.word	0x40020400
 8000534:	0001869f 	.word	0x0001869f

08000538 <task2>:
	}
}
void task2()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
	while(1)
	{
		if(mysemaphore!=NULL)	// check for semaphore available
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <task2+0x80>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d02c      	beq.n	80005a0 <task2+0x68>
		{
			if(!(GPIOB->IDR & (1<<7)))	//check if switch pressed
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <task2+0x84>)
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	2b00      	cmp	r3, #0
 8000550:	d126      	bne.n	80005a0 <task2+0x68>
			{
				GPIOB->ODR&=~(1<<15);	// LED 15 ON
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <task2+0x84>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a19      	ldr	r2, [pc, #100]	; (80005bc <task2+0x84>)
 8000558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800055c:	6153      	str	r3, [r2, #20]
				if(xSemaphoreTake(mysemaphore,10)==pdTRUE)	// Take semaphore
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <task2+0x80>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	210a      	movs	r1, #10
 8000564:	4618      	mov	r0, r3
 8000566:	f001 fe73 	bl	8002250 <xQueueSemaphoreTake>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	d117      	bne.n	80005a0 <task2+0x68>
				{
					while(!(GPIOB->IDR & (1<<7)));	// wait till switch released
 8000570:	bf00      	nop
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <task2+0x84>)
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f9      	beq.n	8000572 <task2+0x3a>
					for(uint32_t a=0;a<100000;a++);
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	e002      	b.n	800058a <task2+0x52>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <task2+0x88>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d9f8      	bls.n	8000584 <task2+0x4c>
					xSemaphoreGive(mysemaphore);	// give semaphore
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <task2+0x80>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	f001 fbd0 	bl	8001d40 <xQueueGenericSend>
				}
			}
		}
		GPIOB->ODR|=(1<<15);		// LED 15 OFF
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <task2+0x84>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <task2+0x84>)
 80005a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005aa:	6153      	str	r3, [r2, #20]
		vTaskDelay(1000);			// Task delay
 80005ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b0:	f002 fa26 	bl	8002a00 <vTaskDelay>
		if(mysemaphore!=NULL)	// check for semaphore available
 80005b4:	e7c3      	b.n	800053e <task2+0x6>
 80005b6:	bf00      	nop
 80005b8:	20000038 	.word	0x20000038
 80005bc:	40020400 	.word	0x40020400
 80005c0:	0001869f 	.word	0x0001869f

080005c4 <gpio_config>:
	}
}

void gpio_config()
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(1<<1);				//GPIOB clocke enable
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <gpio_config+0x40>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <gpio_config+0x40>)
 80005ce:	f043 0302 	orr.w	r3, r3, #2
 80005d2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER |= (1<<28)|(1<<30);	// PB14 & PB15 output
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <gpio_config+0x44>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <gpio_config+0x44>)
 80005da:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80005de:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= (1<<14)|(1<<15);		// LED 2 & LED 3 OFF
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <gpio_config+0x44>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a08      	ldr	r2, [pc, #32]	; (8000608 <gpio_config+0x44>)
 80005e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ea:	6153      	str	r3, [r2, #20]

	GPIOB->MODER &= ~(3<<14);			// PB7 input
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <gpio_config+0x44>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a05      	ldr	r2, [pc, #20]	; (8000608 <gpio_config+0x44>)
 80005f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40020400 	.word	0x40020400

0800060c <main>:
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
   HAL_Init();
 8000612:	f000 f9af 	bl	8000974 <HAL_Init>
   SystemClock_Config();
 8000616:	f000 f837 	bl	8000688 <SystemClock_Config>
   gpio_config();
 800061a:	f7ff ffd3 	bl	80005c4 <gpio_config>
   mysemaphore=xSemaphoreCreateBinary();	//Create binary semaphore
 800061e:	2203      	movs	r2, #3
 8000620:	2100      	movs	r1, #0
 8000622:	2001      	movs	r0, #1
 8000624:	f001 fb0a 	bl	8001c3c <xQueueGenericCreate>
 8000628:	4603      	mov	r3, r0
 800062a:	4a10      	ldr	r2, [pc, #64]	; (800066c <main+0x60>)
 800062c:	6013      	str	r3, [r2, #0]
   xSemaphoreGive(mysemaphore);				// give semaphore for task to access
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <main+0x60>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	f001 fb82 	bl	8001d40 <xQueueGenericSend>
   xTaskCreate(task1,"High task",200,NULL,3,&high_task);	//task1 create
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <main+0x64>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2303      	movs	r3, #3
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	490a      	ldr	r1, [pc, #40]	; (8000674 <main+0x68>)
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0x6c>)
 800064c:	f002 f892 	bl	8002774 <xTaskCreate>
   xTaskCreate(task2,"Low task",200,NULL,1,&low_task);		// task2 create
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <main+0x70>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2301      	movs	r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	22c8      	movs	r2, #200	; 0xc8
 800065c:	4908      	ldr	r1, [pc, #32]	; (8000680 <main+0x74>)
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <main+0x78>)
 8000660:	f002 f888 	bl	8002774 <xTaskCreate>
   vTaskStartScheduler();			// start task scheduler
 8000664:	f002 fa00 	bl	8002a68 <vTaskStartScheduler>
   while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x5c>
 800066a:	bf00      	nop
 800066c:	20000038 	.word	0x20000038
 8000670:	20000030 	.word	0x20000030
 8000674:	080045f4 	.word	0x080045f4
 8000678:	080004d5 	.word	0x080004d5
 800067c:	20000034 	.word	0x20000034
 8000680:	08004600 	.word	0x08004600
 8000684:	08000539 	.word	0x08000539

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 ff98 	bl	80045cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xb4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xb4>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xb4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <SystemClock_Config+0xb8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <SystemClock_Config+0xb8>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <SystemClock_Config+0xb8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fa5f 	bl	8000bbc <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000704:	f000 f830 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fcc2 	bl	80010ac <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800072e:	f000 f81b 	bl	8000768 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	; 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000756:	f000 f92f 	bl	80009b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40001000 	.word	0x40001000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <HAL_MspInit+0x4c>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000788:	6453      	str	r3, [r2, #68]	; 0x44
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x4c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <HAL_InitTick+0xe4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <HAL_InitTick+0xe4>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <HAL_InitTick+0xe4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f0:	f107 0210 	add.w	r2, r7, #16
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fe22 	bl	8001444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	2b00      	cmp	r3, #0
 8000808:	d103      	bne.n	8000812 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800080a:	f000 fe07 	bl	800141c <HAL_RCC_GetPCLK1Freq>
 800080e:	6378      	str	r0, [r7, #52]	; 0x34
 8000810:	e004      	b.n	800081c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000812:	f000 fe03 	bl	800141c <HAL_RCC_GetPCLK1Freq>
 8000816:	4603      	mov	r3, r0
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081e:	4a23      	ldr	r2, [pc, #140]	; (80008ac <HAL_InitTick+0xe8>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	0c9b      	lsrs	r3, r3, #18
 8000826:	3b01      	subs	r3, #1
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <HAL_InitTick+0xec>)
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <HAL_InitTick+0xf0>)
 800082e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <HAL_InitTick+0xec>)
 8000832:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000836:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000838:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <HAL_InitTick+0xec>)
 800083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <HAL_InitTick+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_InitTick+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_InitTick+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000850:	4817      	ldr	r0, [pc, #92]	; (80008b0 <HAL_InitTick+0xec>)
 8000852:	f000 fe29 	bl	80014a8 <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800085c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000860:	2b00      	cmp	r3, #0
 8000862:	d11b      	bne.n	800089c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000864:	4812      	ldr	r0, [pc, #72]	; (80008b0 <HAL_InitTick+0xec>)
 8000866:	f000 fe79 	bl	800155c <HAL_TIM_Base_Start_IT>
 800086a:	4603      	mov	r3, r0
 800086c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000870:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000874:	2b00      	cmp	r3, #0
 8000876:	d111      	bne.n	800089c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000878:	2036      	movs	r0, #54	; 0x36
 800087a:	f000 f991 	bl	8000ba0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d808      	bhi.n	8000896 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	2036      	movs	r0, #54	; 0x36
 800088a:	f000 f96d 	bl	8000b68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_InitTick+0xf4>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	e002      	b.n	800089c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800089c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	431bde83 	.word	0x431bde83
 80008b0:	2000003c 	.word	0x2000003c
 80008b4:	40001000 	.word	0x40001000
 80008b8:	20000004 	.word	0x20000004

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <TIM6_DAC_IRQHandler+0x10>)
 80008ee:	f000 fea5 	bl	800163c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000003c 	.word	0x2000003c

080008fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopFillZerobss+0x12>
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopFillZerobss+0x16>)
 8000926:	490e      	ldr	r1, [pc, #56]	; (8000960 <LoopFillZerobss+0x1a>)
 8000928:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <LoopFillZerobss+0x1e>)
 800092a:	2300      	movs	r3, #0
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:
 800092e:	58d4      	ldr	r4, [r2, r3]
 8000930:	50c4      	str	r4, [r0, r3]
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:
 8000934:	18c4      	adds	r4, r0, r3
 8000936:	428c      	cmp	r4, r1
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <LoopFillZerobss+0x22>)
 800093c:	4c0b      	ldr	r4, [pc, #44]	; (800096c <LoopFillZerobss+0x26>)
 800093e:	2300      	movs	r3, #0
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:
 8000946:	42a2      	cmp	r2, r4
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>
 800094a:	f7ff ffd7 	bl	80008fc <SystemInit>
 800094e:	f003 fe0b 	bl	8004568 <__libc_init_array>
 8000952:	f7ff fe5b 	bl	800060c <main>
 8000956:	4770      	bx	lr
 8000958:	20020000 	.word	0x20020000
 800095c:	20000000 	.word	0x20000000
 8000960:	20000014 	.word	0x20000014
 8000964:	0800464c 	.word	0x0800464c
 8000968:	20000014 	.word	0x20000014
 800096c:	20012e30 	.word	0x20012e30

08000970 <ADC_IRQHandler>:
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>
	...

08000974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <HAL_Init+0x40>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_Init+0x40>)
 800098a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_Init+0x40>)
 8000996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f8d8 	bl	8000b52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	200f      	movs	r0, #15
 80009a4:	f7ff ff0e 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff fee4 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023c00 	.word	0x40023c00

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000084 	.word	0x20000084

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000084 	.word	0x20000084

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4907      	ldr	r1, [pc, #28]	; (8000a94 <__NVIC_EnableIRQ+0x38>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff4c 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7a:	f7ff ff61 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000b7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	6978      	ldr	r0, [r7, #20]
 8000b86:	f7ff ffb1 	bl	8000aec <NVIC_EncodePriority>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff80 	bl	8000a98 <__NVIC_SetPriority>
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff54 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e267      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d075      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bda:	4b88      	ldr	r3, [pc, #544]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d00c      	beq.n	8000c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000be6:	4b85      	ldr	r3, [pc, #532]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d112      	bne.n	8000c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bf2:	4b82      	ldr	r3, [pc, #520]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bfe:	d10b      	bne.n	8000c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c00:	4b7e      	ldr	r3, [pc, #504]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d05b      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x108>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d157      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e242      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c20:	d106      	bne.n	8000c30 <HAL_RCC_OscConfig+0x74>
 8000c22:	4b76      	ldr	r3, [pc, #472]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a75      	ldr	r2, [pc, #468]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e01d      	b.n	8000c6c <HAL_RCC_OscConfig+0xb0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x98>
 8000c3a:	4b70      	ldr	r3, [pc, #448]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a6f      	ldr	r2, [pc, #444]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b6d      	ldr	r3, [pc, #436]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a6c      	ldr	r2, [pc, #432]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e00b      	b.n	8000c6c <HAL_RCC_OscConfig+0xb0>
 8000c54:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a68      	ldr	r2, [pc, #416]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b66      	ldr	r3, [pc, #408]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a65      	ldr	r2, [pc, #404]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d013      	beq.n	8000c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c74:	f7ff feb4 	bl	80009e0 <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c7c:	f7ff feb0 	bl	80009e0 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b64      	cmp	r3, #100	; 0x64
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e207      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	4b5b      	ldr	r3, [pc, #364]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f0      	beq.n	8000c7c <HAL_RCC_OscConfig+0xc0>
 8000c9a:	e014      	b.n	8000cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fea0 	bl	80009e0 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fe9c 	bl	80009e0 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e1f3      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	4b51      	ldr	r3, [pc, #324]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0xe8>
 8000cc2:	e000      	b.n	8000cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d063      	beq.n	8000d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cd2:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00b      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d11c      	bne.n	8000d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d116      	bne.n	8000d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf6:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d005      	beq.n	8000d0e <HAL_RCC_OscConfig+0x152>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d001      	beq.n	8000d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e1c7      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	4937      	ldr	r1, [pc, #220]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d22:	e03a      	b.n	8000d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d020      	beq.n	8000d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d2c:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <HAL_RCC_OscConfig+0x244>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d32:	f7ff fe55 	bl	80009e0 <HAL_GetTick>
 8000d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d3a:	f7ff fe51 	bl	80009e0 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e1a8      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	4925      	ldr	r1, [pc, #148]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
 8000d6c:	e015      	b.n	8000d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_RCC_OscConfig+0x244>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d74:	f7ff fe34 	bl	80009e0 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fe30 	bl	80009e0 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e187      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d036      	beq.n	8000e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d016      	beq.n	8000ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_RCC_OscConfig+0x248>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db4:	f7ff fe14 	bl	80009e0 <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fe10 	bl	80009e0 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e167      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_RCC_OscConfig+0x240>)
 8000dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0x200>
 8000dda:	e01b      	b.n	8000e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_RCC_OscConfig+0x248>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de2:	f7ff fdfd 	bl	80009e0 <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de8:	e00e      	b.n	8000e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dea:	f7ff fdf9 	bl	80009e0 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d907      	bls.n	8000e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e150      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	42470000 	.word	0x42470000
 8000e04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	4b88      	ldr	r3, [pc, #544]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1ea      	bne.n	8000dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 8097 	beq.w	8000f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e26:	4b81      	ldr	r3, [pc, #516]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10f      	bne.n	8000e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b7d      	ldr	r3, [pc, #500]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a7c      	ldr	r2, [pc, #496]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b7a      	ldr	r3, [pc, #488]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	4b77      	ldr	r3, [pc, #476]	; (8001030 <HAL_RCC_OscConfig+0x474>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d118      	bne.n	8000e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5e:	4b74      	ldr	r3, [pc, #464]	; (8001030 <HAL_RCC_OscConfig+0x474>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a73      	ldr	r2, [pc, #460]	; (8001030 <HAL_RCC_OscConfig+0x474>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fdb9 	bl	80009e0 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e72:	f7ff fdb5 	bl	80009e0 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e10c      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	4b6a      	ldr	r3, [pc, #424]	; (8001030 <HAL_RCC_OscConfig+0x474>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x2ea>
 8000e98:	4b64      	ldr	r3, [pc, #400]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9c:	4a63      	ldr	r2, [pc, #396]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea4:	e01c      	b.n	8000ee0 <HAL_RCC_OscConfig+0x324>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b05      	cmp	r3, #5
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x30c>
 8000eae:	4b5f      	ldr	r3, [pc, #380]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb2:	4a5e      	ldr	r2, [pc, #376]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eba:	4b5c      	ldr	r3, [pc, #368]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebe:	4a5b      	ldr	r2, [pc, #364]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec6:	e00b      	b.n	8000ee0 <HAL_RCC_OscConfig+0x324>
 8000ec8:	4b58      	ldr	r3, [pc, #352]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ecc:	4a57      	ldr	r2, [pc, #348]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000ece:	f023 0301 	bic.w	r3, r3, #1
 8000ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed4:	4b55      	ldr	r3, [pc, #340]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed8:	4a54      	ldr	r2, [pc, #336]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000eda:	f023 0304 	bic.w	r3, r3, #4
 8000ede:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d015      	beq.n	8000f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fd7a 	bl	80009e0 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eee:	e00a      	b.n	8000f06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fd76 	bl	80009e0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e0cb      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f06:	4b49      	ldr	r3, [pc, #292]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0ee      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x334>
 8000f12:	e014      	b.n	8000f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f14:	f7ff fd64 	bl	80009e0 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1a:	e00a      	b.n	8000f32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fd60 	bl	80009e0 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e0b5      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f32:	4b3e      	ldr	r3, [pc, #248]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1ee      	bne.n	8000f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d105      	bne.n	8000f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a38      	ldr	r2, [pc, #224]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80a1 	beq.w	800109c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d05c      	beq.n	8001020 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d141      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <HAL_RCC_OscConfig+0x478>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fd34 	bl	80009e0 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fd30 	bl	80009e0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e087      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69da      	ldr	r2, [r3, #28]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	019b      	lsls	r3, r3, #6
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	085b      	lsrs	r3, r3, #1
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	041b      	lsls	r3, r3, #16
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	061b      	lsls	r3, r3, #24
 8000fbe:	491b      	ldr	r1, [pc, #108]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_RCC_OscConfig+0x478>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fd09 	bl	80009e0 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd2:	f7ff fd05 	bl	80009e0 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e05c      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x416>
 8000ff0:	e054      	b.n	800109c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_RCC_OscConfig+0x478>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcf2 	bl	80009e0 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001000:	f7ff fcee 	bl	80009e0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e045      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_RCC_OscConfig+0x470>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x444>
 800101e:	e03d      	b.n	800109c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d107      	bne.n	8001038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e038      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000
 8001034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_RCC_OscConfig+0x4ec>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d028      	beq.n	8001098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001050:	429a      	cmp	r2, r3
 8001052:	d121      	bne.n	8001098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105e:	429a      	cmp	r2, r3
 8001060:	d11a      	bne.n	8001098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001068:	4013      	ands	r3, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800106e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001070:	4293      	cmp	r3, r2
 8001072:	d111      	bne.n	8001098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	3b01      	subs	r3, #1
 8001082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001084:	429a      	cmp	r2, r3
 8001086:	d107      	bne.n	8001098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001094:	429a      	cmp	r2, r3
 8001096:	d001      	beq.n	800109c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0cc      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010c0:	4b68      	ldr	r3, [pc, #416]	; (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d90c      	bls.n	80010e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	4b65      	ldr	r3, [pc, #404]	; (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d6:	4b63      	ldr	r3, [pc, #396]	; (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d001      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0b8      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d020      	beq.n	8001136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001100:	4b59      	ldr	r3, [pc, #356]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a58      	ldr	r2, [pc, #352]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800110a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001118:	4b53      	ldr	r3, [pc, #332]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a52      	ldr	r2, [pc, #328]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001124:	4b50      	ldr	r3, [pc, #320]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	494d      	ldr	r1, [pc, #308]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	4313      	orrs	r3, r2
 8001134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d044      	beq.n	80011cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d119      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e07f      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d003      	beq.n	800116a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001166:	2b03      	cmp	r3, #3
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e06f      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e067      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f023 0203 	bic.w	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4934      	ldr	r1, [pc, #208]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800119c:	f7ff fc20 	bl	80009e0 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff fc1c 	bl	80009e0 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e04f      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 020c 	and.w	r2, r3, #12
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d1eb      	bne.n	80011a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d20c      	bcs.n	80011f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e032      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d008      	beq.n	8001212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	4916      	ldr	r1, [pc, #88]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	4313      	orrs	r3, r2
 8001210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d009      	beq.n	8001232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	490e      	ldr	r1, [pc, #56]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	4313      	orrs	r3, r2
 8001230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001232:	f000 f821 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 8001236:	4602      	mov	r2, r0
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	490a      	ldr	r1, [pc, #40]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	5ccb      	ldrb	r3, [r1, r3]
 8001246:	fa22 f303 	lsr.w	r3, r2, r3
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_RCC_ClockConfig+0x1c8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fab6 	bl	80007c4 <HAL_InitTick>

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00
 8001268:	40023800 	.word	0x40023800
 800126c:	08004624 	.word	0x08004624
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800127c:	b090      	sub	sp, #64	; 0x40
 800127e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
 8001284:	2300      	movs	r3, #0
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001290:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b08      	cmp	r3, #8
 800129a:	d00d      	beq.n	80012b8 <HAL_RCC_GetSysClockFreq+0x40>
 800129c:	2b08      	cmp	r3, #8
 800129e:	f200 80a1 	bhi.w	80013e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <HAL_RCC_GetSysClockFreq+0x34>
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d003      	beq.n	80012b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80012aa:	e09b      	b.n	80013e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_GetSysClockFreq+0x184>)
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80012b0:	e09b      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012b2:	4b53      	ldr	r3, [pc, #332]	; (8001400 <HAL_RCC_GetSysClockFreq+0x188>)
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80012b6:	e098      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012b8:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012c2:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d028      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ce:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	099b      	lsrs	r3, r3, #6
 80012d4:	2200      	movs	r2, #0
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	627a      	str	r2, [r7, #36]	; 0x24
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80012e0:	2100      	movs	r1, #0
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_RCC_GetSysClockFreq+0x188>)
 80012e4:	fb03 f201 	mul.w	r2, r3, r1
 80012e8:	2300      	movs	r3, #0
 80012ea:	fb00 f303 	mul.w	r3, r0, r3
 80012ee:	4413      	add	r3, r2
 80012f0:	4a43      	ldr	r2, [pc, #268]	; (8001400 <HAL_RCC_GetSysClockFreq+0x188>)
 80012f2:	fba0 1202 	umull	r1, r2, r0, r2
 80012f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012f8:	460a      	mov	r2, r1
 80012fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80012fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fe:	4413      	add	r3, r2
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001304:	2200      	movs	r2, #0
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	61fa      	str	r2, [r7, #28]
 800130a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800130e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001312:	f7fe ff5d 	bl	80001d0 <__aeabi_uldivmod>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4613      	mov	r3, r2
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800131e:	e053      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001320:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	099b      	lsrs	r3, r3, #6
 8001326:	2200      	movs	r2, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	617a      	str	r2, [r7, #20]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001332:	f04f 0b00 	mov.w	fp, #0
 8001336:	4652      	mov	r2, sl
 8001338:	465b      	mov	r3, fp
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	0159      	lsls	r1, r3, #5
 8001344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001348:	0150      	lsls	r0, r2, #5
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ebb2 080a 	subs.w	r8, r2, sl
 8001352:	eb63 090b 	sbc.w	r9, r3, fp
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001362:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001366:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800136a:	ebb2 0408 	subs.w	r4, r2, r8
 800136e:	eb63 0509 	sbc.w	r5, r3, r9
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	00eb      	lsls	r3, r5, #3
 800137c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001380:	00e2      	lsls	r2, r4, #3
 8001382:	4614      	mov	r4, r2
 8001384:	461d      	mov	r5, r3
 8001386:	eb14 030a 	adds.w	r3, r4, sl
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	eb45 030b 	adc.w	r3, r5, fp
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800139e:	4629      	mov	r1, r5
 80013a0:	028b      	lsls	r3, r1, #10
 80013a2:	4621      	mov	r1, r4
 80013a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013a8:	4621      	mov	r1, r4
 80013aa:	028a      	lsls	r2, r1, #10
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b2:	2200      	movs	r2, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	60fa      	str	r2, [r7, #12]
 80013b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013bc:	f7fe ff08 	bl	80001d0 <__aeabi_uldivmod>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4613      	mov	r3, r2
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	3301      	adds	r3, #1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80013d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013e2:	e002      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_RCC_GetSysClockFreq+0x184>)
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3740      	adds	r7, #64	; 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	00f42400 	.word	0x00f42400
 8001400:	017d7840 	.word	0x017d7840

08001404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_RCC_GetHCLKFreq+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000

0800141c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001420:	f7ff fff0 	bl	8001404 <HAL_RCC_GetHCLKFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	0a9b      	lsrs	r3, r3, #10
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	4903      	ldr	r1, [pc, #12]	; (8001440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	08004634 	.word	0x08004634

08001444 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	220f      	movs	r2, #15
 8001452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_RCC_GetClockConfig+0x5c>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_RCC_GetClockConfig+0x5c>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_RCC_GetClockConfig+0x60>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0207 	and.w	r2, r3, #7
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	601a      	str	r2, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e041      	b.n	800153e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f839 	bl	8001546 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3304      	adds	r3, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f000 f9d8 	bl	800189c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d001      	beq.n	8001574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e04e      	b.n	8001612 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a23      	ldr	r2, [pc, #140]	; (8001620 <HAL_TIM_Base_Start_IT+0xc4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d022      	beq.n	80015dc <HAL_TIM_Base_Start_IT+0x80>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159e:	d01d      	beq.n	80015dc <HAL_TIM_Base_Start_IT+0x80>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_TIM_Base_Start_IT+0xc8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d018      	beq.n	80015dc <HAL_TIM_Base_Start_IT+0x80>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_TIM_Base_Start_IT+0xcc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d013      	beq.n	80015dc <HAL_TIM_Base_Start_IT+0x80>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1c      	ldr	r2, [pc, #112]	; (800162c <HAL_TIM_Base_Start_IT+0xd0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00e      	beq.n	80015dc <HAL_TIM_Base_Start_IT+0x80>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_TIM_Base_Start_IT+0xd4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d009      	beq.n	80015dc <HAL_TIM_Base_Start_IT+0x80>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_TIM_Base_Start_IT+0xd8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d004      	beq.n	80015dc <HAL_TIM_Base_Start_IT+0x80>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <HAL_TIM_Base_Start_IT+0xdc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d111      	bne.n	8001600 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d010      	beq.n	8001610 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015fe:	e007      	b.n	8001610 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40010000 	.word	0x40010000
 8001624:	40000400 	.word	0x40000400
 8001628:	40000800 	.word	0x40000800
 800162c:	40000c00 	.word	0x40000c00
 8001630:	40010400 	.word	0x40010400
 8001634:	40014000 	.word	0x40014000
 8001638:	40001800 	.word	0x40001800

0800163c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b02      	cmp	r3, #2
 8001650:	d122      	bne.n	8001698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b02      	cmp	r3, #2
 800165e:	d11b      	bne.n	8001698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0202 	mvn.w	r2, #2
 8001668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f8ee 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 8001684:	e005      	b.n	8001692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f8e0 	bl	800184c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8f1 	bl	8001874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d122      	bne.n	80016ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d11b      	bne.n	80016ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 0204 	mvn.w	r2, #4
 80016bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2202      	movs	r2, #2
 80016c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8c4 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 80016d8:	e005      	b.n	80016e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8b6 	bl	800184c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f8c7 	bl	8001874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d122      	bne.n	8001740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b08      	cmp	r3, #8
 8001706:	d11b      	bne.n	8001740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f06f 0208 	mvn.w	r2, #8
 8001710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2204      	movs	r2, #4
 8001716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f89a 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 800172c:	e005      	b.n	800173a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f88c 	bl	800184c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f89d 	bl	8001874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b10      	cmp	r3, #16
 800174c:	d122      	bne.n	8001794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b10      	cmp	r3, #16
 800175a:	d11b      	bne.n	8001794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0210 	mvn.w	r2, #16
 8001764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2208      	movs	r2, #8
 800176a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f870 	bl	8001860 <HAL_TIM_IC_CaptureCallback>
 8001780:	e005      	b.n	800178e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f862 	bl	800184c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f873 	bl	8001874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d10e      	bne.n	80017c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d107      	bne.n	80017c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0201 	mvn.w	r2, #1
 80017b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7fe ffc2 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	2b80      	cmp	r3, #128	; 0x80
 80017cc:	d10e      	bne.n	80017ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d8:	2b80      	cmp	r3, #128	; 0x80
 80017da:	d107      	bne.n	80017ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f902 	bl	80019f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f6:	2b40      	cmp	r3, #64	; 0x40
 80017f8:	d10e      	bne.n	8001818 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d107      	bne.n	8001818 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f838 	bl	8001888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b20      	cmp	r3, #32
 8001824:	d10e      	bne.n	8001844 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b20      	cmp	r3, #32
 8001832:	d107      	bne.n	8001844 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0220 	mvn.w	r2, #32
 800183c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8cc 	bl	80019dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a40      	ldr	r2, [pc, #256]	; (80019b0 <TIM_Base_SetConfig+0x114>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d013      	beq.n	80018dc <TIM_Base_SetConfig+0x40>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ba:	d00f      	beq.n	80018dc <TIM_Base_SetConfig+0x40>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3d      	ldr	r2, [pc, #244]	; (80019b4 <TIM_Base_SetConfig+0x118>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00b      	beq.n	80018dc <TIM_Base_SetConfig+0x40>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <TIM_Base_SetConfig+0x11c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d007      	beq.n	80018dc <TIM_Base_SetConfig+0x40>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3b      	ldr	r2, [pc, #236]	; (80019bc <TIM_Base_SetConfig+0x120>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d003      	beq.n	80018dc <TIM_Base_SetConfig+0x40>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <TIM_Base_SetConfig+0x124>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d108      	bne.n	80018ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <TIM_Base_SetConfig+0x114>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d02b      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fc:	d027      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <TIM_Base_SetConfig+0x118>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d023      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <TIM_Base_SetConfig+0x11c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d01f      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a2a      	ldr	r2, [pc, #168]	; (80019bc <TIM_Base_SetConfig+0x120>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d01b      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <TIM_Base_SetConfig+0x124>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d017      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <TIM_Base_SetConfig+0x128>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <TIM_Base_SetConfig+0x12c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00f      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <TIM_Base_SetConfig+0x130>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00b      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <TIM_Base_SetConfig+0x134>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <TIM_Base_SetConfig+0x138>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d003      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <TIM_Base_SetConfig+0x13c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d108      	bne.n	8001960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <TIM_Base_SetConfig+0x114>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d003      	beq.n	8001994 <TIM_Base_SetConfig+0xf8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <TIM_Base_SetConfig+0x124>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d103      	bne.n	800199c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	615a      	str	r2, [r3, #20]
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40010000 	.word	0x40010000
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40000800 	.word	0x40000800
 80019bc:	40000c00 	.word	0x40000c00
 80019c0:	40010400 	.word	0x40010400
 80019c4:	40014000 	.word	0x40014000
 80019c8:	40014400 	.word	0x40014400
 80019cc:	40014800 	.word	0x40014800
 80019d0:	40001800 	.word	0x40001800
 80019d4:	40001c00 	.word	0x40001c00
 80019d8:	40002000 	.word	0x40002000

080019dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f103 0208 	add.w	r2, r3, #8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f103 0208 	add.w	r2, r3, #8
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f103 0208 	add.w	r2, r3, #8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d103      	bne.n	8001ac6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e00c      	b.n	8001ae0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3308      	adds	r3, #8
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e002      	b.n	8001ad4 <vListInsert+0x2e>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d2f6      	bcs.n	8001ace <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6892      	ldr	r2, [r2, #8]
 8001b2e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6852      	ldr	r2, [r2, #4]
 8001b38:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d103      	bne.n	8001b4c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1e5a      	subs	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b84:	f383 8811 	msr	BASEPRI, r3
 8001b88:	f3bf 8f6f 	isb	sy
 8001b8c:	f3bf 8f4f 	dsb	sy
 8001b90:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001b92:	bf00      	nop
 8001b94:	e7fe      	b.n	8001b94 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001b96:	f002 f9c7 	bl	8003f28 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	441a      	add	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	441a      	add	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	22ff      	movs	r2, #255	; 0xff
 8001bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	22ff      	movs	r2, #255	; 0xff
 8001be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d114      	bne.n	8001c16 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01a      	beq.n	8001c2a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3310      	adds	r3, #16
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 f9a5 	bl	8002f48 <xTaskRemoveFromEventList>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <xQueueGenericReset+0xcc>)
 8001c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	e009      	b.n	8001c2a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3310      	adds	r3, #16
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fef2 	bl	8001a04 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3324      	adds	r3, #36	; 0x24
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff feed 	bl	8001a04 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001c2a:	f002 f9ad 	bl	8003f88 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	e000ed04 	.word	0xe000ed04

08001c3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10a      	bne.n	8001c66 <xQueueGenericCreate+0x2a>
        __asm volatile
 8001c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c54:	f383 8811 	msr	BASEPRI, r3
 8001c58:	f3bf 8f6f 	isb	sy
 8001c5c:	f3bf 8f4f 	dsb	sy
 8001c60:	61bb      	str	r3, [r7, #24]
    }
 8001c62:	bf00      	nop
 8001c64:	e7fe      	b.n	8001c64 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <xQueueGenericCreate+0x48>
 8001c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d101      	bne.n	8001c88 <xQueueGenericCreate+0x4c>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <xQueueGenericCreate+0x4e>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <xQueueGenericCreate+0x68>
        __asm volatile
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	f383 8811 	msr	BASEPRI, r3
 8001c96:	f3bf 8f6f 	isb	sy
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	617b      	str	r3, [r7, #20]
    }
 8001ca0:	bf00      	nop
 8001ca2:	e7fe      	b.n	8001ca2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001caa:	d90a      	bls.n	8001cc2 <xQueueGenericCreate+0x86>
        __asm volatile
 8001cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb0:	f383 8811 	msr	BASEPRI, r3
 8001cb4:	f3bf 8f6f 	isb	sy
 8001cb8:	f3bf 8f4f 	dsb	sy
 8001cbc:	613b      	str	r3, [r7, #16]
    }
 8001cbe:	bf00      	nop
 8001cc0:	e7fe      	b.n	8001cc0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	3350      	adds	r3, #80	; 0x50
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fa50 	bl	800416c <pvPortMalloc>
 8001ccc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	3350      	adds	r3, #80	; 0x50
 8001cdc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cde:	79fa      	ldrb	r2, [r7, #7]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f805 	bl	8001cfa <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
    }
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d103      	bne.n	8001d16 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e002      	b.n	8001d1c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d28:	2101      	movs	r1, #1
 8001d2a:	69b8      	ldr	r0, [r7, #24]
 8001d2c:	f7ff ff1e 	bl	8001b6c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10a      	bne.n	8001d72 <xQueueGenericSend+0x32>
        __asm volatile
 8001d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d60:	f383 8811 	msr	BASEPRI, r3
 8001d64:	f3bf 8f6f 	isb	sy
 8001d68:	f3bf 8f4f 	dsb	sy
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001d6e:	bf00      	nop
 8001d70:	e7fe      	b.n	8001d70 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d103      	bne.n	8001d80 <xQueueGenericSend+0x40>
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <xQueueGenericSend+0x44>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <xQueueGenericSend+0x46>
 8001d84:	2300      	movs	r3, #0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10a      	bne.n	8001da0 <xQueueGenericSend+0x60>
        __asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001d9c:	bf00      	nop
 8001d9e:	e7fe      	b.n	8001d9e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d103      	bne.n	8001dae <xQueueGenericSend+0x6e>
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <xQueueGenericSend+0x72>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <xQueueGenericSend+0x74>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <xQueueGenericSend+0x8e>
        __asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	623b      	str	r3, [r7, #32]
    }
 8001dca:	bf00      	nop
 8001dcc:	e7fe      	b.n	8001dcc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dce:	f001 fa57 	bl	8003280 <xTaskGetSchedulerState>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <xQueueGenericSend+0x9e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <xQueueGenericSend+0xa2>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <xQueueGenericSend+0xa4>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10a      	bne.n	8001dfe <xQueueGenericSend+0xbe>
        __asm volatile
 8001de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	61fb      	str	r3, [r7, #28]
    }
 8001dfa:	bf00      	nop
 8001dfc:	e7fe      	b.n	8001dfc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001dfe:	f002 f893 	bl	8003f28 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d302      	bcc.n	8001e14 <xQueueGenericSend+0xd4>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d129      	bne.n	8001e68 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e1a:	f000 fb3d 	bl	8002498 <prvCopyDataToQueue>
 8001e1e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	3324      	adds	r3, #36	; 0x24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 f88b 	bl	8002f48 <xTaskRemoveFromEventList>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001e38:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <xQueueGenericSend+0x1f8>)
 8001e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	e00a      	b.n	8001e60 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001e50:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <xQueueGenericSend+0x1f8>)
 8001e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f3bf 8f4f 	dsb	sy
 8001e5c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001e60:	f002 f892 	bl	8003f88 <vPortExitCritical>
                return pdPASS;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e063      	b.n	8001f30 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e6e:	f002 f88b 	bl	8003f88 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e05c      	b.n	8001f30 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 f8c3 	bl	800300c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e86:	2301      	movs	r3, #1
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e8a:	f002 f87d 	bl	8003f88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e8e:	f000 fe3d 	bl	8002b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e92:	f002 f849 	bl	8003f28 <vPortEnterCritical>
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d103      	bne.n	8001eac <xQueueGenericSend+0x16c>
 8001ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d103      	bne.n	8001ec2 <xQueueGenericSend+0x182>
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ec2:	f002 f861 	bl	8003f88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ec6:	1d3a      	adds	r2, r7, #4
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f001 f8b2 	bl	8003038 <xTaskCheckForTimeOut>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d124      	bne.n	8001f24 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001edc:	f000 fbd4 	bl	8002688 <prvIsQueueFull>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d018      	beq.n	8001f18 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	3310      	adds	r3, #16
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 ffda 	bl	8002ea8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ef6:	f000 fb5f 	bl	80025b8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001efa:	f000 fe15 	bl	8002b28 <xTaskResumeAll>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f af7c 	bne.w	8001dfe <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <xQueueGenericSend+0x1f8>)
 8001f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	e772      	b.n	8001dfe <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f1a:	f000 fb4d 	bl	80025b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f1e:	f000 fe03 	bl	8002b28 <xTaskResumeAll>
 8001f22:	e76c      	b.n	8001dfe <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f26:	f000 fb47 	bl	80025b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f2a:	f000 fdfd 	bl	8002b28 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001f2e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3738      	adds	r7, #56	; 0x38
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b090      	sub	sp, #64	; 0x40
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10a      	bne.n	8001f6a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001f66:	bf00      	nop
 8001f68:	e7fe      	b.n	8001f68 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <xQueueGenericSendFromISR+0x3c>
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <xQueueGenericSendFromISR+0x40>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <xQueueGenericSendFromISR+0x42>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10a      	bne.n	8001f98 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001f94:	bf00      	nop
 8001f96:	e7fe      	b.n	8001f96 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d103      	bne.n	8001fa6 <xQueueGenericSendFromISR+0x6a>
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <xQueueGenericSendFromISR+0x6e>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <xQueueGenericSendFromISR+0x70>
 8001faa:	2300      	movs	r3, #0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	f383 8811 	msr	BASEPRI, r3
 8001fb8:	f3bf 8f6f 	isb	sy
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	623b      	str	r3, [r7, #32]
    }
 8001fc2:	bf00      	nop
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fc6:	f002 f891 	bl	80040ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001fca:	f3ef 8211 	mrs	r2, BASEPRI
 8001fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	61fa      	str	r2, [r7, #28]
 8001fe0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <xQueueGenericSendFromISR+0xbc>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d13e      	bne.n	8002076 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800200e:	f000 fa43 	bl	8002498 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002012:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201a:	d112      	bne.n	8002042 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2b00      	cmp	r3, #0
 8002022:	d025      	beq.n	8002070 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002026:	3324      	adds	r3, #36	; 0x24
 8002028:	4618      	mov	r0, r3
 800202a:	f000 ff8d 	bl	8002f48 <xTaskRemoveFromEventList>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01d      	beq.n	8002070 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01a      	beq.n	8002070 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e016      	b.n	8002070 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002042:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002046:	2b7f      	cmp	r3, #127	; 0x7f
 8002048:	d10a      	bne.n	8002060 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	617b      	str	r3, [r7, #20]
    }
 800205c:	bf00      	nop
 800205e:	e7fe      	b.n	800205e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002060:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002064:	3301      	adds	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	b25a      	sxtb	r2, r3
 800206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002070:	2301      	movs	r3, #1
 8002072:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002074:	e001      	b.n	800207a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002076:	2300      	movs	r3, #0
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002084:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002088:	4618      	mov	r0, r3
 800208a:	3740      	adds	r7, #64	; 0x40
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10a      	bne.n	80020c0 <xQueueReceive+0x30>
        __asm volatile
 80020aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ae:	f383 8811 	msr	BASEPRI, r3
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	623b      	str	r3, [r7, #32]
    }
 80020bc:	bf00      	nop
 80020be:	e7fe      	b.n	80020be <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <xQueueReceive+0x3e>
 80020c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <xQueueReceive+0x42>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <xQueueReceive+0x44>
 80020d2:	2300      	movs	r3, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <xQueueReceive+0x5e>
        __asm volatile
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	61fb      	str	r3, [r7, #28]
    }
 80020ea:	bf00      	nop
 80020ec:	e7fe      	b.n	80020ec <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020ee:	f001 f8c7 	bl	8003280 <xTaskGetSchedulerState>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <xQueueReceive+0x6e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <xQueueReceive+0x72>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <xQueueReceive+0x74>
 8002102:	2300      	movs	r3, #0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <xQueueReceive+0x8e>
        __asm volatile
 8002108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	61bb      	str	r3, [r7, #24]
    }
 800211a:	bf00      	nop
 800211c:	e7fe      	b.n	800211c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800211e:	f001 ff03 	bl	8003f28 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d01f      	beq.n	800216e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002132:	f000 fa1b 	bl	800256c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	1e5a      	subs	r2, r3, #1
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00f      	beq.n	8002166 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	3310      	adds	r3, #16
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fefc 	bl	8002f48 <xTaskRemoveFromEventList>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <xQueueReceive+0x1bc>)
 8002158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002166:	f001 ff0f 	bl	8003f88 <vPortExitCritical>
                return pdPASS;
 800216a:	2301      	movs	r3, #1
 800216c:	e069      	b.n	8002242 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002174:	f001 ff08 	bl	8003f88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002178:	2300      	movs	r3, #0
 800217a:	e062      	b.n	8002242 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	4618      	mov	r0, r3
 8002188:	f000 ff40 	bl	800300c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800218c:	2301      	movs	r3, #1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002190:	f001 fefa 	bl	8003f88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002194:	f000 fcba 	bl	8002b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002198:	f001 fec6 	bl	8003f28 <vPortEnterCritical>
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d103      	bne.n	80021b2 <xQueueReceive+0x122>
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021be:	d103      	bne.n	80021c8 <xQueueReceive+0x138>
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021c8:	f001 fede 	bl	8003f88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021cc:	1d3a      	adds	r2, r7, #4
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 ff2f 	bl	8003038 <xTaskCheckForTimeOut>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d123      	bne.n	8002228 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021e2:	f000 fa3b 	bl	800265c <prvIsQueueEmpty>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d017      	beq.n	800221c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	3324      	adds	r3, #36	; 0x24
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fe57 	bl	8002ea8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80021fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021fc:	f000 f9dc 	bl	80025b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002200:	f000 fc92 	bl	8002b28 <xTaskResumeAll>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d189      	bne.n	800211e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <xQueueReceive+0x1bc>)
 800220c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	e780      	b.n	800211e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800221c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800221e:	f000 f9cb 	bl	80025b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002222:	f000 fc81 	bl	8002b28 <xTaskResumeAll>
 8002226:	e77a      	b.n	800211e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800222a:	f000 f9c5 	bl	80025b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800222e:	f000 fc7b 	bl	8002b28 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002234:	f000 fa12 	bl	800265c <prvIsQueueEmpty>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f43f af6f 	beq.w	800211e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002240:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002242:	4618      	mov	r0, r3
 8002244:	3730      	adds	r7, #48	; 0x30
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000ed04 	.word	0xe000ed04

08002250 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08e      	sub	sp, #56	; 0x38
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800225a:	2300      	movs	r3, #0
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002262:	2300      	movs	r3, #0
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	623b      	str	r3, [r7, #32]
    }
 800227e:	bf00      	nop
 8002280:	e7fe      	b.n	8002280 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	61fb      	str	r3, [r7, #28]
    }
 800229c:	bf00      	nop
 800229e:	e7fe      	b.n	800229e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022a0:	f000 ffee 	bl	8003280 <xTaskGetSchedulerState>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <xQueueSemaphoreTake+0x60>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <xQueueSemaphoreTake+0x64>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <xQueueSemaphoreTake+0x66>
 80022b4:	2300      	movs	r3, #0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	61bb      	str	r3, [r7, #24]
    }
 80022cc:	bf00      	nop
 80022ce:	e7fe      	b.n	80022ce <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80022d0:	f001 fe2a 	bl	8003f28 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d024      	beq.n	800232a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	1e5a      	subs	r2, r3, #1
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d104      	bne.n	80022fa <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80022f0:	f001 f962 	bl	80035b8 <pvTaskIncrementMutexHeldCount>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00f      	beq.n	8002322 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	3310      	adds	r3, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fe1e 	bl	8002f48 <xTaskRemoveFromEventList>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <xQueueSemaphoreTake+0x214>)
 8002314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002322:	f001 fe31 	bl	8003f88 <vPortExitCritical>
                return pdPASS;
 8002326:	2301      	movs	r3, #1
 8002328:	e097      	b.n	800245a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d111      	bne.n	8002354 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	617b      	str	r3, [r7, #20]
    }
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800234c:	f001 fe1c 	bl	8003f88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002350:	2300      	movs	r3, #0
 8002352:	e082      	b.n	800245a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fe54 	bl	800300c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002364:	2301      	movs	r3, #1
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002368:	f001 fe0e 	bl	8003f88 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800236c:	f000 fbce 	bl	8002b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002370:	f001 fdda 	bl	8003f28 <vPortEnterCritical>
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800237a:	b25b      	sxtb	r3, r3
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d103      	bne.n	800238a <xQueueSemaphoreTake+0x13a>
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002390:	b25b      	sxtb	r3, r3
 8002392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002396:	d103      	bne.n	80023a0 <xQueueSemaphoreTake+0x150>
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023a0:	f001 fdf2 	bl	8003f88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023a4:	463a      	mov	r2, r7
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fe43 	bl	8003038 <xTaskCheckForTimeOut>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d132      	bne.n	800241e <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023ba:	f000 f94f 	bl	800265c <prvIsQueueEmpty>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d026      	beq.n	8002412 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80023cc:	f001 fdac 	bl	8003f28 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 ff71 	bl	80032bc <xTaskPriorityInherit>
 80023da:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80023dc:	f001 fdd4 	bl	8003f88 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	3324      	adds	r3, #36	; 0x24
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fd5d 	bl	8002ea8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80023ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023f0:	f000 f8e2 	bl	80025b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80023f4:	f000 fb98 	bl	8002b28 <xTaskResumeAll>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f47f af68 	bne.w	80022d0 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <xQueueSemaphoreTake+0x214>)
 8002402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	e75e      	b.n	80022d0 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002414:	f000 f8d0 	bl	80025b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002418:	f000 fb86 	bl	8002b28 <xTaskResumeAll>
 800241c:	e758      	b.n	80022d0 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800241e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002420:	f000 f8ca 	bl	80025b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002424:	f000 fb80 	bl	8002b28 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800242a:	f000 f917 	bl	800265c <prvIsQueueEmpty>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f43f af4d 	beq.w	80022d0 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 800243c:	f001 fd74 	bl	8003f28 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002442:	f000 f811 	bl	8002468 <prvGetDisinheritPriorityAfterTimeout>
 8002446:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244e:	4618      	mov	r0, r3
 8002450:	f001 f824 	bl	800349c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002454:	f001 fd98 	bl	8003f88 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002458:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800245a:	4618      	mov	r0, r3
 800245c:	3738      	adds	r7, #56	; 0x38
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000ed04 	.word	0xe000ed04

08002468 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1c3 0305 	rsb	r3, r3, #5
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e001      	b.n	800248a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800248a:	68fb      	ldr	r3, [r7, #12]
    }
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d14d      	bne.n	800255a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 ff70 	bl	80033a8 <xTaskPriorityDisinherit>
 80024c8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e043      	b.n	800255a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d119      	bne.n	800250c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6858      	ldr	r0, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	461a      	mov	r2, r3
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	f002 f864 	bl	80045b0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	441a      	add	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d32b      	bcc.n	800255a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	e026      	b.n	800255a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68d8      	ldr	r0, [r3, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	461a      	mov	r2, r3
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	f002 f84a 	bl	80045b0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	425b      	negs	r3, r3
 8002526:	441a      	add	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	425b      	negs	r3, r3
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d105      	bne.n	800255a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3b01      	subs	r3, #1
 8002558:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002562:	697b      	ldr	r3, [r7, #20]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d018      	beq.n	80025b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	441a      	add	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	d303      	bcc.n	80025a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68d9      	ldr	r1, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	461a      	mov	r2, r3
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	f002 f800 	bl	80045b0 <memcpy>
    }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025c0:	f001 fcb2 	bl	8003f28 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025cc:	e011      	b.n	80025f2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3324      	adds	r3, #36	; 0x24
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fcb4 	bl	8002f48 <xTaskRemoveFromEventList>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80025e6:	f000 fd8d 	bl	8003104 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dce9      	bgt.n	80025ce <prvUnlockQueue+0x16>
 80025fa:	e000      	b.n	80025fe <prvUnlockQueue+0x46>
                        break;
 80025fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	22ff      	movs	r2, #255	; 0xff
 8002602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002606:	f001 fcbf 	bl	8003f88 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800260a:	f001 fc8d 	bl	8003f28 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002614:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002616:	e011      	b.n	800263c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3310      	adds	r3, #16
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fc8f 	bl	8002f48 <xTaskRemoveFromEventList>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002630:	f000 fd68 	bl	8003104 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002634:	7bbb      	ldrb	r3, [r7, #14]
 8002636:	3b01      	subs	r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800263c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002640:	2b00      	cmp	r3, #0
 8002642:	dce9      	bgt.n	8002618 <prvUnlockQueue+0x60>
 8002644:	e000      	b.n	8002648 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002646:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	22ff      	movs	r2, #255	; 0xff
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002650:	f001 fc9a 	bl	8003f88 <vPortExitCritical>
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002664:	f001 fc60 	bl	8003f28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002670:	2301      	movs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e001      	b.n	800267a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800267a:	f001 fc85 	bl	8003f88 <vPortExitCritical>

    return xReturn;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002690:	f001 fc4a 	bl	8003f28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	429a      	cmp	r2, r3
 800269e:	d102      	bne.n	80026a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80026a0:	2301      	movs	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e001      	b.n	80026aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026aa:	f001 fc6d 	bl	8003f88 <vPortExitCritical>

    return xReturn;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e014      	b.n	80026f2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <vQueueAddToRegistry+0x50>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <vQueueAddToRegistry+0x50>)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <vQueueAddToRegistry+0x50>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80026ea:	e006      	b.n	80026fa <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b07      	cmp	r3, #7
 80026f6:	d9e7      	bls.n	80026c8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000088 	.word	0x20000088

0800270c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800271c:	f001 fc04 	bl	8003f28 <vPortEnterCritical>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002726:	b25b      	sxtb	r3, r3
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d103      	bne.n	8002736 <vQueueWaitForMessageRestricted+0x2a>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800273c:	b25b      	sxtb	r3, r3
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d103      	bne.n	800274c <vQueueWaitForMessageRestricted+0x40>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800274c:	f001 fc1c 	bl	8003f88 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3324      	adds	r3, #36	; 0x24
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fbc5 	bl	8002ef0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff26 	bl	80025b8 <prvUnlockQueue>
    }
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	; 0x30
 8002778:	af04      	add	r7, sp, #16
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4618      	mov	r0, r3
 800278a:	f001 fcef 	bl	800416c <pvPortMalloc>
 800278e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002796:	2058      	movs	r0, #88	; 0x58
 8002798:	f001 fce8 	bl	800416c <pvPortMalloc>
 800279c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
 80027aa:	e005      	b.n	80027b8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80027ac:	6978      	ldr	r0, [r7, #20]
 80027ae:	f001 fdbd 	bl	800432c <vPortFree>
 80027b2:	e001      	b.n	80027b8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d013      	beq.n	80027e6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	2300      	movs	r3, #0
 80027c2:	9303      	str	r3, [sp, #12]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f80e 	bl	80027f6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80027da:	69f8      	ldr	r0, [r7, #28]
 80027dc:	f000 f8a2 	bl	8002924 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	e002      	b.n	80027ec <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80027ec:	69bb      	ldr	r3, [r7, #24]
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b088      	sub	sp, #32
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	461a      	mov	r2, r3
 800280e:	21a5      	movs	r1, #165	; 0xa5
 8002810:	f001 fedc 	bl	80045cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800281e:	3b01      	subs	r3, #1
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f023 0307 	bic.w	r3, r3, #7
 800282c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	617b      	str	r3, [r7, #20]
    }
 800284a:	bf00      	nop
 800284c:	e7fe      	b.n	800284c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01f      	beq.n	8002894 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	e012      	b.n	8002880 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	7819      	ldrb	r1, [r3, #0]
 8002862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	3334      	adds	r3, #52	; 0x34
 800286a:	460a      	mov	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b09      	cmp	r3, #9
 8002884:	d9e9      	bls.n	800285a <prvInitialiseNewTask+0x64>
 8002886:	e000      	b.n	800288a <prvInitialiseNewTask+0x94>
            {
                break;
 8002888:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002892:	e003      	b.n	800289c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d901      	bls.n	80028a6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028a2:	2304      	movs	r3, #4
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	2200      	movs	r2, #0
 80028b6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	3304      	adds	r3, #4
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f8c1 	bl	8001a44 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	3318      	adds	r3, #24
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f8bc 	bl	8001a44 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	f1c3 0205 	rsb	r2, r3, #5
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	3350      	adds	r3, #80	; 0x50
 80028e6:	2204      	movs	r2, #4
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fe6e 	bl	80045cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	3354      	adds	r3, #84	; 0x54
 80028f4:	2201      	movs	r2, #1
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 fe67 	bl	80045cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	69b8      	ldr	r0, [r7, #24]
 8002904:	f001 f9e4 	bl	8003cd0 <pxPortInitialiseStack>
 8002908:	4602      	mov	r2, r0
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002918:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800291a:	bf00      	nop
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800292c:	f001 fafc 	bl	8003f28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002930:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <prvAddNewTaskToReadyList+0xc0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <prvAddNewTaskToReadyList+0xc0>)
 8002938:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800293a:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <prvAddNewTaskToReadyList+0xc4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002942:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <prvAddNewTaskToReadyList+0xc4>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002948:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <prvAddNewTaskToReadyList+0xc0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d110      	bne.n	8002972 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002950:	f000 fbfc 	bl	800314c <prvInitialiseTaskLists>
 8002954:	e00d      	b.n	8002972 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002956:	4b25      	ldr	r3, [pc, #148]	; (80029ec <prvAddNewTaskToReadyList+0xc8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <prvAddNewTaskToReadyList+0xc4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	429a      	cmp	r2, r3
 800296a:	d802      	bhi.n	8002972 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800296c:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <prvAddNewTaskToReadyList+0xc4>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002972:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <prvAddNewTaskToReadyList+0xcc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <prvAddNewTaskToReadyList+0xcc>)
 800297a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800297c:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <prvAddNewTaskToReadyList+0xcc>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <prvAddNewTaskToReadyList+0xd0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4313      	orrs	r3, r2
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <prvAddNewTaskToReadyList+0xd0>)
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <prvAddNewTaskToReadyList+0xd4>)
 80029a4:	441a      	add	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f7ff f856 	bl	8001a5e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80029b2:	f001 fae9 	bl	8003f88 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <prvAddNewTaskToReadyList+0xc8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00e      	beq.n	80029dc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <prvAddNewTaskToReadyList+0xc4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <prvAddNewTaskToReadyList+0xd8>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200001a0 	.word	0x200001a0
 80029e8:	200000c8 	.word	0x200000c8
 80029ec:	200001ac 	.word	0x200001ac
 80029f0:	200001bc 	.word	0x200001bc
 80029f4:	200001a8 	.word	0x200001a8
 80029f8:	200000cc 	.word	0x200000cc
 80029fc:	e000ed04 	.word	0xe000ed04

08002a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d017      	beq.n	8002a42 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <vTaskDelay+0x60>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <vTaskDelay+0x30>
        __asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	60bb      	str	r3, [r7, #8]
    }
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002a30:	f000 f86c 	bl	8002b0c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a34:	2100      	movs	r1, #0
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fdd2 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a3c:	f000 f874 	bl	8002b28 <xTaskResumeAll>
 8002a40:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <vTaskDelay+0x64>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200001c8 	.word	0x200001c8
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <vTaskStartScheduler+0x88>)
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	2300      	movs	r3, #0
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2300      	movs	r3, #0
 8002a78:	2282      	movs	r2, #130	; 0x82
 8002a7a:	491e      	ldr	r1, [pc, #120]	; (8002af4 <vTaskStartScheduler+0x8c>)
 8002a7c:	481e      	ldr	r0, [pc, #120]	; (8002af8 <vTaskStartScheduler+0x90>)
 8002a7e:	f7ff fe79 	bl	8002774 <xTaskCreate>
 8002a82:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d102      	bne.n	8002a90 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002a8a:	f000 fe0f 	bl	80036ac <xTimerCreateTimerTask>
 8002a8e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d116      	bne.n	8002ac4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60bb      	str	r3, [r7, #8]
    }
 8002aa8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <vTaskStartScheduler+0x94>)
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <vTaskStartScheduler+0x98>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <vTaskStartScheduler+0x9c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002abe:	f001 f991 	bl	8003de4 <xPortStartScheduler>
 8002ac2:	e00e      	b.n	8002ae2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d10a      	bne.n	8002ae2 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	607b      	str	r3, [r7, #4]
    }
 8002ade:	bf00      	nop
 8002ae0:	e7fe      	b.n	8002ae0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <vTaskStartScheduler+0xa0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200001c4 	.word	0x200001c4
 8002af4:	0800460c 	.word	0x0800460c
 8002af8:	0800311d 	.word	0x0800311d
 8002afc:	200001c0 	.word	0x200001c0
 8002b00:	200001ac 	.word	0x200001ac
 8002b04:	200001a4 	.word	0x200001a4
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <vTaskSuspendAll+0x18>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <vTaskSuspendAll+0x18>)
 8002b18:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	200001c8 	.word	0x200001c8

08002b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <xTaskResumeAll+0x114>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	603b      	str	r3, [r7, #0]
    }
 8002b50:	bf00      	nop
 8002b52:	e7fe      	b.n	8002b52 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b54:	f001 f9e8 	bl	8003f28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b58:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <xTaskResumeAll+0x114>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	4a37      	ldr	r2, [pc, #220]	; (8002c3c <xTaskResumeAll+0x114>)
 8002b60:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <xTaskResumeAll+0x114>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d161      	bne.n	8002c2e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b6a:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <xTaskResumeAll+0x118>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d05d      	beq.n	8002c2e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b72:	e02e      	b.n	8002bd2 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b74:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <xTaskResumeAll+0x11c>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3318      	adds	r3, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe ffc9 	bl	8001b18 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe ffc4 	bl	8001b18 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	2201      	movs	r2, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <xTaskResumeAll+0x120>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <xTaskResumeAll+0x120>)
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <xTaskResumeAll+0x124>)
 8002bb0:	441a      	add	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f7fe ff50 	bl	8001a5e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <xTaskResumeAll+0x128>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <xTaskResumeAll+0x12c>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <xTaskResumeAll+0x11c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1cc      	bne.n	8002b74 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002be0:	f000 fb32 	bl	8003248 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <xTaskResumeAll+0x130>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bf0:	f000 f846 	bl	8002c80 <xTaskIncrementTick>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <xTaskResumeAll+0x12c>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f1      	bne.n	8002bf0 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <xTaskResumeAll+0x130>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <xTaskResumeAll+0x12c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <xTaskResumeAll+0x134>)
 8002c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c2e:	f001 f9ab 	bl	8003f88 <vPortExitCritical>

    return xAlreadyYielded;
 8002c32:	68bb      	ldr	r3, [r7, #8]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200001c8 	.word	0x200001c8
 8002c40:	200001a0 	.word	0x200001a0
 8002c44:	20000160 	.word	0x20000160
 8002c48:	200001a8 	.word	0x200001a8
 8002c4c:	200000cc 	.word	0x200000cc
 8002c50:	200000c8 	.word	0x200000c8
 8002c54:	200001b4 	.word	0x200001b4
 8002c58:	200001b0 	.word	0x200001b0
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <xTaskGetTickCount+0x1c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	200001a4 	.word	0x200001a4

08002c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c8a:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <xTaskIncrementTick+0x144>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 808e 	bne.w	8002db0 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c94:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <xTaskIncrementTick+0x148>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c9c:	4a4a      	ldr	r2, [pc, #296]	; (8002dc8 <xTaskIncrementTick+0x148>)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d120      	bne.n	8002cea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ca8:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	603b      	str	r3, [r7, #0]
    }
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <xTaskIncrementTick+0x46>
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <xTaskIncrementTick+0x150>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3e      	ldr	r2, [pc, #248]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4a3e      	ldr	r2, [pc, #248]	; (8002dd0 <xTaskIncrementTick+0x150>)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <xTaskIncrementTick+0x154>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a3c      	ldr	r2, [pc, #240]	; (8002dd4 <xTaskIncrementTick+0x154>)
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	f000 faaf 	bl	8003248 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <xTaskIncrementTick+0x158>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d348      	bcc.n	8002d86 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cf4:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d104      	bne.n	8002d08 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cfe:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <xTaskIncrementTick+0x158>)
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	601a      	str	r2, [r3, #0]
                    break;
 8002d06:	e03e      	b.n	8002d86 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d08:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d203      	bcs.n	8002d28 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d20:	4a2d      	ldr	r2, [pc, #180]	; (8002dd8 <xTaskIncrementTick+0x158>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d26:	e02e      	b.n	8002d86 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fef3 	bl	8001b18 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	3318      	adds	r3, #24
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe feea 	bl	8001b18 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	2201      	movs	r2, #1
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <xTaskIncrementTick+0x15c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <xTaskIncrementTick+0x15c>)
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <xTaskIncrementTick+0x160>)
 8002d64:	441a      	add	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7fe fe76 	bl	8001a5e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <xTaskIncrementTick+0x164>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3b9      	bcc.n	8002cf4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d84:	e7b6      	b.n	8002cf4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <xTaskIncrementTick+0x164>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	4914      	ldr	r1, [pc, #80]	; (8002de0 <xTaskIncrementTick+0x160>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d901      	bls.n	8002da2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <xTaskIncrementTick+0x168>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e004      	b.n	8002dba <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <xTaskIncrementTick+0x16c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <xTaskIncrementTick+0x16c>)
 8002db8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002dba:	697b      	ldr	r3, [r7, #20]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200001c8 	.word	0x200001c8
 8002dc8:	200001a4 	.word	0x200001a4
 8002dcc:	20000158 	.word	0x20000158
 8002dd0:	2000015c 	.word	0x2000015c
 8002dd4:	200001b8 	.word	0x200001b8
 8002dd8:	200001c0 	.word	0x200001c0
 8002ddc:	200001a8 	.word	0x200001a8
 8002de0:	200000cc 	.word	0x200000cc
 8002de4:	200000c8 	.word	0x200000c8
 8002de8:	200001b4 	.word	0x200001b4
 8002dec:	200001b0 	.word	0x200001b0

08002df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002df6:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <vTaskSwitchContext+0xa4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <vTaskSwitchContext+0xa8>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e04:	e03f      	b.n	8002e86 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <vTaskSwitchContext+0xa8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <vTaskSwitchContext+0xac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
 8002e1c:	f1c3 031f 	rsb	r3, r3, #31
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	491f      	ldr	r1, [pc, #124]	; (8002ea0 <vTaskSwitchContext+0xb0>)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	607b      	str	r3, [r7, #4]
    }
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <vTaskSwitchContext+0x5a>
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <vTaskSwitchContext+0xb0>)
 8002e58:	4413      	add	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d104      	bne.n	8002e7c <vTaskSwitchContext+0x8c>
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <vTaskSwitchContext+0xb4>)
 8002e84:	6013      	str	r3, [r2, #0]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	200001c8 	.word	0x200001c8
 8002e98:	200001b4 	.word	0x200001b4
 8002e9c:	200001a8 	.word	0x200001a8
 8002ea0:	200000cc 	.word	0x200000cc
 8002ea4:	200000c8 	.word	0x200000c8

08002ea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	60fb      	str	r3, [r7, #12]
    }
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <vTaskPlaceOnEventList+0x44>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3318      	adds	r3, #24
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fde5 	bl	8001aa6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002edc:	2101      	movs	r1, #1
 8002ede:	6838      	ldr	r0, [r7, #0]
 8002ee0:	f000 fb7e 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200000c8 	.word	0x200000c8

08002ef0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	617b      	str	r3, [r7, #20]
    }
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <vTaskPlaceOnEventListRestricted+0x54>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	4619      	mov	r1, r3
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7fe fd9c 	bl	8001a5e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f30:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	68b8      	ldr	r0, [r7, #8]
 8002f36:	f000 fb53 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
    }
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200000c8 	.word	0x200000c8

08002f48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	60fb      	str	r3, [r7, #12]
    }
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	3318      	adds	r3, #24
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fdcd 	bl	8001b18 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <xTaskRemoveFromEventList+0xac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11c      	bne.n	8002fc0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fdc4 	bl	8001b18 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2201      	movs	r2, #1
 8002f96:	409a      	lsls	r2, r3
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <xTaskRemoveFromEventList+0xb0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	4a16      	ldr	r2, [pc, #88]	; (8002ff8 <xTaskRemoveFromEventList+0xb0>)
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <xTaskRemoveFromEventList+0xb4>)
 8002fb0:	441a      	add	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f7fe fd50 	bl	8001a5e <vListInsertEnd>
 8002fbe:	e005      	b.n	8002fcc <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	3318      	adds	r3, #24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480e      	ldr	r0, [pc, #56]	; (8003000 <xTaskRemoveFromEventList+0xb8>)
 8002fc8:	f7fe fd49 	bl	8001a5e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <xTaskRemoveFromEventList+0xbc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d905      	bls.n	8002fe6 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <xTaskRemoveFromEventList+0xc0>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e001      	b.n	8002fea <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002fea:	697b      	ldr	r3, [r7, #20]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	200001c8 	.word	0x200001c8
 8002ff8:	200001a8 	.word	0x200001a8
 8002ffc:	200000cc 	.word	0x200000cc
 8003000:	20000160 	.word	0x20000160
 8003004:	200000c8 	.word	0x200000c8
 8003008:	200001b4 	.word	0x200001b4

0800300c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <vTaskInternalSetTimeOutState+0x24>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <vTaskInternalSetTimeOutState+0x28>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	605a      	str	r2, [r3, #4]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	200001b8 	.word	0x200001b8
 8003034:	200001a4 	.word	0x200001a4

08003038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	613b      	str	r3, [r7, #16]
    }
 800305a:	bf00      	nop
 800305c:	e7fe      	b.n	800305c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	60fb      	str	r3, [r7, #12]
    }
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800307a:	f000 ff55 	bl	8003f28 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <xTaskCheckForTimeOut+0xc4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d102      	bne.n	800309e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	e026      	b.n	80030ec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <xTaskCheckForTimeOut+0xc8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d00a      	beq.n	80030c0 <xTaskCheckForTimeOut+0x88>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d305      	bcc.n	80030c0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e015      	b.n	80030ec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d20b      	bcs.n	80030e2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1ad2      	subs	r2, r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ff98 	bl	800300c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	e004      	b.n	80030ec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80030e8:	2301      	movs	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80030ec:	f000 ff4c 	bl	8003f88 <vPortExitCritical>

    return xReturn;
 80030f0:	69fb      	ldr	r3, [r7, #28]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200001a4 	.word	0x200001a4
 8003100:	200001b8 	.word	0x200001b8

08003104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <vTaskMissedYield+0x14>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	200001b4 	.word	0x200001b4

0800311c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003124:	f000 f852 	bl	80031cc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <prvIdleTask+0x28>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d9f9      	bls.n	8003124 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <prvIdleTask+0x2c>)
 8003132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003140:	e7f0      	b.n	8003124 <prvIdleTask+0x8>
 8003142:	bf00      	nop
 8003144:	200000cc 	.word	0x200000cc
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	e00c      	b.n	8003172 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <prvInitialiseTaskLists+0x60>)
 8003164:	4413      	add	r3, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fc4c 	bl	8001a04 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3301      	adds	r3, #1
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d9ef      	bls.n	8003158 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003178:	480d      	ldr	r0, [pc, #52]	; (80031b0 <prvInitialiseTaskLists+0x64>)
 800317a:	f7fe fc43 	bl	8001a04 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800317e:	480d      	ldr	r0, [pc, #52]	; (80031b4 <prvInitialiseTaskLists+0x68>)
 8003180:	f7fe fc40 	bl	8001a04 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <prvInitialiseTaskLists+0x6c>)
 8003186:	f7fe fc3d 	bl	8001a04 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800318a:	480c      	ldr	r0, [pc, #48]	; (80031bc <prvInitialiseTaskLists+0x70>)
 800318c:	f7fe fc3a 	bl	8001a04 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003190:	480b      	ldr	r0, [pc, #44]	; (80031c0 <prvInitialiseTaskLists+0x74>)
 8003192:	f7fe fc37 	bl	8001a04 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <prvInitialiseTaskLists+0x78>)
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <prvInitialiseTaskLists+0x64>)
 800319a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800319c:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <prvInitialiseTaskLists+0x7c>)
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <prvInitialiseTaskLists+0x68>)
 80031a0:	601a      	str	r2, [r3, #0]
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200000cc 	.word	0x200000cc
 80031b0:	20000130 	.word	0x20000130
 80031b4:	20000144 	.word	0x20000144
 80031b8:	20000160 	.word	0x20000160
 80031bc:	20000174 	.word	0x20000174
 80031c0:	2000018c 	.word	0x2000018c
 80031c4:	20000158 	.word	0x20000158
 80031c8:	2000015c 	.word	0x2000015c

080031cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031d2:	e019      	b.n	8003208 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80031d4:	f000 fea8 	bl	8003f28 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <prvCheckTasksWaitingTermination+0x50>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fc97 	bl	8001b18 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <prvCheckTasksWaitingTermination+0x54>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <prvCheckTasksWaitingTermination+0x54>)
 80031f2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <prvCheckTasksWaitingTermination+0x58>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <prvCheckTasksWaitingTermination+0x58>)
 80031fc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80031fe:	f000 fec3 	bl	8003f88 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f810 	bl	8003228 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <prvCheckTasksWaitingTermination+0x58>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e1      	bne.n	80031d4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000174 	.word	0x20000174
 8003220:	200001a0 	.word	0x200001a0
 8003224:	20000188 	.word	0x20000188

08003228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f879 	bl	800432c <vPortFree>
                vPortFree( pxTCB );
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f001 f876 	bl	800432c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <prvResetNextTaskUnblockTime+0x30>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <prvResetNextTaskUnblockTime+0x34>)
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800325e:	e005      	b.n	800326c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <prvResetNextTaskUnblockTime+0x30>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <prvResetNextTaskUnblockTime+0x34>)
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000158 	.word	0x20000158
 800327c:	200001c0 	.word	0x200001c0

08003280 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <xTaskGetSchedulerState+0x34>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800328e:	2301      	movs	r3, #1
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	e008      	b.n	80032a6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <xTaskGetSchedulerState+0x38>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800329c:	2302      	movs	r3, #2
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	e001      	b.n	80032a6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80032a2:	2300      	movs	r3, #0
 80032a4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80032a6:	687b      	ldr	r3, [r7, #4]
    }
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	200001ac 	.word	0x200001ac
 80032b8:	200001c8 	.word	0x200001c8

080032bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d05e      	beq.n	8003390 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	4b31      	ldr	r3, [pc, #196]	; (800339c <xTaskPriorityInherit+0xe0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	429a      	cmp	r2, r3
 80032de:	d24e      	bcs.n	800337e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	db06      	blt.n	80032f6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e8:	4b2c      	ldr	r3, [pc, #176]	; (800339c <xTaskPriorityInherit+0xe0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	f1c3 0205 	rsb	r2, r3, #5
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6959      	ldr	r1, [r3, #20]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <xTaskPriorityInherit+0xe4>)
 8003308:	4413      	add	r3, r2
 800330a:	4299      	cmp	r1, r3
 800330c:	d12f      	bne.n	800336e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3304      	adds	r3, #4
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fc00 	bl	8001b18 <uxListRemove>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	2201      	movs	r2, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43da      	mvns	r2, r3
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <xTaskPriorityInherit+0xe8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4013      	ands	r3, r2
 8003330:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <xTaskPriorityInherit+0xe8>)
 8003332:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <xTaskPriorityInherit+0xe0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	2201      	movs	r2, #1
 8003344:	409a      	lsls	r2, r3
 8003346:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <xTaskPriorityInherit+0xe8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <xTaskPriorityInherit+0xe8>)
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <xTaskPriorityInherit+0xe4>)
 800335e:	441a      	add	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f7fe fb79 	bl	8001a5e <vListInsertEnd>
 800336c:	e004      	b.n	8003378 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <xTaskPriorityInherit+0xe0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e008      	b.n	8003390 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <xTaskPriorityInherit+0xe0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	429a      	cmp	r2, r3
 800338a:	d201      	bcs.n	8003390 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003390:	68fb      	ldr	r3, [r7, #12]
    }
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200000c8 	.word	0x200000c8
 80033a0:	200000cc 	.word	0x200000cc
 80033a4:	200001a8 	.word	0x200001a8

080033a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80033be:	4b34      	ldr	r3, [pc, #208]	; (8003490 <xTaskPriorityDisinherit+0xe8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d00a      	beq.n	80033de <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	60fb      	str	r3, [r7, #12]
    }
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	60bb      	str	r3, [r7, #8]
    }
 80033f8:	bf00      	nop
 80033fa:	e7fe      	b.n	80033fa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340e:	429a      	cmp	r2, r3
 8003410:	d039      	beq.n	8003486 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d135      	bne.n	8003486 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	3304      	adds	r3, #4
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fb7a 	bl	8001b18 <uxListRemove>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	2201      	movs	r2, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43da      	mvns	r2, r3
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <xTaskPriorityDisinherit+0xec>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4013      	ands	r3, r2
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <xTaskPriorityDisinherit+0xec>)
 800343e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	f1c3 0205 	rsb	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	2201      	movs	r2, #1
 800345a:	409a      	lsls	r2, r3
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <xTaskPriorityDisinherit+0xec>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4313      	orrs	r3, r2
 8003462:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <xTaskPriorityDisinherit+0xec>)
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <xTaskPriorityDisinherit+0xf0>)
 8003474:	441a      	add	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	3304      	adds	r3, #4
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f7fe faee 	bl	8001a5e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003482:	2301      	movs	r3, #1
 8003484:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003486:	697b      	ldr	r3, [r7, #20]
    }
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	200000c8 	.word	0x200000c8
 8003494:	200001a8 	.word	0x200001a8
 8003498:	200000cc 	.word	0x200000cc

0800349c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d077      	beq.n	80035a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	60fb      	str	r3, [r7, #12]
    }
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d902      	bls.n	80034e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	e002      	b.n	80034e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e6:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d058      	beq.n	80035a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d153      	bne.n	80035a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	429a      	cmp	r2, r3
 8003504:	d10a      	bne.n	800351c <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	60bb      	str	r3, [r7, #8]
    }
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	db04      	blt.n	800353a <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f1c3 0205 	rsb	r2, r3, #5
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	6959      	ldr	r1, [r3, #20]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800354a:	4413      	add	r3, r2
 800354c:	4299      	cmp	r1, r3
 800354e:	d129      	bne.n	80035a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	3304      	adds	r3, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fadf 	bl	8001b18 <uxListRemove>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	2201      	movs	r2, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4013      	ands	r3, r2
 8003572:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003574:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	2201      	movs	r2, #1
 800357c:	409a      	lsls	r2, r3
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003596:	441a      	add	r2, r3
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f7fe fa5d 	bl	8001a5e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80035a4:	bf00      	nop
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200000c8 	.word	0x200000c8
 80035b0:	200000cc 	.word	0x200000cc
 80035b4:	200001a8 	.word	0x200001a8

080035b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <pvTaskIncrementMutexHeldCount+0x24>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <pvTaskIncrementMutexHeldCount+0x24>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035ca:	3201      	adds	r2, #1
 80035cc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80035ce:	4b03      	ldr	r3, [pc, #12]	; (80035dc <pvTaskIncrementMutexHeldCount+0x24>)
 80035d0:	681b      	ldr	r3, [r3, #0]
    }
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	200000c8 	.word	0x200000c8

080035e0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80035ea:	4b29      	ldr	r3, [pc, #164]	; (8003690 <prvAddCurrentTaskToDelayedList+0xb0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fa8e 	bl	8001b18 <uxListRemove>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	2201      	movs	r2, #1
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4013      	ands	r3, r2
 8003616:	4a20      	ldr	r2, [pc, #128]	; (8003698 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003618:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d10a      	bne.n	8003638 <prvAddCurrentTaskToDelayedList+0x58>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3304      	adds	r3, #4
 800362e:	4619      	mov	r1, r3
 8003630:	481a      	ldr	r0, [pc, #104]	; (800369c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003632:	f7fe fa14 	bl	8001a5e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003636:	e026      	b.n	8003686 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	429a      	cmp	r2, r3
 800364e:	d209      	bcs.n	8003664 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3304      	adds	r3, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7fe fa22 	bl	8001aa6 <vListInsert>
}
 8003662:	e010      	b.n	8003686 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3304      	adds	r3, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f7fe fa18 	bl	8001aa6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d202      	bcs.n	8003686 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003680:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6013      	str	r3, [r2, #0]
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200001a4 	.word	0x200001a4
 8003694:	200000c8 	.word	0x200000c8
 8003698:	200001a8 	.word	0x200001a8
 800369c:	2000018c 	.word	0x2000018c
 80036a0:	2000015c 	.word	0x2000015c
 80036a4:	20000158 	.word	0x20000158
 80036a8:	200001c0 	.word	0x200001c0

080036ac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80036b6:	f000 fad5 	bl	8003c64 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <xTimerCreateTimerTask+0x54>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <xTimerCreateTimerTask+0x58>)
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	2302      	movs	r3, #2
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2300      	movs	r3, #0
 80036cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036d0:	490d      	ldr	r1, [pc, #52]	; (8003708 <xTimerCreateTimerTask+0x5c>)
 80036d2:	480e      	ldr	r0, [pc, #56]	; (800370c <xTimerCreateTimerTask+0x60>)
 80036d4:	f7ff f84e 	bl	8002774 <xTaskCreate>
 80036d8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	603b      	str	r3, [r7, #0]
    }
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80036f6:	687b      	ldr	r3, [r7, #4]
    }
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200001fc 	.word	0x200001fc
 8003704:	20000200 	.word	0x20000200
 8003708:	08004614 	.word	0x08004614
 800370c:	08003845 	.word	0x08003845

08003710 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800371e:	2300      	movs	r3, #0
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	623b      	str	r3, [r7, #32]
    }
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <xTimerGenericCommand+0x98>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02a      	beq.n	800379c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b05      	cmp	r3, #5
 8003756:	dc18      	bgt.n	800378a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003758:	f7ff fd92 	bl	8003280 <xTaskGetSchedulerState>
 800375c:	4603      	mov	r3, r0
 800375e:	2b02      	cmp	r3, #2
 8003760:	d109      	bne.n	8003776 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <xTimerGenericCommand+0x98>)
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f107 0114 	add.w	r1, r7, #20
 800376a:	2300      	movs	r3, #0
 800376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376e:	f7fe fae7 	bl	8001d40 <xQueueGenericSend>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24
 8003774:	e012      	b.n	800379c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <xTimerGenericCommand+0x98>)
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	f107 0114 	add.w	r1, r7, #20
 800377e:	2300      	movs	r3, #0
 8003780:	2200      	movs	r2, #0
 8003782:	f7fe fadd 	bl	8001d40 <xQueueGenericSend>
 8003786:	6278      	str	r0, [r7, #36]	; 0x24
 8003788:	e008      	b.n	800379c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <xTimerGenericCommand+0x98>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	f107 0114 	add.w	r1, r7, #20
 8003792:	2300      	movs	r3, #0
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	f7fe fbd1 	bl	8001f3c <xQueueGenericSendFromISR>
 800379a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800379e:	4618      	mov	r0, r3
 80037a0:	3728      	adds	r7, #40	; 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200001fc 	.word	0x200001fc

080037ac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <prvProcessExpiredTimer+0x94>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe f9a7 	bl	8001b18 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d022      	beq.n	800381e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	18d1      	adds	r1, r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	6978      	ldr	r0, [r7, #20]
 80037e6:	f000 f8d1 	bl	800398c <prvInsertTimerInActiveList>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01f      	beq.n	8003830 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037f0:	2300      	movs	r3, #0
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	2300      	movs	r3, #0
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	2100      	movs	r1, #0
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff88 	bl	8003710 <xTimerGenericCommand>
 8003800:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d113      	bne.n	8003830 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
    }
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	b2da      	uxtb	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	4798      	blx	r3
    }
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200001f4 	.word	0x200001f4

08003844 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f857 	bl	8003904 <prvGetNextExpireTime>
 8003856:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4619      	mov	r1, r3
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f803 	bl	8003868 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003862:	f000 f8d5 	bl	8003a10 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003866:	e7f1      	b.n	800384c <prvTimerTask+0x8>

08003868 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003872:	f7ff f94b 	bl	8002b0c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003876:	f107 0308 	add.w	r3, r7, #8
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f866 	bl	800394c <prvSampleTimeNow>
 8003880:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d130      	bne.n	80038ea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <prvProcessTimerOrBlockTask+0x3c>
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	429a      	cmp	r2, r3
 8003894:	d806      	bhi.n	80038a4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003896:	f7ff f947 	bl	8002b28 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800389a:	68f9      	ldr	r1, [r7, #12]
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff85 	bl	80037ac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80038a2:	e024      	b.n	80038ee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <prvProcessTimerOrBlockTask+0x90>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <prvProcessTimerOrBlockTask+0x50>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <prvProcessTimerOrBlockTask+0x52>
 80038b8:	2300      	movs	r3, #0
 80038ba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <prvProcessTimerOrBlockTask+0x94>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f7fe ff1f 	bl	800270c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80038ce:	f7ff f92b 	bl	8002b28 <xTaskResumeAll>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <prvProcessTimerOrBlockTask+0x98>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
    }
 80038e8:	e001      	b.n	80038ee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80038ea:	f7ff f91d 	bl	8002b28 <xTaskResumeAll>
    }
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200001f8 	.word	0x200001f8
 80038fc:	200001fc 	.word	0x200001fc
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <prvGetNextExpireTime+0x44>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <prvGetNextExpireTime+0x16>
 8003916:	2201      	movs	r2, #1
 8003918:	e000      	b.n	800391c <prvGetNextExpireTime+0x18>
 800391a:	2200      	movs	r2, #0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <prvGetNextExpireTime+0x44>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e001      	b.n	8003938 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003938:	68fb      	ldr	r3, [r7, #12]
    }
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	200001f4 	.word	0x200001f4

0800394c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003954:	f7ff f984 	bl	8002c60 <xTaskGetTickCount>
 8003958:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <prvSampleTimeNow+0x3c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d205      	bcs.n	8003970 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003964:	f000 f91a 	bl	8003b9c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e002      	b.n	8003976 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <prvSampleTimeNow+0x3c>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800397c:	68fb      	ldr	r3, [r7, #12]
    }
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000204 	.word	0x20000204

0800398c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d812      	bhi.n	80039d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	1ad2      	subs	r2, r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e01b      	b.n	80039fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <prvInsertTimerInActiveList+0x7c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f7fe f868 	bl	8001aa6 <vListInsert>
 80039d6:	e012      	b.n	80039fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d206      	bcs.n	80039ee <prvInsertTimerInActiveList+0x62>
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e007      	b.n	80039fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <prvInsertTimerInActiveList+0x80>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3304      	adds	r3, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f7fe f854 	bl	8001aa6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80039fe:	697b      	ldr	r3, [r7, #20]
    }
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	200001f8 	.word	0x200001f8
 8003a0c:	200001f4 	.word	0x200001f4

08003a10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08c      	sub	sp, #48	; 0x30
 8003a14:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a16:	e0ae      	b.n	8003b76 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f2c0 80aa 	blt.w	8003b74 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe f871 	bl	8001b18 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ff87 	bl	800394c <prvSampleTimeNow>
 8003a3e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	f200 8097 	bhi.w	8003b76 <prvProcessReceivedCommands+0x166>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <prvProcessReceivedCommands+0x40>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003a79 	.word	0x08003a79
 8003a5c:	08003aed 	.word	0x08003aed
 8003a60:	08003b01 	.word	0x08003b01
 8003a64:	08003b4b 	.word	0x08003b4b
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a79 	.word	0x08003a79
 8003a70:	08003aed 	.word	0x08003aed
 8003a74:	08003b01 	.word	0x08003b01
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	18d1      	adds	r1, r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a98:	f7ff ff78 	bl	800398c <prvInsertTimerInActiveList>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d069      	beq.n	8003b76 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aa8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05e      	beq.n	8003b76 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	441a      	add	r2, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aca:	f7ff fe21 	bl	8003710 <xTimerGenericCommand>
 8003ace:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d14f      	bne.n	8003b76 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	61bb      	str	r3, [r7, #24]
    }
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003afe:	e03a      	b.n	8003b76 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	617b      	str	r3, [r7, #20]
    }
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	18d1      	adds	r1, r2, r3
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	6a3a      	ldr	r2, [r7, #32]
 8003b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b44:	f7ff ff22 	bl	800398c <prvInsertTimerInActiveList>
                        break;
 8003b48:	e015      	b.n	8003b76 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d103      	bne.n	8003b60 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b5a:	f000 fbe7 	bl	800432c <vPortFree>
 8003b5e:	e00a      	b.n	8003b76 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003b72:	e000      	b.n	8003b76 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003b74:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <prvProcessReceivedCommands+0x188>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f107 0108 	add.w	r1, r7, #8
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fa85 	bl	8002090 <xQueueReceive>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f47f af45 	bne.w	8003a18 <prvProcessReceivedCommands+0x8>
        }
    }
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	3728      	adds	r7, #40	; 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200001fc 	.word	0x200001fc

08003b9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ba2:	e048      	b.n	8003c36 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <prvSwitchTimerLists+0xc0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bae:	4b2b      	ldr	r3, [pc, #172]	; (8003c5c <prvSwitchTimerLists+0xc0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd ffab 	bl	8001b18 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02e      	beq.n	8003c36 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d90e      	bls.n	8003c08 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <prvSwitchTimerLists+0xc0>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f7fd ff50 	bl	8001aa6 <vListInsert>
 8003c06:	e016      	b.n	8003c36 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	2100      	movs	r1, #0
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fd7c 	bl	8003710 <xTimerGenericCommand>
 8003c18:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	603b      	str	r3, [r7, #0]
    }
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <prvSwitchTimerLists+0xc0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1b1      	bne.n	8003ba4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <prvSwitchTimerLists+0xc0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <prvSwitchTimerLists+0xc4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <prvSwitchTimerLists+0xc0>)
 8003c4c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <prvSwitchTimerLists+0xc4>)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	6013      	str	r3, [r2, #0]
    }
 8003c54:	bf00      	nop
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200001f4 	.word	0x200001f4
 8003c60:	200001f8 	.word	0x200001f8

08003c64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c68:	f000 f95e 	bl	8003f28 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <prvCheckForValidListAndQueue+0x54>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11d      	bne.n	8003cb0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c74:	4811      	ldr	r0, [pc, #68]	; (8003cbc <prvCheckForValidListAndQueue+0x58>)
 8003c76:	f7fd fec5 	bl	8001a04 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c7a:	4811      	ldr	r0, [pc, #68]	; (8003cc0 <prvCheckForValidListAndQueue+0x5c>)
 8003c7c:	f7fd fec2 	bl	8001a04 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <prvCheckForValidListAndQueue+0x60>)
 8003c82:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <prvCheckForValidListAndQueue+0x58>)
 8003c84:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <prvCheckForValidListAndQueue+0x64>)
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <prvCheckForValidListAndQueue+0x5c>)
 8003c8a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	210c      	movs	r1, #12
 8003c90:	200a      	movs	r0, #10
 8003c92:	f7fd ffd3 	bl	8001c3c <xQueueGenericCreate>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <prvCheckForValidListAndQueue+0x54>)
 8003c9a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <prvCheckForValidListAndQueue+0x54>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <prvCheckForValidListAndQueue+0x54>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4908      	ldr	r1, [pc, #32]	; (8003ccc <prvCheckForValidListAndQueue+0x68>)
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fd04 	bl	80026b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cb0:	f000 f96a 	bl	8003f88 <vPortExitCritical>
    }
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	200001fc 	.word	0x200001fc
 8003cbc:	200001cc 	.word	0x200001cc
 8003cc0:	200001e0 	.word	0x200001e0
 8003cc4:	200001f4 	.word	0x200001f4
 8003cc8:	200001f8 	.word	0x200001f8
 8003ccc:	0800461c 	.word	0x0800461c

08003cd0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3b04      	subs	r3, #4
 8003ce0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ce8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b04      	subs	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f023 0201 	bic.w	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b04      	subs	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d00:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <pxPortInitialiseStack+0x64>)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3b14      	subs	r3, #20
 8003d0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3b04      	subs	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f06f 0202 	mvn.w	r2, #2
 8003d1e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3b20      	subs	r3, #32
 8003d24:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	08003d39 	.word	0x08003d39

08003d38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <prvTaskExitError+0x54>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d00a      	beq.n	8003d62 <prvTaskExitError+0x2a>
        __asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	60fb      	str	r3, [r7, #12]
    }
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <prvTaskExitError+0x28>
        __asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60bb      	str	r3, [r7, #8]
    }
 8003d74:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d76:	bf00      	nop
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0fc      	beq.n	8003d78 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d7e:	bf00      	nop
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	20000010 	.word	0x20000010

08003d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <pxCurrentTCBConst2>)
 8003d92:	6819      	ldr	r1, [r3, #0]
 8003d94:	6808      	ldr	r0, [r1, #0]
 8003d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	f380 8809 	msr	PSP, r0
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f380 8811 	msr	BASEPRI, r0
 8003daa:	4770      	bx	lr
 8003dac:	f3af 8000 	nop.w

08003db0 <pxCurrentTCBConst2>:
 8003db0:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop

08003db8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003db8:	4808      	ldr	r0, [pc, #32]	; (8003ddc <prvPortStartFirstTask+0x24>)
 8003dba:	6800      	ldr	r0, [r0, #0]
 8003dbc:	6800      	ldr	r0, [r0, #0]
 8003dbe:	f380 8808 	msr	MSP, r0
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f380 8814 	msr	CONTROL, r0
 8003dca:	b662      	cpsie	i
 8003dcc:	b661      	cpsie	f
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	df00      	svc	0
 8003dd8:	bf00      	nop
 8003dda:	0000      	.short	0x0000
 8003ddc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop

08003de4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dea:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <xPortStartScheduler+0x120>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a46      	ldr	r2, [pc, #280]	; (8003f08 <xPortStartScheduler+0x124>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d10a      	bne.n	8003e0a <xPortStartScheduler+0x26>
        __asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	613b      	str	r3, [r7, #16]
    }
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <xPortStartScheduler+0x120>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a3f      	ldr	r2, [pc, #252]	; (8003f0c <xPortStartScheduler+0x128>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10a      	bne.n	8003e2a <xPortStartScheduler+0x46>
        __asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	60fb      	str	r3, [r7, #12]
    }
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e2a:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <xPortStartScheduler+0x12c>)
 8003e2c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	22ff      	movs	r2, #255	; 0xff
 8003e3a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b31      	ldr	r3, [pc, #196]	; (8003f14 <xPortStartScheduler+0x130>)
 8003e50:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e52:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <xPortStartScheduler+0x134>)
 8003e54:	2207      	movs	r2, #7
 8003e56:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e58:	e009      	b.n	8003e6e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003e5a:	4b2f      	ldr	r3, [pc, #188]	; (8003f18 <xPortStartScheduler+0x134>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	4a2d      	ldr	r2, [pc, #180]	; (8003f18 <xPortStartScheduler+0x134>)
 8003e62:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b80      	cmp	r3, #128	; 0x80
 8003e78:	d0ef      	beq.n	8003e5a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e7a:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <xPortStartScheduler+0x134>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f1c3 0307 	rsb	r3, r3, #7
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d00a      	beq.n	8003e9c <xPortStartScheduler+0xb8>
        __asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	60bb      	str	r3, [r7, #8]
    }
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e9c:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <xPortStartScheduler+0x134>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <xPortStartScheduler+0x134>)
 8003ea4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <xPortStartScheduler+0x134>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eae:	4a1a      	ldr	r2, [pc, #104]	; (8003f18 <xPortStartScheduler+0x134>)
 8003eb0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003eba:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <xPortStartScheduler+0x138>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a17      	ldr	r2, [pc, #92]	; (8003f1c <xPortStartScheduler+0x138>)
 8003ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ec4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <xPortStartScheduler+0x138>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <xPortStartScheduler+0x138>)
 8003ecc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ed0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ed2:	f000 f8db 	bl	800408c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ed6:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <xPortStartScheduler+0x13c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003edc:	f000 f8fa 	bl	80040d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ee0:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <xPortStartScheduler+0x140>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a0f      	ldr	r2, [pc, #60]	; (8003f24 <xPortStartScheduler+0x140>)
 8003ee6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003eea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003eec:	f7ff ff64 	bl	8003db8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ef0:	f7fe ff7e 	bl	8002df0 <vTaskSwitchContext>
    prvTaskExitError();
 8003ef4:	f7ff ff20 	bl	8003d38 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000ed00 	.word	0xe000ed00
 8003f08:	410fc271 	.word	0x410fc271
 8003f0c:	410fc270 	.word	0x410fc270
 8003f10:	e000e400 	.word	0xe000e400
 8003f14:	20000208 	.word	0x20000208
 8003f18:	2000020c 	.word	0x2000020c
 8003f1c:	e000ed20 	.word	0xe000ed20
 8003f20:	20000010 	.word	0x20000010
 8003f24:	e000ef34 	.word	0xe000ef34

08003f28 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	607b      	str	r3, [r7, #4]
    }
 8003f40:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f42:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <vPortEnterCritical+0x58>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3301      	adds	r3, #1
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <vPortEnterCritical+0x58>)
 8003f4a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <vPortEnterCritical+0x58>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10f      	bne.n	8003f74 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <vPortEnterCritical+0x5c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <vPortEnterCritical+0x4c>
        __asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	603b      	str	r3, [r7, #0]
    }
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <vPortEnterCritical+0x4a>
    }
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000010 	.word	0x20000010
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <vPortExitCritical+0x50>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <vPortExitCritical+0x24>
        __asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	607b      	str	r3, [r7, #4]
    }
 8003fa8:	bf00      	nop
 8003faa:	e7fe      	b.n	8003faa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <vPortExitCritical+0x50>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <vPortExitCritical+0x50>)
 8003fb4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <vPortExitCritical+0x50>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d105      	bne.n	8003fca <vPortExitCritical+0x42>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f383 8811 	msr	BASEPRI, r3
    }
 8003fc8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000010 	.word	0x20000010
 8003fdc:	00000000 	.word	0x00000000

08003fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003fe0:	f3ef 8009 	mrs	r0, PSP
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <pxCurrentTCBConst>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	f01e 0f10 	tst.w	lr, #16
 8003ff0:	bf08      	it	eq
 8003ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffa:	6010      	str	r0, [r2, #0]
 8003ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004004:	f380 8811 	msr	BASEPRI, r0
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f7fe feee 	bl	8002df0 <vTaskSwitchContext>
 8004014:	f04f 0000 	mov.w	r0, #0
 8004018:	f380 8811 	msr	BASEPRI, r0
 800401c:	bc09      	pop	{r0, r3}
 800401e:	6819      	ldr	r1, [r3, #0]
 8004020:	6808      	ldr	r0, [r1, #0]
 8004022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004026:	f01e 0f10 	tst.w	lr, #16
 800402a:	bf08      	it	eq
 800402c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004030:	f380 8809 	msr	PSP, r0
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	f3af 8000 	nop.w

08004040 <pxCurrentTCBConst>:
 8004040:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop

08004048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
        __asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	607b      	str	r3, [r7, #4]
    }
 8004060:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004062:	f7fe fe0d 	bl	8002c80 <xTaskIncrementTick>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <SysTick_Handler+0x40>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f383 8811 	msr	BASEPRI, r3
    }
 800407e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <vPortSetupTimerInterrupt+0x34>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <vPortSetupTimerInterrupt+0x38>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <vPortSetupTimerInterrupt+0x3c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <vPortSetupTimerInterrupt+0x40>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <vPortSetupTimerInterrupt+0x44>)
 80040aa:	3b01      	subs	r3, #1
 80040ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <vPortSetupTimerInterrupt+0x34>)
 80040b0:	2207      	movs	r2, #7
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	e000e010 	.word	0xe000e010
 80040c4:	e000e018 	.word	0xe000e018
 80040c8:	20000000 	.word	0x20000000
 80040cc:	10624dd3 	.word	0x10624dd3
 80040d0:	e000e014 	.word	0xe000e014

080040d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80040d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040e4 <vPortEnableVFP+0x10>
 80040d8:	6801      	ldr	r1, [r0, #0]
 80040da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040de:	6001      	str	r1, [r0, #0]
 80040e0:	4770      	bx	lr
 80040e2:	0000      	.short	0x0000
 80040e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop

080040ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80040f2:	f3ef 8305 	mrs	r3, IPSR
 80040f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	d914      	bls.n	8004128 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <vPortValidateInterruptPriority+0x70>)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004108:	4b15      	ldr	r3, [pc, #84]	; (8004160 <vPortValidateInterruptPriority+0x74>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	7afa      	ldrb	r2, [r7, #11]
 800410e:	429a      	cmp	r2, r3
 8004110:	d20a      	bcs.n	8004128 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	607b      	str	r3, [r7, #4]
    }
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <vPortValidateInterruptPriority+0x78>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <vPortValidateInterruptPriority+0x7c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d90a      	bls.n	800414e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	603b      	str	r3, [r7, #0]
    }
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <vPortValidateInterruptPriority+0x60>
    }
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000e3f0 	.word	0xe000e3f0
 8004160:	20000208 	.word	0x20000208
 8004164:	e000ed0c 	.word	0xe000ed0c
 8004168:	2000020c 	.word	0x2000020c

0800416c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	; 0x28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004178:	f7fe fcc8 	bl	8002b0c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800417c:	4b65      	ldr	r3, [pc, #404]	; (8004314 <pvPortMalloc+0x1a8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004184:	f000 f934 	bl	80043f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004188:	4b63      	ldr	r3, [pc, #396]	; (8004318 <pvPortMalloc+0x1ac>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 80a7 	bne.w	80042e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02d      	beq.n	80041f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800419c:	2208      	movs	r2, #8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d227      	bcs.n	80041f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80041a8:	2208      	movs	r2, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d021      	beq.n	80041fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f023 0307 	bic.w	r3, r3, #7
 80041c0:	3308      	adds	r3, #8
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d214      	bcs.n	80041f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	3308      	adds	r3, #8
 80041d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <pvPortMalloc+0x92>
        __asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	617b      	str	r3, [r7, #20]
    }
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041f6:	e002      	b.n	80041fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	e000      	b.n	8004200 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d06e      	beq.n	80042e4 <pvPortMalloc+0x178>
 8004206:	4b45      	ldr	r3, [pc, #276]	; (800431c <pvPortMalloc+0x1b0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d869      	bhi.n	80042e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004210:	4b43      	ldr	r3, [pc, #268]	; (8004320 <pvPortMalloc+0x1b4>)
 8004212:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004214:	4b42      	ldr	r3, [pc, #264]	; (8004320 <pvPortMalloc+0x1b4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800421a:	e004      	b.n	8004226 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d903      	bls.n	8004238 <pvPortMalloc+0xcc>
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f1      	bne.n	800421c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004238:	4b36      	ldr	r3, [pc, #216]	; (8004314 <pvPortMalloc+0x1a8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	429a      	cmp	r2, r3
 8004240:	d050      	beq.n	80042e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2208      	movs	r2, #8
 8004248:	4413      	add	r3, r2
 800424a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	2308      	movs	r3, #8
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	429a      	cmp	r2, r3
 8004262:	d91f      	bls.n	80042a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <pvPortMalloc+0x120>
        __asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	613b      	str	r3, [r7, #16]
    }
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800429e:	69b8      	ldr	r0, [r7, #24]
 80042a0:	f000 f908 	bl	80044b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042a4:	4b1d      	ldr	r3, [pc, #116]	; (800431c <pvPortMalloc+0x1b0>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	4a1b      	ldr	r2, [pc, #108]	; (800431c <pvPortMalloc+0x1b0>)
 80042b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042b2:	4b1a      	ldr	r3, [pc, #104]	; (800431c <pvPortMalloc+0x1b0>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <pvPortMalloc+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d203      	bcs.n	80042c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <pvPortMalloc+0x1b0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a18      	ldr	r2, [pc, #96]	; (8004324 <pvPortMalloc+0x1b8>)
 80042c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <pvPortMalloc+0x1ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <pvPortMalloc+0x1bc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	4a11      	ldr	r2, [pc, #68]	; (8004328 <pvPortMalloc+0x1bc>)
 80042e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80042e4:	f7fe fc20 	bl	8002b28 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <pvPortMalloc+0x19c>
        __asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60fb      	str	r3, [r7, #12]
    }
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <pvPortMalloc+0x19a>
    return pvReturn;
 8004308:	69fb      	ldr	r3, [r7, #28]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3728      	adds	r7, #40	; 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20012e18 	.word	0x20012e18
 8004318:	20012e2c 	.word	0x20012e2c
 800431c:	20012e1c 	.word	0x20012e1c
 8004320:	20012e10 	.word	0x20012e10
 8004324:	20012e20 	.word	0x20012e20
 8004328:	20012e24 	.word	0x20012e24

0800432c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d04d      	beq.n	80043da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800433e:	2308      	movs	r3, #8
 8004340:	425b      	negs	r3, r3
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4413      	add	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <vPortFree+0xb8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <vPortFree+0x44>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	60fb      	str	r3, [r7, #12]
    }
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <vPortFree+0x62>
        __asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	60bb      	str	r3, [r7, #8]
    }
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <vPortFree+0xb8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01e      	beq.n	80043da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d11a      	bne.n	80043da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <vPortFree+0xb8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	401a      	ands	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80043b4:	f7fe fbaa 	bl	8002b0c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <vPortFree+0xbc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4413      	add	r3, r2
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <vPortFree+0xbc>)
 80043c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043c6:	6938      	ldr	r0, [r7, #16]
 80043c8:	f000 f874 	bl	80044b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <vPortFree+0xc0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	4a06      	ldr	r2, [pc, #24]	; (80043ec <vPortFree+0xc0>)
 80043d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80043d6:	f7fe fba7 	bl	8002b28 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80043da:	bf00      	nop
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20012e2c 	.word	0x20012e2c
 80043e8:	20012e1c 	.word	0x20012e1c
 80043ec:	20012e28 	.word	0x20012e28

080043f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80043fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80043fc:	4b27      	ldr	r3, [pc, #156]	; (800449c <prvHeapInit+0xac>)
 80043fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00c      	beq.n	8004424 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3307      	adds	r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	4a1f      	ldr	r2, [pc, #124]	; (800449c <prvHeapInit+0xac>)
 8004420:	4413      	add	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004428:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <prvHeapInit+0xb0>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <prvHeapInit+0xb0>)
 8004430:	2200      	movs	r2, #0
 8004432:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4413      	add	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800443c:	2208      	movs	r2, #8
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <prvHeapInit+0xb4>)
 8004450:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <prvHeapInit+0xb4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <prvHeapInit+0xb4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	1ad2      	subs	r2, r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <prvHeapInit+0xb4>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <prvHeapInit+0xb8>)
 800447e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a09      	ldr	r2, [pc, #36]	; (80044ac <prvHeapInit+0xbc>)
 8004486:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <prvHeapInit+0xc0>)
 800448a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	20000210 	.word	0x20000210
 80044a0:	20012e10 	.word	0x20012e10
 80044a4:	20012e18 	.word	0x20012e18
 80044a8:	20012e20 	.word	0x20012e20
 80044ac:	20012e1c 	.word	0x20012e1c
 80044b0:	20012e2c 	.word	0x20012e2c

080044b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <prvInsertBlockIntoFreeList+0xac>)
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e002      	b.n	80044c8 <prvInsertBlockIntoFreeList+0x14>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d8f7      	bhi.n	80044c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	4413      	add	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d108      	bne.n	80044f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	441a      	add	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d118      	bne.n	800453c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <prvInsertBlockIntoFreeList+0xb0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d00d      	beq.n	8004532 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	441a      	add	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e008      	b.n	8004544 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <prvInsertBlockIntoFreeList+0xb0>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e003      	b.n	8004544 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	d002      	beq.n	8004552 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20012e10 	.word	0x20012e10
 8004564:	20012e18 	.word	0x20012e18

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4d0d      	ldr	r5, [pc, #52]	; (80045a0 <__libc_init_array+0x38>)
 800456c:	4c0d      	ldr	r4, [pc, #52]	; (80045a4 <__libc_init_array+0x3c>)
 800456e:	1b64      	subs	r4, r4, r5
 8004570:	10a4      	asrs	r4, r4, #2
 8004572:	2600      	movs	r6, #0
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	4d0b      	ldr	r5, [pc, #44]	; (80045a8 <__libc_init_array+0x40>)
 800457a:	4c0c      	ldr	r4, [pc, #48]	; (80045ac <__libc_init_array+0x44>)
 800457c:	f000 f82e 	bl	80045dc <_init>
 8004580:	1b64      	subs	r4, r4, r5
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	2600      	movs	r6, #0
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	08004644 	.word	0x08004644
 80045a4:	08004644 	.word	0x08004644
 80045a8:	08004644 	.word	0x08004644
 80045ac:	08004648 	.word	0x08004648

080045b0 <memcpy>:
 80045b0:	440a      	add	r2, r1
 80045b2:	4291      	cmp	r1, r2
 80045b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045b8:	d100      	bne.n	80045bc <memcpy+0xc>
 80045ba:	4770      	bx	lr
 80045bc:	b510      	push	{r4, lr}
 80045be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045c6:	4291      	cmp	r1, r2
 80045c8:	d1f9      	bne.n	80045be <memcpy+0xe>
 80045ca:	bd10      	pop	{r4, pc}

080045cc <memset>:
 80045cc:	4402      	add	r2, r0
 80045ce:	4603      	mov	r3, r0
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d100      	bne.n	80045d6 <memset+0xa>
 80045d4:	4770      	bx	lr
 80045d6:	f803 1b01 	strb.w	r1, [r3], #1
 80045da:	e7f9      	b.n	80045d0 <memset+0x4>

080045dc <_init>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

080045e8 <_fini>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr
