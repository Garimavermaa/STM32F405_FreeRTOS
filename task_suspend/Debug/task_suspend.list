
task_suspend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c4  080043c4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043cc  080043cc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080043d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e1c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e30  20012e30  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1a9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002334  00000000  00000000  0002e1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00030528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d18  00000000  00000000  00031348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f514  00000000  00000000  00032060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0e5  00000000  00000000  00051574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4fd2  00000000  00000000  00060659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012562b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a88  00000000  00000000  0012567c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800436c 	.word	0x0800436c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800436c 	.word	0x0800436c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ledconfig>:

TaskHandle_t task1_handle;
TaskHandle_t task2_handle;

void ledconfig()
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<1);
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <ledconfig+0x34>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <ledconfig+0x34>)
 80004de:	f043 0302 	orr.w	r3, r3, #2
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER |= (1<<28)|(1<<30);
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <ledconfig+0x38>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a08      	ldr	r2, [pc, #32]	; (800050c <ledconfig+0x38>)
 80004ea:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80004ee:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= (1<<14)|(1<<15);
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <ledconfig+0x38>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <ledconfig+0x38>)
 80004f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004fa:	6153      	str	r3, [r2, #20]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40023800 	.word	0x40023800
 800050c:	40020400 	.word	0x40020400

08000510 <task1>:

void task1()	//low priority
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

	while(1)
	{
		task1_count++;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <task1+0x70>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <task1+0x70>)
 8000520:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR ^= (1<<14);
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <task1+0x74>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <task1+0x74>)
 8000528:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800052c:	6153      	str	r3, [r2, #20]

		if(task1_count==10)
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <task1+0x70>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b0a      	cmp	r3, #10
 8000534:	d104      	bne.n	8000540 <task1+0x30>
			vTaskSuspend(task2_handle);	// suspend task 2
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <task1+0x78>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f002 f944 	bl	80027c8 <vTaskSuspend>
		if(task1_count == 20)
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <task1+0x70>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b14      	cmp	r3, #20
 8000546:	d104      	bne.n	8000552 <task1+0x42>
			vTaskResume(task2_handle);	// resume task 2
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <task1+0x78>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f002 fa0d 	bl	800296c <vTaskResume>
		if(task1_count == 30)
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <task1+0x70>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b1e      	cmp	r3, #30
 8000558:	d102      	bne.n	8000560 <task1+0x50>
			vTaskSuspend(NULL);			// suspend current task (task 1)
 800055a:	2000      	movs	r0, #0
 800055c:	f002 f934 	bl	80027c8 <vTaskSuspend>
		for(uint32_t x=0;x<200000;x++);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	e002      	b.n	800056c <task1+0x5c>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3301      	adds	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a07      	ldr	r2, [pc, #28]	; (800058c <task1+0x7c>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d9f8      	bls.n	8000566 <task1+0x56>
		vTaskDelay(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f002 f8f2 	bl	8002760 <vTaskDelay>
		task1_count++;
 800057c:	e7cb      	b.n	8000516 <task1+0x6>
 800057e:	bf00      	nop
 8000580:	20000030 	.word	0x20000030
 8000584:	40020400 	.word	0x40020400
 8000588:	20000038 	.word	0x20000038
 800058c:	00030d3f 	.word	0x00030d3f

08000590 <task2>:
	}
}
void task2()	// high priority
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

	while(1)
	{
		task2_count++;
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <task2+0x3c>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <task2+0x3c>)
 80005a0:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR ^= (1<<15);
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <task2+0x40>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <task2+0x40>)
 80005a8:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80005ac:	6153      	str	r3, [r2, #20]
		for(uint32_t a=0; a<200000;a++);
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	e002      	b.n	80005ba <task2+0x2a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <task2+0x44>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d9f8      	bls.n	80005b4 <task2+0x24>
		vTaskDelay(1000);
 80005c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c6:	f002 f8cb 	bl	8002760 <vTaskDelay>
		task2_count++;
 80005ca:	e7e4      	b.n	8000596 <task2+0x6>
 80005cc:	20000031 	.word	0x20000031
 80005d0:	40020400 	.word	0x40020400
 80005d4:	00030d3f 	.word	0x00030d3f

080005d8 <main>:
	}
}

int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 f99d 	bl	800091c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f825 	bl	8000630 <SystemClock_Config>

  /* Initialize all configured peripherals */
  ledconfig();
 80005e6:	f7ff ff75 	bl	80004d4 <ledconfig>
  xTaskCreate(task1,"task 1",200,NULL,1,&task1_handle);	//Task 1
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <main+0x40>)
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	22c8      	movs	r2, #200	; 0xc8
 80005f6:	4909      	ldr	r1, [pc, #36]	; (800061c <main+0x44>)
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x48>)
 80005fa:	f001 ff6b 	bl	80024d4 <xTaskCreate>
  xTaskCreate(task2,"task 2",200,NULL,3,&task2_handle);	//Task 2
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <main+0x4c>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2303      	movs	r3, #3
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	4907      	ldr	r1, [pc, #28]	; (8000628 <main+0x50>)
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0x54>)
 800060e:	f001 ff61 	bl	80024d4 <xTaskCreate>
  vTaskStartScheduler();
 8000612:	f002 fa09 	bl	8002a28 <vTaskStartScheduler>

  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0x3e>
 8000618:	20000034 	.word	0x20000034
 800061c:	08004384 	.word	0x08004384
 8000620:	08000511 	.word	0x08000511
 8000624:	20000038 	.word	0x20000038
 8000628:	0800438c 	.word	0x0800438c
 800062c:	08000591 	.word	0x08000591

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fe8c 	bl	800435c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xb4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xb4>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xb4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <SystemClock_Config+0xb8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <SystemClock_Config+0xb8>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <SystemClock_Config+0xb8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fa5f 	bl	8000b64 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006ac:	f000 f830 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fcc2 	bl	8001054 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006d6:	f000 f81b 	bl	8000710 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d101      	bne.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fe:	f000 f92f 	bl	8000960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40001000 	.word	0x40001000

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <HAL_MspInit+0x4c>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x4c>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	; 0x38
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4b33      	ldr	r3, [pc, #204]	; (8000850 <HAL_InitTick+0xe4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a32      	ldr	r2, [pc, #200]	; (8000850 <HAL_InitTick+0xe4>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <HAL_InitTick+0xe4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 0310 	and.w	r3, r3, #16
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000798:	f107 0210 	add.w	r2, r7, #16
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fe22 	bl	80013ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d103      	bne.n	80007ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007b2:	f000 fe07 	bl	80013c4 <HAL_RCC_GetPCLK1Freq>
 80007b6:	6378      	str	r0, [r7, #52]	; 0x34
 80007b8:	e004      	b.n	80007c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007ba:	f000 fe03 	bl	80013c4 <HAL_RCC_GetPCLK1Freq>
 80007be:	4603      	mov	r3, r0
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c6:	4a23      	ldr	r2, [pc, #140]	; (8000854 <HAL_InitTick+0xe8>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	0c9b      	lsrs	r3, r3, #18
 80007ce:	3b01      	subs	r3, #1
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <HAL_InitTick+0xec>)
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <HAL_InitTick+0xf0>)
 80007d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <HAL_InitTick+0xec>)
 80007da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007e0:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <HAL_InitTick+0xec>)
 80007e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_InitTick+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <HAL_InitTick+0xec>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <HAL_InitTick+0xec>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007f8:	4817      	ldr	r0, [pc, #92]	; (8000858 <HAL_InitTick+0xec>)
 80007fa:	f000 fe29 	bl	8001450 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000804:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000808:	2b00      	cmp	r3, #0
 800080a:	d11b      	bne.n	8000844 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800080c:	4812      	ldr	r0, [pc, #72]	; (8000858 <HAL_InitTick+0xec>)
 800080e:	f000 fe79 	bl	8001504 <HAL_TIM_Base_Start_IT>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800081c:	2b00      	cmp	r3, #0
 800081e:	d111      	bne.n	8000844 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000820:	2036      	movs	r0, #54	; 0x36
 8000822:	f000 f991 	bl	8000b48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d808      	bhi.n	800083e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2036      	movs	r0, #54	; 0x36
 8000832:	f000 f96d 	bl	8000b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_InitTick+0xf4>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	e002      	b.n	8000844 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000848:	4618      	mov	r0, r3
 800084a:	3738      	adds	r7, #56	; 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	431bde83 	.word	0x431bde83
 8000858:	2000003c 	.word	0x2000003c
 800085c:	40001000 	.word	0x40001000
 8000860:	20000004 	.word	0x20000004

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <TIM6_DAC_IRQHandler+0x10>)
 8000896:	f000 fea5 	bl	80015e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000003c 	.word	0x2000003c

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000900 <LoopFillZerobss+0x12>
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopFillZerobss+0x16>)
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <LoopFillZerobss+0x1a>)
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <LoopFillZerobss+0x1e>)
 80008d2:	2300      	movs	r3, #0
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:
 80008d6:	58d4      	ldr	r4, [r2, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:
 80008dc:	18c4      	adds	r4, r0, r3
 80008de:	428c      	cmp	r4, r1
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <LoopFillZerobss+0x22>)
 80008e4:	4c0b      	ldr	r4, [pc, #44]	; (8000914 <LoopFillZerobss+0x26>)
 80008e6:	2300      	movs	r3, #0
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:
 80008ee:	42a2      	cmp	r2, r4
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>
 80008f2:	f7ff ffd7 	bl	80008a4 <SystemInit>
 80008f6:	f003 fcff 	bl	80042f8 <__libc_init_array>
 80008fa:	f7ff fe6d 	bl	80005d8 <main>
 80008fe:	4770      	bx	lr
 8000900:	20020000 	.word	0x20020000
 8000904:	20000000 	.word	0x20000000
 8000908:	20000014 	.word	0x20000014
 800090c:	080043d4 	.word	0x080043d4
 8000910:	20000014 	.word	0x20000014
 8000914:	20012e30 	.word	0x20012e30

08000918 <ADC_IRQHandler>:
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>
	...

0800091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <HAL_Init+0x40>)
 8000926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_Init+0x40>)
 8000932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x40>)
 800093e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f8d8 	bl	8000afa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	200f      	movs	r0, #15
 800094c:	f7ff ff0e 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff fee4 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023c00 	.word	0x40023c00

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x20>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_IncTick+0x24>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_IncTick+0x24>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008
 8000984:	20000084 	.word	0x20000084

08000988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_GetTick+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000084 	.word	0x20000084

080009a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4907      	ldr	r1, [pc, #28]	; (8000a3c <__NVIC_EnableIRQ+0x38>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	; 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ff4c 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b22:	f7ff ff61 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	6978      	ldr	r0, [r7, #20]
 8000b2e:	f7ff ffb1 	bl	8000a94 <NVIC_EncodePriority>
 8000b32:	4602      	mov	r2, r0
 8000b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff80 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff54 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e267      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d075      	beq.n	8000c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b82:	4b88      	ldr	r3, [pc, #544]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 030c 	and.w	r3, r3, #12
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d00c      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b8e:	4b85      	ldr	r3, [pc, #532]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d112      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b9a:	4b82      	ldr	r3, [pc, #520]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba8:	4b7e      	ldr	r3, [pc, #504]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d05b      	beq.n	8000c6c <HAL_RCC_OscConfig+0x108>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d157      	bne.n	8000c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e242      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d106      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x74>
 8000bca:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a75      	ldr	r2, [pc, #468]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e01d      	b.n	8000c14 <HAL_RCC_OscConfig+0xb0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be0:	d10c      	bne.n	8000bfc <HAL_RCC_OscConfig+0x98>
 8000be2:	4b70      	ldr	r3, [pc, #448]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a6f      	ldr	r2, [pc, #444]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b6d      	ldr	r3, [pc, #436]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a6c      	ldr	r2, [pc, #432]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e00b      	b.n	8000c14 <HAL_RCC_OscConfig+0xb0>
 8000bfc:	4b69      	ldr	r3, [pc, #420]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a68      	ldr	r2, [pc, #416]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a65      	ldr	r2, [pc, #404]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d013      	beq.n	8000c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1c:	f7ff feb4 	bl	8000988 <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff feb0 	bl	8000988 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b64      	cmp	r3, #100	; 0x64
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e207      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	4b5b      	ldr	r3, [pc, #364]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0xc0>
 8000c42:	e014      	b.n	8000c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fea0 	bl	8000988 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fe9c 	bl	8000988 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	; 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e1f3      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <HAL_RCC_OscConfig+0xe8>
 8000c6a:	e000      	b.n	8000c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d063      	beq.n	8000d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c7a:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c86:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d11c      	bne.n	8000ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c92:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d116      	bne.n	8000ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9e:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x152>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d001      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e1c7      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4937      	ldr	r1, [pc, #220]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cca:	e03a      	b.n	8000d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d020      	beq.n	8000d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd4:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <HAL_RCC_OscConfig+0x244>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cda:	f7ff fe55 	bl	8000988 <HAL_GetTick>
 8000cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce0:	e008      	b.n	8000cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fe51 	bl	8000988 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e1a8      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f0      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	4925      	ldr	r1, [pc, #148]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
 8000d14:	e015      	b.n	8000d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d16:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <HAL_RCC_OscConfig+0x244>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fe34 	bl	8000988 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d24:	f7ff fe30 	bl	8000988 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e187      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d036      	beq.n	8000dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d016      	beq.n	8000d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_RCC_OscConfig+0x248>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fe14 	bl	8000988 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d64:	f7ff fe10 	bl	8000988 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e167      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_RCC_OscConfig+0x240>)
 8000d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0x200>
 8000d82:	e01b      	b.n	8000dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_RCC_OscConfig+0x248>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fdfd 	bl	8000988 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d90:	e00e      	b.n	8000db0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d92:	f7ff fdf9 	bl	8000988 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d907      	bls.n	8000db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e150      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
 8000da4:	40023800 	.word	0x40023800
 8000da8:	42470000 	.word	0x42470000
 8000dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db0:	4b88      	ldr	r3, [pc, #544]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1ea      	bne.n	8000d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 8097 	beq.w	8000ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dce:	4b81      	ldr	r3, [pc, #516]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10f      	bne.n	8000dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b7d      	ldr	r3, [pc, #500]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a7c      	ldr	r2, [pc, #496]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b7a      	ldr	r3, [pc, #488]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000df6:	2301      	movs	r3, #1
 8000df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfa:	4b77      	ldr	r3, [pc, #476]	; (8000fd8 <HAL_RCC_OscConfig+0x474>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d118      	bne.n	8000e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e06:	4b74      	ldr	r3, [pc, #464]	; (8000fd8 <HAL_RCC_OscConfig+0x474>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a73      	ldr	r2, [pc, #460]	; (8000fd8 <HAL_RCC_OscConfig+0x474>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e12:	f7ff fdb9 	bl	8000988 <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e1a:	f7ff fdb5 	bl	8000988 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e10c      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2c:	4b6a      	ldr	r3, [pc, #424]	; (8000fd8 <HAL_RCC_OscConfig+0x474>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f0      	beq.n	8000e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <HAL_RCC_OscConfig+0x2ea>
 8000e40:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e44:	4a63      	ldr	r2, [pc, #396]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e4c:	e01c      	b.n	8000e88 <HAL_RCC_OscConfig+0x324>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x30c>
 8000e56:	4b5f      	ldr	r3, [pc, #380]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5a:	4a5e      	ldr	r2, [pc, #376]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6713      	str	r3, [r2, #112]	; 0x70
 8000e62:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e66:	4a5b      	ldr	r2, [pc, #364]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e6e:	e00b      	b.n	8000e88 <HAL_RCC_OscConfig+0x324>
 8000e70:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e76:	f023 0301 	bic.w	r3, r3, #1
 8000e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7c:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e80:	4a54      	ldr	r2, [pc, #336]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000e82:	f023 0304 	bic.w	r3, r3, #4
 8000e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d015      	beq.n	8000ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e90:	f7ff fd7a 	bl	8000988 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e96:	e00a      	b.n	8000eae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e98:	f7ff fd76 	bl	8000988 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e0cb      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eae:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0ee      	beq.n	8000e98 <HAL_RCC_OscConfig+0x334>
 8000eba:	e014      	b.n	8000ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fd64 	bl	8000988 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec2:	e00a      	b.n	8000eda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fd60 	bl	8000988 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e0b5      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eda:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1ee      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d105      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a38      	ldr	r2, [pc, #224]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80a1 	beq.w	8001044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d05c      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d141      	bne.n	8000f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_RCC_OscConfig+0x478>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fd34 	bl	8000988 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f24:	f7ff fd30 	bl	8000988 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e087      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69da      	ldr	r2, [r3, #28]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	041b      	lsls	r3, r3, #16
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	061b      	lsls	r3, r3, #24
 8000f66:	491b      	ldr	r1, [pc, #108]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_RCC_OscConfig+0x478>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff fd09 	bl	8000988 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7a:	f7ff fd05 	bl	8000988 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e05c      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x416>
 8000f98:	e054      	b.n	8001044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_RCC_OscConfig+0x478>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fcf2 	bl	8000988 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa8:	f7ff fcee 	bl	8000988 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e045      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_RCC_OscConfig+0x470>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f0      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x444>
 8000fc6:	e03d      	b.n	8001044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d107      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e038      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000
 8000fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_RCC_OscConfig+0x4ec>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d028      	beq.n	8001040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d121      	bne.n	8001040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001006:	429a      	cmp	r2, r3
 8001008:	d11a      	bne.n	8001040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001010:	4013      	ands	r3, r2
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001018:	4293      	cmp	r3, r2
 800101a:	d111      	bne.n	8001040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	3b01      	subs	r3, #1
 800102a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800102c:	429a      	cmp	r2, r3
 800102e:	d107      	bne.n	8001040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800103c:	429a      	cmp	r2, r3
 800103e:	d001      	beq.n	8001044 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0cc      	b.n	8001202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d90c      	bls.n	8001090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001076:	4b65      	ldr	r3, [pc, #404]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107e:	4b63      	ldr	r3, [pc, #396]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d001      	beq.n	8001090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0b8      	b.n	8001202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d020      	beq.n	80010de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a8:	4b59      	ldr	r3, [pc, #356]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a58      	ldr	r2, [pc, #352]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c0:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a52      	ldr	r2, [pc, #328]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010cc:	4b50      	ldr	r3, [pc, #320]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	494d      	ldr	r1, [pc, #308]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d044      	beq.n	8001174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d107      	bne.n	8001102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d119      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e07f      	b.n	8001202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d003      	beq.n	8001112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110e:	2b03      	cmp	r3, #3
 8001110:	d107      	bne.n	8001122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e06f      	b.n	8001202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e067      	b.n	8001202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f023 0203 	bic.w	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4934      	ldr	r1, [pc, #208]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 8001140:	4313      	orrs	r3, r2
 8001142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001144:	f7ff fc20 	bl	8000988 <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114a:	e00a      	b.n	8001162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114c:	f7ff fc1c 	bl	8000988 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f241 3288 	movw	r2, #5000	; 0x1388
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e04f      	b.n	8001202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 020c 	and.w	r2, r3, #12
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	429a      	cmp	r2, r3
 8001172:	d1eb      	bne.n	800114c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d20c      	bcs.n	800119c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d001      	beq.n	800119c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e032      	b.n	8001202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d008      	beq.n	80011ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4916      	ldr	r1, [pc, #88]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	490e      	ldr	r1, [pc, #56]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011da:	f000 f821 	bl	8001220 <HAL_RCC_GetSysClockFreq>
 80011de:	4602      	mov	r2, r0
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	490a      	ldr	r1, [pc, #40]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	5ccb      	ldrb	r3, [r1, r3]
 80011ee:	fa22 f303 	lsr.w	r3, r2, r3
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_RCC_ClockConfig+0x1c8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fab6 	bl	800076c <HAL_InitTick>

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00
 8001210:	40023800 	.word	0x40023800
 8001214:	080043ac 	.word	0x080043ac
 8001218:	20000000 	.word	0x20000000
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001224:	b090      	sub	sp, #64	; 0x40
 8001226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001238:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b08      	cmp	r3, #8
 8001242:	d00d      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x40>
 8001244:	2b08      	cmp	r3, #8
 8001246:	f200 80a1 	bhi.w	800138c <HAL_RCC_GetSysClockFreq+0x16c>
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0x34>
 800124e:	2b04      	cmp	r3, #4
 8001250:	d003      	beq.n	800125a <HAL_RCC_GetSysClockFreq+0x3a>
 8001252:	e09b      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001254:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001258:	e09b      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800125a:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800125e:	e098      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800126a:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d028      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001276:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	099b      	lsrs	r3, r3, #6
 800127c:	2200      	movs	r2, #0
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	627a      	str	r2, [r7, #36]	; 0x24
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001288:	2100      	movs	r1, #0
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800128c:	fb03 f201 	mul.w	r2, r3, r1
 8001290:	2300      	movs	r3, #0
 8001292:	fb00 f303 	mul.w	r3, r0, r3
 8001296:	4413      	add	r3, r2
 8001298:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800129a:	fba0 1202 	umull	r1, r2, r0, r2
 800129e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012a0:	460a      	mov	r2, r1
 80012a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80012a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a6:	4413      	add	r3, r2
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	2200      	movs	r2, #0
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	61fa      	str	r2, [r7, #28]
 80012b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ba:	f7fe ff89 	bl	80001d0 <__aeabi_uldivmod>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4613      	mov	r3, r2
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012c6:	e053      	b.n	8001370 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	2200      	movs	r2, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	617a      	str	r2, [r7, #20]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80012da:	f04f 0b00 	mov.w	fp, #0
 80012de:	4652      	mov	r2, sl
 80012e0:	465b      	mov	r3, fp
 80012e2:	f04f 0000 	mov.w	r0, #0
 80012e6:	f04f 0100 	mov.w	r1, #0
 80012ea:	0159      	lsls	r1, r3, #5
 80012ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012f0:	0150      	lsls	r0, r2, #5
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	ebb2 080a 	subs.w	r8, r2, sl
 80012fa:	eb63 090b 	sbc.w	r9, r3, fp
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800130a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800130e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001312:	ebb2 0408 	subs.w	r4, r2, r8
 8001316:	eb63 0509 	sbc.w	r5, r3, r9
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	00eb      	lsls	r3, r5, #3
 8001324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001328:	00e2      	lsls	r2, r4, #3
 800132a:	4614      	mov	r4, r2
 800132c:	461d      	mov	r5, r3
 800132e:	eb14 030a 	adds.w	r3, r4, sl
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	eb45 030b 	adc.w	r3, r5, fp
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001346:	4629      	mov	r1, r5
 8001348:	028b      	lsls	r3, r1, #10
 800134a:	4621      	mov	r1, r4
 800134c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001350:	4621      	mov	r1, r4
 8001352:	028a      	lsls	r2, r1, #10
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135a:	2200      	movs	r2, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	60fa      	str	r2, [r7, #12]
 8001360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001364:	f7fe ff34 	bl	80001d0 <__aeabi_uldivmod>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4613      	mov	r3, r2
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	3301      	adds	r3, #1
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800138a:	e002      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800138e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001394:	4618      	mov	r0, r3
 8001396:	3740      	adds	r7, #64	; 0x40
 8001398:	46bd      	mov	sp, r7
 800139a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	00f42400 	.word	0x00f42400
 80013a8:	017d7840 	.word	0x017d7840

080013ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000000 	.word	0x20000000

080013c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013c8:	f7ff fff0 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	0a9b      	lsrs	r3, r3, #10
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	4903      	ldr	r1, [pc, #12]	; (80013e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013da:	5ccb      	ldrb	r3, [r1, r3]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	080043bc 	.word	0x080043bc

080013ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	220f      	movs	r2, #15
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_RCC_GetClockConfig+0x5c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_RCC_GetClockConfig+0x5c>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_RCC_GetClockConfig+0x5c>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RCC_GetClockConfig+0x5c>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_RCC_GetClockConfig+0x60>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0207 	and.w	r2, r3, #7
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	601a      	str	r2, [r3, #0]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e041      	b.n	80014e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f839 	bl	80014ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3304      	adds	r3, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f000 f9d8 	bl	8001844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d001      	beq.n	800151c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e04e      	b.n	80015ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d022      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x80>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001546:	d01d      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x80>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_TIM_Base_Start_IT+0xc8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d018      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x80>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d013      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x80>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00e      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x80>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d009      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x80>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_TIM_Base_Start_IT+0xd8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d004      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x80>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d111      	bne.n	80015a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b06      	cmp	r3, #6
 8001594:	d010      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0201 	orr.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015a6:	e007      	b.n	80015b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40010000 	.word	0x40010000
 80015cc:	40000400 	.word	0x40000400
 80015d0:	40000800 	.word	0x40000800
 80015d4:	40000c00 	.word	0x40000c00
 80015d8:	40010400 	.word	0x40010400
 80015dc:	40014000 	.word	0x40014000
 80015e0:	40001800 	.word	0x40001800

080015e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d122      	bne.n	8001640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b02      	cmp	r3, #2
 8001606:	d11b      	bne.n	8001640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f06f 0202 	mvn.w	r2, #2
 8001610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f8ee 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 800162c:	e005      	b.n	800163a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8e0 	bl	80017f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f8f1 	bl	800181c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b04      	cmp	r3, #4
 800164c:	d122      	bne.n	8001694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b04      	cmp	r3, #4
 800165a:	d11b      	bne.n	8001694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f06f 0204 	mvn.w	r2, #4
 8001664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2202      	movs	r2, #2
 800166a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f8c4 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 8001680:	e005      	b.n	800168e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f8b6 	bl	80017f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f8c7 	bl	800181c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d122      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d11b      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f06f 0208 	mvn.w	r2, #8
 80016b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2204      	movs	r2, #4
 80016be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f89a 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 80016d4:	e005      	b.n	80016e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f88c 	bl	80017f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f89d 	bl	800181c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d122      	bne.n	800173c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b10      	cmp	r3, #16
 8001702:	d11b      	bne.n	800173c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f06f 0210 	mvn.w	r2, #16
 800170c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2208      	movs	r2, #8
 8001712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f870 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 8001728:	e005      	b.n	8001736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f862 	bl	80017f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f873 	bl	800181c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10e      	bne.n	8001768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 0201 	mvn.w	r2, #1
 8001760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7fe ffc2 	bl	80006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001772:	2b80      	cmp	r3, #128	; 0x80
 8001774:	d10e      	bne.n	8001794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001780:	2b80      	cmp	r3, #128	; 0x80
 8001782:	d107      	bne.n	8001794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800178c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f902 	bl	8001998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	2b40      	cmp	r3, #64	; 0x40
 80017a0:	d10e      	bne.n	80017c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	2b40      	cmp	r3, #64	; 0x40
 80017ae:	d107      	bne.n	80017c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f838 	bl	8001830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f003 0320 	and.w	r3, r3, #32
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	d10e      	bne.n	80017ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d107      	bne.n	80017ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f06f 0220 	mvn.w	r2, #32
 80017e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f8cc 	bl	8001984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a40      	ldr	r2, [pc, #256]	; (8001958 <TIM_Base_SetConfig+0x114>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d013      	beq.n	8001884 <TIM_Base_SetConfig+0x40>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001862:	d00f      	beq.n	8001884 <TIM_Base_SetConfig+0x40>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3d      	ldr	r2, [pc, #244]	; (800195c <TIM_Base_SetConfig+0x118>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00b      	beq.n	8001884 <TIM_Base_SetConfig+0x40>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3c      	ldr	r2, [pc, #240]	; (8001960 <TIM_Base_SetConfig+0x11c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d007      	beq.n	8001884 <TIM_Base_SetConfig+0x40>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3b      	ldr	r2, [pc, #236]	; (8001964 <TIM_Base_SetConfig+0x120>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d003      	beq.n	8001884 <TIM_Base_SetConfig+0x40>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <TIM_Base_SetConfig+0x124>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d108      	bne.n	8001896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800188a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a2f      	ldr	r2, [pc, #188]	; (8001958 <TIM_Base_SetConfig+0x114>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d02b      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a4:	d027      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a2c      	ldr	r2, [pc, #176]	; (800195c <TIM_Base_SetConfig+0x118>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d023      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <TIM_Base_SetConfig+0x11c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d01f      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <TIM_Base_SetConfig+0x120>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01b      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a29      	ldr	r2, [pc, #164]	; (8001968 <TIM_Base_SetConfig+0x124>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d017      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <TIM_Base_SetConfig+0x128>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <TIM_Base_SetConfig+0x12c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00f      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <TIM_Base_SetConfig+0x130>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00b      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a25      	ldr	r2, [pc, #148]	; (8001978 <TIM_Base_SetConfig+0x134>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a24      	ldr	r2, [pc, #144]	; (800197c <TIM_Base_SetConfig+0x138>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d003      	beq.n	80018f6 <TIM_Base_SetConfig+0xb2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a23      	ldr	r2, [pc, #140]	; (8001980 <TIM_Base_SetConfig+0x13c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d108      	bne.n	8001908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <TIM_Base_SetConfig+0x114>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d003      	beq.n	800193c <TIM_Base_SetConfig+0xf8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <TIM_Base_SetConfig+0x124>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d103      	bne.n	8001944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	615a      	str	r2, [r3, #20]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000
 800195c:	40000400 	.word	0x40000400
 8001960:	40000800 	.word	0x40000800
 8001964:	40000c00 	.word	0x40000c00
 8001968:	40010400 	.word	0x40010400
 800196c:	40014000 	.word	0x40014000
 8001970:	40014400 	.word	0x40014400
 8001974:	40014800 	.word	0x40014800
 8001978:	40001800 	.word	0x40001800
 800197c:	40001c00 	.word	0x40001c00
 8001980:	40002000 	.word	0x40002000

08001984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f103 0208 	add.w	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f103 0208 	add.w	r2, r3, #8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f103 0208 	add.w	r2, r3, #8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d103      	bne.n	8001a6e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e00c      	b.n	8001a88 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3308      	adds	r3, #8
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e002      	b.n	8001a7c <vListInsert+0x2e>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d2f6      	bcs.n	8001a76 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	601a      	str	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6892      	ldr	r2, [r2, #8]
 8001ad6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6852      	ldr	r2, [r2, #4]
 8001ae0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d103      	bne.n	8001af4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2c:	f383 8811 	msr	BASEPRI, r3
 8001b30:	f3bf 8f6f 	isb	sy
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001b3a:	bf00      	nop
 8001b3c:	e7fe      	b.n	8001b3c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001b3e:	f002 f8bb 	bl	8003cb8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	68f9      	ldr	r1, [r7, #12]
 8001b4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	441a      	add	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	441a      	add	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	22ff      	movs	r2, #255	; 0xff
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	22ff      	movs	r2, #255	; 0xff
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d114      	bne.n	8001bbe <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01a      	beq.n	8001bd2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3310      	adds	r3, #16
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 f9b1 	bl	8002f08 <xTaskRemoveFromEventList>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d012      	beq.n	8001bd2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <xQueueGenericReset+0xcc>)
 8001bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	f3bf 8f6f 	isb	sy
 8001bbc:	e009      	b.n	8001bd2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3310      	adds	r3, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fef2 	bl	80019ac <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3324      	adds	r3, #36	; 0x24
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff feed 	bl	80019ac <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001bd2:	f002 f8a1 	bl	8003d18 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	e000ed04 	.word	0xe000ed04

08001be4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <xQueueGenericCreate+0x2a>
        __asm volatile
 8001bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	61bb      	str	r3, [r7, #24]
    }
 8001c0a:	bf00      	nop
 8001c0c:	e7fe      	b.n	8001c0c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <xQueueGenericCreate+0x48>
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d101      	bne.n	8001c30 <xQueueGenericCreate+0x4c>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <xQueueGenericCreate+0x4e>
 8001c30:	2300      	movs	r3, #0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <xQueueGenericCreate+0x68>
        __asm volatile
 8001c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3a:	f383 8811 	msr	BASEPRI, r3
 8001c3e:	f3bf 8f6f 	isb	sy
 8001c42:	f3bf 8f4f 	dsb	sy
 8001c46:	617b      	str	r3, [r7, #20]
    }
 8001c48:	bf00      	nop
 8001c4a:	e7fe      	b.n	8001c4a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001c52:	d90a      	bls.n	8001c6a <xQueueGenericCreate+0x86>
        __asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	613b      	str	r3, [r7, #16]
    }
 8001c66:	bf00      	nop
 8001c68:	e7fe      	b.n	8001c68 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3350      	adds	r3, #80	; 0x50
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 f944 	bl	8003efc <pvPortMalloc>
 8001c74:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00d      	beq.n	8001c98 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3350      	adds	r3, #80	; 0x50
 8001c84:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f805 	bl	8001ca2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001c98:	6a3b      	ldr	r3, [r7, #32]
    }
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e002      	b.n	8001cc4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	69b8      	ldr	r0, [r7, #24]
 8001cd4:	f7ff ff1e 	bl	8001b14 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	; 0x38
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10a      	bne.n	8001d1a <xQueueGenericSend+0x32>
        __asm volatile
 8001d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d08:	f383 8811 	msr	BASEPRI, r3
 8001d0c:	f3bf 8f6f 	isb	sy
 8001d10:	f3bf 8f4f 	dsb	sy
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001d16:	bf00      	nop
 8001d18:	e7fe      	b.n	8001d18 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d103      	bne.n	8001d28 <xQueueGenericSend+0x40>
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <xQueueGenericSend+0x44>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <xQueueGenericSend+0x46>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10a      	bne.n	8001d48 <xQueueGenericSend+0x60>
        __asm volatile
 8001d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d36:	f383 8811 	msr	BASEPRI, r3
 8001d3a:	f3bf 8f6f 	isb	sy
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001d44:	bf00      	nop
 8001d46:	e7fe      	b.n	8001d46 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d103      	bne.n	8001d56 <xQueueGenericSend+0x6e>
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <xQueueGenericSend+0x72>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <xQueueGenericSend+0x74>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <xQueueGenericSend+0x8e>
        __asm volatile
 8001d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d64:	f383 8811 	msr	BASEPRI, r3
 8001d68:	f3bf 8f6f 	isb	sy
 8001d6c:	f3bf 8f4f 	dsb	sy
 8001d70:	623b      	str	r3, [r7, #32]
    }
 8001d72:	bf00      	nop
 8001d74:	e7fe      	b.n	8001d74 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d76:	f001 fa63 	bl	8003240 <xTaskGetSchedulerState>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <xQueueGenericSend+0x9e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <xQueueGenericSend+0xa2>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <xQueueGenericSend+0xa4>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10a      	bne.n	8001da6 <xQueueGenericSend+0xbe>
        __asm volatile
 8001d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	61fb      	str	r3, [r7, #28]
    }
 8001da2:	bf00      	nop
 8001da4:	e7fe      	b.n	8001da4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001da6:	f001 ff87 	bl	8003cb8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d302      	bcc.n	8001dbc <xQueueGenericSend+0xd4>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d129      	bne.n	8001e10 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dc2:	f000 fa19 	bl	80021f8 <prvCopyDataToQueue>
 8001dc6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd2:	3324      	adds	r3, #36	; 0x24
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f001 f897 	bl	8002f08 <xTaskRemoveFromEventList>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <xQueueGenericSend+0x1f8>)
 8001de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	e00a      	b.n	8001e08 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001df8:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <xQueueGenericSend+0x1f8>)
 8001dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001e08:	f001 ff86 	bl	8003d18 <vPortExitCritical>
                return pdPASS;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e063      	b.n	8001ed8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e16:	f001 ff7f 	bl	8003d18 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e05c      	b.n	8001ed8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 f8cf 	bl	8002fcc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e32:	f001 ff71 	bl	8003d18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e36:	f000 fe49 	bl	8002acc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e3a:	f001 ff3d 	bl	8003cb8 <vPortEnterCritical>
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4a:	d103      	bne.n	8001e54 <xQueueGenericSend+0x16c>
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d103      	bne.n	8001e6a <xQueueGenericSend+0x182>
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e6a:	f001 ff55 	bl	8003d18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e6e:	1d3a      	adds	r2, r7, #4
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 f8be 	bl	8002ff8 <xTaskCheckForTimeOut>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d124      	bne.n	8001ecc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e84:	f000 fab0 	bl	80023e8 <prvIsQueueFull>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d018      	beq.n	8001ec0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e90:	3310      	adds	r3, #16
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 ffe6 	bl	8002e68 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e9e:	f000 fa3b 	bl	8002318 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001ea2:	f000 fe21 	bl	8002ae8 <xTaskResumeAll>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f47f af7c 	bne.w	8001da6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <xQueueGenericSend+0x1f8>)
 8001eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	f3bf 8f6f 	isb	sy
 8001ebe:	e772      	b.n	8001da6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ec2:	f000 fa29 	bl	8002318 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001ec6:	f000 fe0f 	bl	8002ae8 <xTaskResumeAll>
 8001eca:	e76c      	b.n	8001da6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ece:	f000 fa23 	bl	8002318 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ed2:	f000 fe09 	bl	8002ae8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001ed6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3738      	adds	r7, #56	; 0x38
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	e000ed04 	.word	0xe000ed04

08001ee4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b090      	sub	sp, #64	; 0x40
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001f0e:	bf00      	nop
 8001f10:	e7fe      	b.n	8001f10 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d103      	bne.n	8001f20 <xQueueGenericSendFromISR+0x3c>
 8001f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <xQueueGenericSendFromISR+0x40>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <xQueueGenericSendFromISR+0x42>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10a      	bne.n	8001f40 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2e:	f383 8811 	msr	BASEPRI, r3
 8001f32:	f3bf 8f6f 	isb	sy
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001f3c:	bf00      	nop
 8001f3e:	e7fe      	b.n	8001f3e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d103      	bne.n	8001f4e <xQueueGenericSendFromISR+0x6a>
 8001f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <xQueueGenericSendFromISR+0x6e>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <xQueueGenericSendFromISR+0x70>
 8001f52:	2300      	movs	r3, #0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5c:	f383 8811 	msr	BASEPRI, r3
 8001f60:	f3bf 8f6f 	isb	sy
 8001f64:	f3bf 8f4f 	dsb	sy
 8001f68:	623b      	str	r3, [r7, #32]
    }
 8001f6a:	bf00      	nop
 8001f6c:	e7fe      	b.n	8001f6c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f6e:	f001 ff85 	bl	8003e7c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001f72:	f3ef 8211 	mrs	r2, BASEPRI
 8001f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7a:	f383 8811 	msr	BASEPRI, r3
 8001f7e:	f3bf 8f6f 	isb	sy
 8001f82:	f3bf 8f4f 	dsb	sy
 8001f86:	61fa      	str	r2, [r7, #28]
 8001f88:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d302      	bcc.n	8001fa0 <xQueueGenericSendFromISR+0xbc>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d13e      	bne.n	800201e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001fb6:	f000 f91f 	bl	80021f8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001fba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc2:	d112      	bne.n	8001fea <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d025      	beq.n	8002018 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fce:	3324      	adds	r3, #36	; 0x24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 ff99 	bl	8002f08 <xTaskRemoveFromEventList>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01d      	beq.n	8002018 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e016      	b.n	8002018 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001fea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001fee:	2b7f      	cmp	r3, #127	; 0x7f
 8001ff0:	d10a      	bne.n	8002008 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8001ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	617b      	str	r3, [r7, #20]
    }
 8002004:	bf00      	nop
 8002006:	e7fe      	b.n	8002006 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002008:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800200c:	3301      	adds	r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	b25a      	sxtb	r2, r3
 8002012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002018:	2301      	movs	r3, #1
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800201c:	e001      	b.n	8002022 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800201e:	2300      	movs	r3, #0
 8002020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002024:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800202c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800202e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002030:	4618      	mov	r0, r3
 8002032:	3740      	adds	r7, #64	; 0x40
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <xQueueReceive+0x30>
        __asm volatile
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	623b      	str	r3, [r7, #32]
    }
 8002064:	bf00      	nop
 8002066:	e7fe      	b.n	8002066 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <xQueueReceive+0x3e>
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <xQueueReceive+0x42>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <xQueueReceive+0x44>
 800207a:	2300      	movs	r3, #0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <xQueueReceive+0x5e>
        __asm volatile
 8002080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	61fb      	str	r3, [r7, #28]
    }
 8002092:	bf00      	nop
 8002094:	e7fe      	b.n	8002094 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002096:	f001 f8d3 	bl	8003240 <xTaskGetSchedulerState>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <xQueueReceive+0x6e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <xQueueReceive+0x72>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <xQueueReceive+0x74>
 80020aa:	2300      	movs	r3, #0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <xQueueReceive+0x8e>
        __asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	61bb      	str	r3, [r7, #24]
    }
 80020c2:	bf00      	nop
 80020c4:	e7fe      	b.n	80020c4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80020c6:	f001 fdf7 	bl	8003cb8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01f      	beq.n	8002116 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020da:	f000 f8f7 	bl	80022cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	1e5a      	subs	r2, r3, #1
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00f      	beq.n	800210e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	3310      	adds	r3, #16
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 ff08 	bl	8002f08 <xTaskRemoveFromEventList>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <xQueueReceive+0x1bc>)
 8002100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800210e:	f001 fe03 	bl	8003d18 <vPortExitCritical>
                return pdPASS;
 8002112:	2301      	movs	r3, #1
 8002114:	e069      	b.n	80021ea <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d103      	bne.n	8002124 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800211c:	f001 fdfc 	bl	8003d18 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002120:	2300      	movs	r3, #0
 8002122:	e062      	b.n	80021ea <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	4618      	mov	r0, r3
 8002130:	f000 ff4c 	bl	8002fcc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002134:	2301      	movs	r3, #1
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002138:	f001 fdee 	bl	8003d18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800213c:	f000 fcc6 	bl	8002acc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002140:	f001 fdba 	bl	8003cb8 <vPortEnterCritical>
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800214a:	b25b      	sxtb	r3, r3
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d103      	bne.n	800215a <xQueueReceive+0x122>
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002160:	b25b      	sxtb	r3, r3
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002166:	d103      	bne.n	8002170 <xQueueReceive+0x138>
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002170:	f001 fdd2 	bl	8003d18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002174:	1d3a      	adds	r2, r7, #4
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f000 ff3b 	bl	8002ff8 <xTaskCheckForTimeOut>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d123      	bne.n	80021d0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800218a:	f000 f917 	bl	80023bc <prvIsQueueEmpty>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d017      	beq.n	80021c4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	3324      	adds	r3, #36	; 0x24
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fe63 	bl	8002e68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80021a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a4:	f000 f8b8 	bl	8002318 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80021a8:	f000 fc9e 	bl	8002ae8 <xTaskResumeAll>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d189      	bne.n	80020c6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <xQueueReceive+0x1bc>)
 80021b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	e780      	b.n	80020c6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80021c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021c6:	f000 f8a7 	bl	8002318 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80021ca:	f000 fc8d 	bl	8002ae8 <xTaskResumeAll>
 80021ce:	e77a      	b.n	80020c6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80021d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021d2:	f000 f8a1 	bl	8002318 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80021d6:	f000 fc87 	bl	8002ae8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021dc:	f000 f8ee 	bl	80023bc <prvIsQueueEmpty>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f43f af6f 	beq.w	80020c6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80021e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3730      	adds	r7, #48	; 0x30
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	e000ed04 	.word	0xe000ed04

080021f8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d14d      	bne.n	80022ba <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f001 f82a 	bl	800327c <xTaskPriorityDisinherit>
 8002228:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	e043      	b.n	80022ba <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d119      	bne.n	800226c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6858      	ldr	r0, [r3, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	461a      	mov	r2, r3
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	f002 f87c 	bl	8004340 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	441a      	add	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	429a      	cmp	r2, r3
 8002260:	d32b      	bcc.n	80022ba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	e026      	b.n	80022ba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68d8      	ldr	r0, [r3, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	461a      	mov	r2, r3
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	f002 f862 	bl	8004340 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	425b      	negs	r3, r3
 8002286:	441a      	add	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	425b      	negs	r3, r3
 80022a2:	441a      	add	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d105      	bne.n	80022ba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80022c2:	697b      	ldr	r3, [r7, #20]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d018      	beq.n	8002310 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	441a      	add	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d303      	bcc.n	8002300 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68d9      	ldr	r1, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	461a      	mov	r2, r3
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f002 f818 	bl	8004340 <memcpy>
    }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002320:	f001 fcca 	bl	8003cb8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800232c:	e011      	b.n	8002352 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3324      	adds	r3, #36	; 0x24
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fde4 	bl	8002f08 <xTaskRemoveFromEventList>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002346:	f000 febd 	bl	80030c4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3b01      	subs	r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	2b00      	cmp	r3, #0
 8002358:	dce9      	bgt.n	800232e <prvUnlockQueue+0x16>
 800235a:	e000      	b.n	800235e <prvUnlockQueue+0x46>
                        break;
 800235c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002366:	f001 fcd7 	bl	8003d18 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800236a:	f001 fca5 	bl	8003cb8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002374:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002376:	e011      	b.n	800239c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3310      	adds	r3, #16
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fdbf 	bl	8002f08 <xTaskRemoveFromEventList>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002390:	f000 fe98 	bl	80030c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002394:	7bbb      	ldrb	r3, [r7, #14]
 8002396:	3b01      	subs	r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800239c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dce9      	bgt.n	8002378 <prvUnlockQueue+0x60>
 80023a4:	e000      	b.n	80023a8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80023a6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80023b0:	f001 fcb2 	bl	8003d18 <vPortExitCritical>
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80023c4:	f001 fc78 	bl	8003cb8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80023d0:	2301      	movs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e001      	b.n	80023da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80023da:	f001 fc9d 	bl	8003d18 <vPortExitCritical>

    return xReturn;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80023f0:	f001 fc62 	bl	8003cb8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d102      	bne.n	8002406 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002400:	2301      	movs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e001      	b.n	800240a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800240a:	f001 fc85 	bl	8003d18 <vPortExitCritical>

    return xReturn;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e014      	b.n	8002452 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <vQueueAddToRegistry+0x50>)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10b      	bne.n	800244c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <vQueueAddToRegistry+0x50>)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <vQueueAddToRegistry+0x50>)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800244a:	e006      	b.n	800245a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b07      	cmp	r3, #7
 8002456:	d9e7      	bls.n	8002428 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000088 	.word	0x20000088

0800246c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800247c:	f001 fc1c 	bl	8003cb8 <vPortEnterCritical>
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002486:	b25b      	sxtb	r3, r3
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d103      	bne.n	8002496 <vQueueWaitForMessageRestricted+0x2a>
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800249c:	b25b      	sxtb	r3, r3
 800249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a2:	d103      	bne.n	80024ac <vQueueWaitForMessageRestricted+0x40>
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024ac:	f001 fc34 	bl	8003d18 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3324      	adds	r3, #36	; 0x24
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fcf5 	bl	8002eb0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff26 	bl	8002318 <prvUnlockQueue>
    }
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af04      	add	r7, sp, #16
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 fd07 	bl	8003efc <pvPortMalloc>
 80024ee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00e      	beq.n	8002514 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024f6:	2058      	movs	r0, #88	; 0x58
 80024f8:	f001 fd00 	bl	8003efc <pvPortMalloc>
 80024fc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
 800250a:	e005      	b.n	8002518 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800250c:	6978      	ldr	r0, [r7, #20]
 800250e:	f001 fdd5 	bl	80040bc <vPortFree>
 8002512:	e001      	b.n	8002518 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d013      	beq.n	8002546 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	2300      	movs	r3, #0
 8002522:	9303      	str	r3, [sp, #12]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	9302      	str	r3, [sp, #8]
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f80e 	bl	8002556 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800253a:	69f8      	ldr	r0, [r7, #28]
 800253c:	f000 f8a2 	bl	8002684 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002540:	2301      	movs	r3, #1
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	e002      	b.n	800254c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800254c:	69bb      	ldr	r3, [r7, #24]
    }
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b088      	sub	sp, #32
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	461a      	mov	r2, r3
 800256e:	21a5      	movs	r1, #165	; 0xa5
 8002570:	f001 fef4 	bl	800435c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800257e:	3b01      	subs	r3, #1
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f023 0307 	bic.w	r3, r3, #7
 800258c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <prvInitialiseNewTask+0x58>
        __asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	617b      	str	r3, [r7, #20]
    }
 80025aa:	bf00      	nop
 80025ac:	e7fe      	b.n	80025ac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01f      	beq.n	80025f4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	e012      	b.n	80025e0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	7819      	ldrb	r1, [r3, #0]
 80025c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	3334      	adds	r3, #52	; 0x34
 80025ca:	460a      	mov	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d9e9      	bls.n	80025ba <prvInitialiseNewTask+0x64>
 80025e6:	e000      	b.n	80025ea <prvInitialiseNewTask+0x94>
            {
                break;
 80025e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025f2:	e003      	b.n	80025fc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d901      	bls.n	8002606 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002602:	2304      	movs	r3, #4
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002610:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	2200      	movs	r2, #0
 8002616:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	3304      	adds	r3, #4
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f9e5 	bl	80019ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	3318      	adds	r3, #24
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f9e0 	bl	80019ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002630:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	f1c3 0205 	rsb	r2, r3, #5
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	3350      	adds	r3, #80	; 0x50
 8002646:	2204      	movs	r2, #4
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f001 fe86 	bl	800435c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	3354      	adds	r3, #84	; 0x54
 8002654:	2201      	movs	r2, #1
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fe7f 	bl	800435c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	68f9      	ldr	r1, [r7, #12]
 8002662:	69b8      	ldr	r0, [r7, #24]
 8002664:	f001 f9fc 	bl	8003a60 <pxPortInitialiseStack>
 8002668:	4602      	mov	r2, r0
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002678:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800267a:	bf00      	nop
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800268c:	f001 fb14 	bl	8003cb8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <prvAddNewTaskToReadyList+0xc0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3301      	adds	r3, #1
 8002696:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <prvAddNewTaskToReadyList+0xc0>)
 8002698:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <prvAddNewTaskToReadyList+0xc4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80026a2:	4a29      	ldr	r2, [pc, #164]	; (8002748 <prvAddNewTaskToReadyList+0xc4>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026a8:	4b26      	ldr	r3, [pc, #152]	; (8002744 <prvAddNewTaskToReadyList+0xc0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d110      	bne.n	80026d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80026b0:	f000 fd2c 	bl	800310c <prvInitialiseTaskLists>
 80026b4:	e00d      	b.n	80026d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80026b6:	4b25      	ldr	r3, [pc, #148]	; (800274c <prvAddNewTaskToReadyList+0xc8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <prvAddNewTaskToReadyList+0xc4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d802      	bhi.n	80026d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80026cc:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <prvAddNewTaskToReadyList+0xc4>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <prvAddNewTaskToReadyList+0xcc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <prvAddNewTaskToReadyList+0xcc>)
 80026da:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <prvAddNewTaskToReadyList+0xcc>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	2201      	movs	r2, #1
 80026ea:	409a      	lsls	r2, r3
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <prvAddNewTaskToReadyList+0xd0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <prvAddNewTaskToReadyList+0xd0>)
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <prvAddNewTaskToReadyList+0xd4>)
 8002704:	441a      	add	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f7ff f97a 	bl	8001a06 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002712:	f001 fb01 	bl	8003d18 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <prvAddNewTaskToReadyList+0xc8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00e      	beq.n	800273c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <prvAddNewTaskToReadyList+0xc4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	429a      	cmp	r2, r3
 800272a:	d207      	bcs.n	800273c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <prvAddNewTaskToReadyList+0xd8>)
 800272e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200001a0 	.word	0x200001a0
 8002748:	200000c8 	.word	0x200000c8
 800274c:	200001ac 	.word	0x200001ac
 8002750:	200001bc 	.word	0x200001bc
 8002754:	200001a8 	.word	0x200001a8
 8002758:	200000cc 	.word	0x200000cc
 800275c:	e000ed04 	.word	0xe000ed04

08002760 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d017      	beq.n	80027a2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <vTaskDelay+0x60>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <vTaskDelay+0x30>
        __asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	60bb      	str	r3, [r7, #8]
    }
 800278c:	bf00      	nop
 800278e:	e7fe      	b.n	800278e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002790:	f000 f99c 	bl	8002acc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002794:	2100      	movs	r1, #0
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fdea 	bl	8003370 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800279c:	f000 f9a4 	bl	8002ae8 <xTaskResumeAll>
 80027a0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <vTaskDelay+0x64>)
 80027aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200001c8 	.word	0x200001c8
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80027d0:	f001 fa72 	bl	8003cb8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <vTaskSuspend+0x18>
 80027da:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <vTaskSuspend+0x120>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e000      	b.n	80027e2 <vTaskSuspend+0x1a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff f969 	bl	8001ac0 <uxListRemove>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d115      	bne.n	8002820 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f8:	493c      	ldr	r1, [pc, #240]	; (80028ec <vTaskSuspend+0x124>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <vTaskSuspend+0x58>
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	2201      	movs	r2, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43da      	mvns	r2, r3
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <vTaskSuspend+0x128>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4013      	ands	r3, r2
 800281c:	4a34      	ldr	r2, [pc, #208]	; (80028f0 <vTaskSuspend+0x128>)
 800281e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	3318      	adds	r3, #24
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff f947 	bl	8001ac0 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	3304      	adds	r3, #4
 8002836:	4619      	mov	r1, r3
 8002838:	482e      	ldr	r0, [pc, #184]	; (80028f4 <vTaskSuspend+0x12c>)
 800283a:	f7ff f8e4 	bl	8001a06 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e010      	b.n	8002866 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4413      	add	r3, r2
 800284a:	3354      	adds	r3, #84	; 0x54
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	4413      	add	r3, r2
 800285a:	3354      	adds	r3, #84	; 0x54
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	ddeb      	ble.n	8002844 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800286c:	f001 fa54 	bl	8003d18 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <vTaskSuspend+0x130>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002878:	f001 fa1e 	bl	8003cb8 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800287c:	f000 fcc4 	bl	8003208 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002880:	f001 fa4a 	bl	8003d18 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <vTaskSuspend+0x120>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	429a      	cmp	r2, r3
 800288c:	d127      	bne.n	80028de <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <vTaskSuspend+0x130>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d017      	beq.n	80028c6 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <vTaskSuspend+0x134>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <vTaskSuspend+0xec>
        __asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	60fb      	str	r3, [r7, #12]
    }
 80028b0:	bf00      	nop
 80028b2:	e7fe      	b.n	80028b2 <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <vTaskSuspend+0x138>)
 80028b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80028c4:	e00b      	b.n	80028de <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <vTaskSuspend+0x12c>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <vTaskSuspend+0x13c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d103      	bne.n	80028da <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <vTaskSuspend+0x120>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
    }
 80028d8:	e001      	b.n	80028de <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 80028da:	f000 fa69 	bl	8002db0 <vTaskSwitchContext>
    }
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200000c8 	.word	0x200000c8
 80028ec:	200000cc 	.word	0x200000cc
 80028f0:	200001a8 	.word	0x200001a8
 80028f4:	2000018c 	.word	0x2000018c
 80028f8:	200001ac 	.word	0x200001ac
 80028fc:	200001c8 	.word	0x200001c8
 8002900:	e000ed04 	.word	0xe000ed04
 8002904:	200001a0 	.word	0x200001a0

08002908 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	60fb      	str	r3, [r7, #12]
    }
 8002930:	bf00      	nop
 8002932:	e7fe      	b.n	8002932 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <prvTaskIsTaskSuspended+0x5c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10a      	bne.n	8002954 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <prvTaskIsTaskSuspended+0x60>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d005      	beq.n	8002954 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8002950:	2301      	movs	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002954:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002956:	4618      	mov	r0, r3
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000018c 	.word	0x2000018c
 8002968:	20000160 	.word	0x20000160

0800296c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <vTaskResume+0x28>
        __asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	60bb      	str	r3, [r7, #8]
    }
 8002990:	bf00      	nop
 8002992:	e7fe      	b.n	8002992 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <vTaskResume+0xac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	429a      	cmp	r2, r3
 800299c:	d037      	beq.n	8002a0e <vTaskResume+0xa2>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d034      	beq.n	8002a0e <vTaskResume+0xa2>
        {
            taskENTER_CRITICAL();
 80029a4:	f001 f988 	bl	8003cb8 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ffad 	bl	8002908 <prvTaskIsTaskSuspended>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d02a      	beq.n	8002a0a <vTaskResume+0x9e>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f881 	bl	8001ac0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	2201      	movs	r2, #1
 80029c4:	409a      	lsls	r2, r3
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <vTaskResume+0xb0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <vTaskResume+0xb0>)
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <vTaskResume+0xb4>)
 80029de:	441a      	add	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7ff f80d 	bl	8001a06 <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <vTaskResume+0xac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d307      	bcc.n	8002a0a <vTaskResume+0x9e>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <vTaskResume+0xb8>)
 80029fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002a0a:	f001 f985 	bl	8003d18 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200000c8 	.word	0x200000c8
 8002a1c:	200001a8 	.word	0x200001a8
 8002a20:	200000cc 	.word	0x200000cc
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <vTaskStartScheduler+0x88>)
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	2300      	movs	r3, #0
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2300      	movs	r3, #0
 8002a38:	2282      	movs	r2, #130	; 0x82
 8002a3a:	491e      	ldr	r1, [pc, #120]	; (8002ab4 <vTaskStartScheduler+0x8c>)
 8002a3c:	481e      	ldr	r0, [pc, #120]	; (8002ab8 <vTaskStartScheduler+0x90>)
 8002a3e:	f7ff fd49 	bl	80024d4 <xTaskCreate>
 8002a42:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002a4a:	f000 fcf7 	bl	800343c <xTimerCreateTimerTask>
 8002a4e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d116      	bne.n	8002a84 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	60bb      	str	r3, [r7, #8]
    }
 8002a68:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <vTaskStartScheduler+0x94>)
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <vTaskStartScheduler+0x98>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <vTaskStartScheduler+0x9c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a7e:	f001 f879 	bl	8003b74 <xPortStartScheduler>
 8002a82:	e00e      	b.n	8002aa2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d10a      	bne.n	8002aa2 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	607b      	str	r3, [r7, #4]
    }
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <vTaskStartScheduler+0xa0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200001c4 	.word	0x200001c4
 8002ab4:	08004394 	.word	0x08004394
 8002ab8:	080030dd 	.word	0x080030dd
 8002abc:	200001c0 	.word	0x200001c0
 8002ac0:	200001ac 	.word	0x200001ac
 8002ac4:	200001a4 	.word	0x200001a4
 8002ac8:	2000000c 	.word	0x2000000c

08002acc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <vTaskSuspendAll+0x18>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <vTaskSuspendAll+0x18>)
 8002ad8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	200001c8 	.word	0x200001c8

08002ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002af6:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <xTaskResumeAll+0x114>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <xTaskResumeAll+0x2c>
        __asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	603b      	str	r3, [r7, #0]
    }
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b14:	f001 f8d0 	bl	8003cb8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b18:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <xTaskResumeAll+0x114>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	4a37      	ldr	r2, [pc, #220]	; (8002bfc <xTaskResumeAll+0x114>)
 8002b20:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <xTaskResumeAll+0x114>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d161      	bne.n	8002bee <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b2a:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <xTaskResumeAll+0x118>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d05d      	beq.n	8002bee <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b32:	e02e      	b.n	8002b92 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b34:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <xTaskResumeAll+0x11c>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3318      	adds	r3, #24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe ffbd 	bl	8001ac0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe ffb8 	bl	8001ac0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	2201      	movs	r2, #1
 8002b56:	409a      	lsls	r2, r3
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <xTaskResumeAll+0x120>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	4a2a      	ldr	r2, [pc, #168]	; (8002c08 <xTaskResumeAll+0x120>)
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <xTaskResumeAll+0x124>)
 8002b70:	441a      	add	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f7fe ff44 	bl	8001a06 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <xTaskResumeAll+0x128>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d302      	bcc.n	8002b92 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002b8c:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <xTaskResumeAll+0x12c>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <xTaskResumeAll+0x11c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1cc      	bne.n	8002b34 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ba0:	f000 fb32 	bl	8003208 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <xTaskResumeAll+0x130>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bb0:	f000 f846 	bl	8002c40 <xTaskIncrementTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <xTaskResumeAll+0x12c>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f1      	bne.n	8002bb0 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <xTaskResumeAll+0x130>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <xTaskResumeAll+0x12c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <xTaskResumeAll+0x134>)
 8002be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002bee:	f001 f893 	bl	8003d18 <vPortExitCritical>

    return xAlreadyYielded;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	200001c8 	.word	0x200001c8
 8002c00:	200001a0 	.word	0x200001a0
 8002c04:	20000160 	.word	0x20000160
 8002c08:	200001a8 	.word	0x200001a8
 8002c0c:	200000cc 	.word	0x200000cc
 8002c10:	200000c8 	.word	0x200000c8
 8002c14:	200001b4 	.word	0x200001b4
 8002c18:	200001b0 	.word	0x200001b0
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <xTaskGetTickCount+0x1c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	200001a4 	.word	0x200001a4

08002c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c4a:	4b4e      	ldr	r3, [pc, #312]	; (8002d84 <xTaskIncrementTick+0x144>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 808e 	bne.w	8002d70 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c54:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <xTaskIncrementTick+0x148>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c5c:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <xTaskIncrementTick+0x148>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d120      	bne.n	8002caa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c68:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <xTaskIncrementTick+0x14c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <xTaskIncrementTick+0x48>
        __asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	603b      	str	r3, [r7, #0]
    }
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <xTaskIncrementTick+0x46>
 8002c88:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <xTaskIncrementTick+0x14c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <xTaskIncrementTick+0x150>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3e      	ldr	r2, [pc, #248]	; (8002d8c <xTaskIncrementTick+0x14c>)
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4a3e      	ldr	r2, [pc, #248]	; (8002d90 <xTaskIncrementTick+0x150>)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <xTaskIncrementTick+0x154>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a3c      	ldr	r2, [pc, #240]	; (8002d94 <xTaskIncrementTick+0x154>)
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	f000 faaf 	bl	8003208 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <xTaskIncrementTick+0x158>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d348      	bcc.n	8002d46 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <xTaskIncrementTick+0x14c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <xTaskIncrementTick+0x158>)
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	601a      	str	r2, [r3, #0]
                    break;
 8002cc6:	e03e      	b.n	8002d46 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc8:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <xTaskIncrementTick+0x14c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d203      	bcs.n	8002ce8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	; (8002d98 <xTaskIncrementTick+0x158>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ce6:	e02e      	b.n	8002d46 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fee7 	bl	8001ac0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3318      	adds	r3, #24
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fede 	bl	8001ac0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2201      	movs	r2, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <xTaskIncrementTick+0x15c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <xTaskIncrementTick+0x15c>)
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <xTaskIncrementTick+0x160>)
 8002d24:	441a      	add	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f7fe fe6a 	bl	8001a06 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <xTaskIncrementTick+0x164>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d3b9      	bcc.n	8002cb4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d44:	e7b6      	b.n	8002cb4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <xTaskIncrementTick+0x164>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	4914      	ldr	r1, [pc, #80]	; (8002da0 <xTaskIncrementTick+0x160>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d901      	bls.n	8002d62 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <xTaskIncrementTick+0x168>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e004      	b.n	8002d7a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <xTaskIncrementTick+0x16c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <xTaskIncrementTick+0x16c>)
 8002d78:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d7a:	697b      	ldr	r3, [r7, #20]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200001c8 	.word	0x200001c8
 8002d88:	200001a4 	.word	0x200001a4
 8002d8c:	20000158 	.word	0x20000158
 8002d90:	2000015c 	.word	0x2000015c
 8002d94:	200001b8 	.word	0x200001b8
 8002d98:	200001c0 	.word	0x200001c0
 8002d9c:	200001a8 	.word	0x200001a8
 8002da0:	200000cc 	.word	0x200000cc
 8002da4:	200000c8 	.word	0x200000c8
 8002da8:	200001b4 	.word	0x200001b4
 8002dac:	200001b0 	.word	0x200001b0

08002db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <vTaskSwitchContext+0xa4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <vTaskSwitchContext+0xa8>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002dc4:	e03f      	b.n	8002e46 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <vTaskSwitchContext+0xa8>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <vTaskSwitchContext+0xac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	f1c3 031f 	rsb	r3, r3, #31
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	491f      	ldr	r1, [pc, #124]	; (8002e60 <vTaskSwitchContext+0xb0>)
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	607b      	str	r3, [r7, #4]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <vTaskSwitchContext+0x5a>
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <vTaskSwitchContext+0xb0>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d104      	bne.n	8002e3c <vTaskSwitchContext+0x8c>
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <vTaskSwitchContext+0xb4>)
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	200001c8 	.word	0x200001c8
 8002e58:	200001b4 	.word	0x200001b4
 8002e5c:	200001a8 	.word	0x200001a8
 8002e60:	200000cc 	.word	0x200000cc
 8002e64:	200000c8 	.word	0x200000c8

08002e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	60fb      	str	r3, [r7, #12]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <vTaskPlaceOnEventList+0x44>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3318      	adds	r3, #24
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe fdd9 	bl	8001a4e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	6838      	ldr	r0, [r7, #0]
 8002ea0:	f000 fa66 	bl	8003370 <prvAddCurrentTaskToDelayedList>
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200000c8 	.word	0x200000c8

08002eb0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	617b      	str	r3, [r7, #20]
    }
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3318      	adds	r3, #24
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7fe fd90 	bl	8001a06 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68b8      	ldr	r0, [r7, #8]
 8002ef6:	f000 fa3b 	bl	8003370 <prvAddCurrentTaskToDelayedList>
    }
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200000c8 	.word	0x200000c8

08002f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60fb      	str	r3, [r7, #12]
    }
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	3318      	adds	r3, #24
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe fdc1 	bl	8001ac0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <xTaskRemoveFromEventList+0xac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11c      	bne.n	8002f80 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fdb8 	bl	8001ac0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <xTaskRemoveFromEventList+0xb0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <xTaskRemoveFromEventList+0xb0>)
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <xTaskRemoveFromEventList+0xb4>)
 8002f70:	441a      	add	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	3304      	adds	r3, #4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f7fe fd44 	bl	8001a06 <vListInsertEnd>
 8002f7e:	e005      	b.n	8002f8c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	3318      	adds	r3, #24
 8002f84:	4619      	mov	r1, r3
 8002f86:	480e      	ldr	r0, [pc, #56]	; (8002fc0 <xTaskRemoveFromEventList+0xb8>)
 8002f88:	f7fe fd3d 	bl	8001a06 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <xTaskRemoveFromEventList+0xbc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d905      	bls.n	8002fa6 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <xTaskRemoveFromEventList+0xc0>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e001      	b.n	8002faa <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002faa:	697b      	ldr	r3, [r7, #20]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200001c8 	.word	0x200001c8
 8002fb8:	200001a8 	.word	0x200001a8
 8002fbc:	200000cc 	.word	0x200000cc
 8002fc0:	20000160 	.word	0x20000160
 8002fc4:	200000c8 	.word	0x200000c8
 8002fc8:	200001b4 	.word	0x200001b4

08002fcc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <vTaskInternalSetTimeOutState+0x24>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <vTaskInternalSetTimeOutState+0x28>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	605a      	str	r2, [r3, #4]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	200001b8 	.word	0x200001b8
 8002ff4:	200001a4 	.word	0x200001a4

08002ff8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	613b      	str	r3, [r7, #16]
    }
 800301a:	bf00      	nop
 800301c:	e7fe      	b.n	800301c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60fb      	str	r3, [r7, #12]
    }
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800303a:	f000 fe3d 	bl	8003cb8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800303e:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <xTaskCheckForTimeOut+0xc4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d102      	bne.n	800305e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	e026      	b.n	80030ac <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <xTaskCheckForTimeOut+0xc8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d00a      	beq.n	8003080 <xTaskCheckForTimeOut+0x88>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	429a      	cmp	r2, r3
 8003072:	d305      	bcc.n	8003080 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003074:	2301      	movs	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e015      	b.n	80030ac <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	429a      	cmp	r2, r3
 8003088:	d20b      	bcs.n	80030a2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	1ad2      	subs	r2, r2, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ff98 	bl	8002fcc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	e004      	b.n	80030ac <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80030ac:	f000 fe34 	bl	8003d18 <vPortExitCritical>

    return xReturn;
 80030b0:	69fb      	ldr	r3, [r7, #28]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3720      	adds	r7, #32
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200001a4 	.word	0x200001a4
 80030c0:	200001b8 	.word	0x200001b8

080030c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <vTaskMissedYield+0x14>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	200001b4 	.word	0x200001b4

080030dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80030e4:	f000 f852 	bl	800318c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <prvIdleTask+0x28>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d9f9      	bls.n	80030e4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <prvIdleTask+0x2c>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003100:	e7f0      	b.n	80030e4 <prvIdleTask+0x8>
 8003102:	bf00      	nop
 8003104:	200000cc 	.word	0x200000cc
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	e00c      	b.n	8003132 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <prvInitialiseTaskLists+0x60>)
 8003124:	4413      	add	r3, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fc40 	bl	80019ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3301      	adds	r3, #1
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d9ef      	bls.n	8003118 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003138:	480d      	ldr	r0, [pc, #52]	; (8003170 <prvInitialiseTaskLists+0x64>)
 800313a:	f7fe fc37 	bl	80019ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800313e:	480d      	ldr	r0, [pc, #52]	; (8003174 <prvInitialiseTaskLists+0x68>)
 8003140:	f7fe fc34 	bl	80019ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003144:	480c      	ldr	r0, [pc, #48]	; (8003178 <prvInitialiseTaskLists+0x6c>)
 8003146:	f7fe fc31 	bl	80019ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800314a:	480c      	ldr	r0, [pc, #48]	; (800317c <prvInitialiseTaskLists+0x70>)
 800314c:	f7fe fc2e 	bl	80019ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003150:	480b      	ldr	r0, [pc, #44]	; (8003180 <prvInitialiseTaskLists+0x74>)
 8003152:	f7fe fc2b 	bl	80019ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <prvInitialiseTaskLists+0x78>)
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <prvInitialiseTaskLists+0x64>)
 800315a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <prvInitialiseTaskLists+0x7c>)
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <prvInitialiseTaskLists+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200000cc 	.word	0x200000cc
 8003170:	20000130 	.word	0x20000130
 8003174:	20000144 	.word	0x20000144
 8003178:	20000160 	.word	0x20000160
 800317c:	20000174 	.word	0x20000174
 8003180:	2000018c 	.word	0x2000018c
 8003184:	20000158 	.word	0x20000158
 8003188:	2000015c 	.word	0x2000015c

0800318c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003192:	e019      	b.n	80031c8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003194:	f000 fd90 	bl	8003cb8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003198:	4b10      	ldr	r3, [pc, #64]	; (80031dc <prvCheckTasksWaitingTermination+0x50>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fc8b 	bl	8001ac0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <prvCheckTasksWaitingTermination+0x54>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <prvCheckTasksWaitingTermination+0x54>)
 80031b2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031bc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80031be:	f000 fdab 	bl	8003d18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f810 	bl	80031e8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <prvCheckTasksWaitingTermination+0x58>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e1      	bne.n	8003194 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000174 	.word	0x20000174
 80031e0:	200001a0 	.word	0x200001a0
 80031e4:	20000188 	.word	0x20000188

080031e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 ff61 	bl	80040bc <vPortFree>
                vPortFree( pxTCB );
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ff5e 	bl	80040bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <prvResetNextTaskUnblockTime+0x30>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <prvResetNextTaskUnblockTime+0x34>)
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800321e:	e005      	b.n	800322c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <prvResetNextTaskUnblockTime+0x30>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <prvResetNextTaskUnblockTime+0x34>)
 800322a:	6013      	str	r3, [r2, #0]
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000158 	.word	0x20000158
 800323c:	200001c0 	.word	0x200001c0

08003240 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <xTaskGetSchedulerState+0x34>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800324e:	2301      	movs	r3, #1
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	e008      	b.n	8003266 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <xTaskGetSchedulerState+0x38>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800325c:	2302      	movs	r3, #2
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	e001      	b.n	8003266 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003266:	687b      	ldr	r3, [r7, #4]
    }
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	200001ac 	.word	0x200001ac
 8003278:	200001c8 	.word	0x200001c8

0800327c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d063      	beq.n	800335a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <xTaskPriorityDisinherit+0xe8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d00a      	beq.n	80032b2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60fb      	str	r3, [r7, #12]
    }
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	60bb      	str	r3, [r7, #8]
    }
 80032cc:	bf00      	nop
 80032ce:	e7fe      	b.n	80032ce <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d039      	beq.n	800335a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d135      	bne.n	800335a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	3304      	adds	r3, #4
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fbe4 	bl	8001ac0 <uxListRemove>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	2201      	movs	r2, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43da      	mvns	r2, r3
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <xTaskPriorityDisinherit+0xec>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4013      	ands	r3, r2
 8003310:	4a15      	ldr	r2, [pc, #84]	; (8003368 <xTaskPriorityDisinherit+0xec>)
 8003312:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f1c3 0205 	rsb	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <xTaskPriorityDisinherit+0xec>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <xTaskPriorityDisinherit+0xec>)
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <xTaskPriorityDisinherit+0xf0>)
 8003348:	441a      	add	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	3304      	adds	r3, #4
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7fe fb58 	bl	8001a06 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003356:	2301      	movs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800335a:	697b      	ldr	r3, [r7, #20]
    }
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200000c8 	.word	0x200000c8
 8003368:	200001a8 	.word	0x200001a8
 800336c:	200000cc 	.word	0x200000cc

08003370 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <prvAddCurrentTaskToDelayedList+0xb0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003380:	4b28      	ldr	r3, [pc, #160]	; (8003424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fb9a 	bl	8001ac0 <uxListRemove>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10b      	bne.n	80033aa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	2201      	movs	r2, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4013      	ands	r3, r2
 80033a6:	4a20      	ldr	r2, [pc, #128]	; (8003428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033a8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d10a      	bne.n	80033c8 <prvAddCurrentTaskToDelayedList+0x58>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3304      	adds	r3, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	481a      	ldr	r0, [pc, #104]	; (800342c <prvAddCurrentTaskToDelayedList+0xbc>)
 80033c2:	f7fe fb20 	bl	8001a06 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033c6:	e026      	b.n	8003416 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d209      	bcs.n	80033f4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3304      	adds	r3, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f7fe fb2e 	bl	8001a4e <vListInsert>
}
 80033f2:	e010      	b.n	8003416 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3304      	adds	r3, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fe fb24 	bl	8001a4e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	d202      	bcs.n	8003416 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003410:	4a09      	ldr	r2, [pc, #36]	; (8003438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6013      	str	r3, [r2, #0]
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200001a4 	.word	0x200001a4
 8003424:	200000c8 	.word	0x200000c8
 8003428:	200001a8 	.word	0x200001a8
 800342c:	2000018c 	.word	0x2000018c
 8003430:	2000015c 	.word	0x2000015c
 8003434:	20000158 	.word	0x20000158
 8003438:	200001c0 	.word	0x200001c0

0800343c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003446:	f000 fad5 	bl	80039f4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <xTimerCreateTimerTask+0x54>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <xTimerCreateTimerTask+0x58>)
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	2302      	movs	r3, #2
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003460:	490d      	ldr	r1, [pc, #52]	; (8003498 <xTimerCreateTimerTask+0x5c>)
 8003462:	480e      	ldr	r0, [pc, #56]	; (800349c <xTimerCreateTimerTask+0x60>)
 8003464:	f7ff f836 	bl	80024d4 <xTaskCreate>
 8003468:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	603b      	str	r3, [r7, #0]
    }
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003486:	687b      	ldr	r3, [r7, #4]
    }
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	200001fc 	.word	0x200001fc
 8003494:	20000200 	.word	0x20000200
 8003498:	0800439c 	.word	0x0800439c
 800349c:	080035d5 	.word	0x080035d5

080034a0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <xTimerGenericCommand+0x2e>
        __asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	623b      	str	r3, [r7, #32]
    }
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <xTimerGenericCommand+0x98>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02a      	beq.n	800352c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	dc18      	bgt.n	800351a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034e8:	f7ff feaa 	bl	8003240 <xTaskGetSchedulerState>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d109      	bne.n	8003506 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <xTimerGenericCommand+0x98>)
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	f107 0114 	add.w	r1, r7, #20
 80034fa:	2300      	movs	r3, #0
 80034fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034fe:	f7fe fbf3 	bl	8001ce8 <xQueueGenericSend>
 8003502:	6278      	str	r0, [r7, #36]	; 0x24
 8003504:	e012      	b.n	800352c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <xTimerGenericCommand+0x98>)
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f107 0114 	add.w	r1, r7, #20
 800350e:	2300      	movs	r3, #0
 8003510:	2200      	movs	r2, #0
 8003512:	f7fe fbe9 	bl	8001ce8 <xQueueGenericSend>
 8003516:	6278      	str	r0, [r7, #36]	; 0x24
 8003518:	e008      	b.n	800352c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800351a:	4b07      	ldr	r3, [pc, #28]	; (8003538 <xTimerGenericCommand+0x98>)
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	f107 0114 	add.w	r1, r7, #20
 8003522:	2300      	movs	r3, #0
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	f7fe fcdd 	bl	8001ee4 <xQueueGenericSendFromISR>
 800352a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800352e:	4618      	mov	r0, r3
 8003530:	3728      	adds	r7, #40	; 0x28
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200001fc 	.word	0x200001fc

0800353c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <prvProcessExpiredTimer+0x94>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	3304      	adds	r3, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fab3 	bl	8001ac0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d022      	beq.n	80035ae <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	18d1      	adds	r1, r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	f000 f8d1 	bl	800371c <prvInsertTimerInActiveList>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01f      	beq.n	80035c0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2300      	movs	r3, #0
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	2100      	movs	r1, #0
 800358a:	6978      	ldr	r0, [r7, #20]
 800358c:	f7ff ff88 	bl	80034a0 <xTimerGenericCommand>
 8003590:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d113      	bne.n	80035c0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	60fb      	str	r3, [r7, #12]
    }
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	6978      	ldr	r0, [r7, #20]
 80035c6:	4798      	blx	r3
    }
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200001f4 	.word	0x200001f4

080035d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035dc:	f107 0308 	add.w	r3, r7, #8
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f857 	bl	8003694 <prvGetNextExpireTime>
 80035e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4619      	mov	r1, r3
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f803 	bl	80035f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80035f2:	f000 f8d5 	bl	80037a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035f6:	e7f1      	b.n	80035dc <prvTimerTask+0x8>

080035f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003602:	f7ff fa63 	bl	8002acc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003606:	f107 0308 	add.w	r3, r7, #8
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f866 	bl	80036dc <prvSampleTimeNow>
 8003610:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d130      	bne.n	800367a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <prvProcessTimerOrBlockTask+0x3c>
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	429a      	cmp	r2, r3
 8003624:	d806      	bhi.n	8003634 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003626:	f7ff fa5f 	bl	8002ae8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff85 	bl	800353c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003632:	e024      	b.n	800367e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <prvProcessTimerOrBlockTask+0x90>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <prvProcessTimerOrBlockTask+0x50>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <prvProcessTimerOrBlockTask+0x52>
 8003648:	2300      	movs	r3, #0
 800364a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <prvProcessTimerOrBlockTask+0x94>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	f7fe ff07 	bl	800246c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800365e:	f7ff fa43 	bl	8002ae8 <xTaskResumeAll>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <prvProcessTimerOrBlockTask+0x98>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
    }
 8003678:	e001      	b.n	800367e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800367a:	f7ff fa35 	bl	8002ae8 <xTaskResumeAll>
    }
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200001f8 	.word	0x200001f8
 800368c:	200001fc 	.word	0x200001fc
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <prvGetNextExpireTime+0x44>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <prvGetNextExpireTime+0x16>
 80036a6:	2201      	movs	r2, #1
 80036a8:	e000      	b.n	80036ac <prvGetNextExpireTime+0x18>
 80036aa:	2200      	movs	r2, #0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d105      	bne.n	80036c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <prvGetNextExpireTime+0x44>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e001      	b.n	80036c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80036c8:	68fb      	ldr	r3, [r7, #12]
    }
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	200001f4 	.word	0x200001f4

080036dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80036e4:	f7ff fa9c 	bl	8002c20 <xTaskGetTickCount>
 80036e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <prvSampleTimeNow+0x3c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d205      	bcs.n	8003700 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80036f4:	f000 f91a 	bl	800392c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e002      	b.n	8003706 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003706:	4a04      	ldr	r2, [pc, #16]	; (8003718 <prvSampleTimeNow+0x3c>)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800370c:	68fb      	ldr	r3, [r7, #12]
    }
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000204 	.word	0x20000204

0800371c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d812      	bhi.n	8003768 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	1ad2      	subs	r2, r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	429a      	cmp	r2, r3
 800374e:	d302      	bcc.n	8003756 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003750:	2301      	movs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e01b      	b.n	800378e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <prvInsertTimerInActiveList+0x7c>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3304      	adds	r3, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f7fe f974 	bl	8001a4e <vListInsert>
 8003766:	e012      	b.n	800378e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d206      	bcs.n	800377e <prvInsertTimerInActiveList+0x62>
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e007      	b.n	800378e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <prvInsertTimerInActiveList+0x80>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3304      	adds	r3, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7fe f960 	bl	8001a4e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800378e:	697b      	ldr	r3, [r7, #20]
    }
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200001f8 	.word	0x200001f8
 800379c:	200001f4 	.word	0x200001f4

080037a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	; 0x30
 80037a4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037a6:	e0ae      	b.n	8003906 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f2c0 80aa 	blt.w	8003904 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	3304      	adds	r3, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe f97d 	bl	8001ac0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff87 	bl	80036dc <prvSampleTimeNow>
 80037ce:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	f200 8097 	bhi.w	8003906 <prvProcessReceivedCommands+0x166>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <prvProcessReceivedCommands+0x40>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003809 	.word	0x08003809
 80037ec:	0800387d 	.word	0x0800387d
 80037f0:	08003891 	.word	0x08003891
 80037f4:	080038db 	.word	0x080038db
 80037f8:	08003809 	.word	0x08003809
 80037fc:	08003809 	.word	0x08003809
 8003800:	0800387d 	.word	0x0800387d
 8003804:	08003891 	.word	0x08003891
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	b2da      	uxtb	r2, r3
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	18d1      	adds	r1, r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003828:	f7ff ff78 	bl	800371c <prvInsertTimerInActiveList>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d069      	beq.n	8003906 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003838:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05e      	beq.n	8003906 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	441a      	add	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2300      	movs	r3, #0
 8003856:	2100      	movs	r1, #0
 8003858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800385a:	f7ff fe21 	bl	80034a0 <xTimerGenericCommand>
 800385e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d14f      	bne.n	8003906 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	61bb      	str	r3, [r7, #24]
    }
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800388e:	e03a      	b.n	8003906 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	b2da      	uxtb	r2, r3
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	617b      	str	r3, [r7, #20]
    }
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	18d1      	adds	r1, r2, r3
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038d4:	f7ff ff22 	bl	800371c <prvInsertTimerInActiveList>
                        break;
 80038d8:	e015      	b.n	8003906 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80038e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ea:	f000 fbe7 	bl	80040bc <vPortFree>
 80038ee:	e00a      	b.n	8003906 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003902:	e000      	b.n	8003906 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003904:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <prvProcessReceivedCommands+0x188>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f107 0108 	add.w	r1, r7, #8
 800390e:	2200      	movs	r2, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fb91 	bl	8002038 <xQueueReceive>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	f47f af45 	bne.w	80037a8 <prvProcessReceivedCommands+0x8>
        }
    }
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	3728      	adds	r7, #40	; 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200001fc 	.word	0x200001fc

0800392c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003932:	e048      	b.n	80039c6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <prvSwitchTimerLists+0xc0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <prvSwitchTimerLists+0xc0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3304      	adds	r3, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe f8b7 	bl	8001ac0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d02e      	beq.n	80039c6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4413      	add	r3, r2
 8003970:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	429a      	cmp	r2, r3
 8003978:	d90e      	bls.n	8003998 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003986:	4b19      	ldr	r3, [pc, #100]	; (80039ec <prvSwitchTimerLists+0xc0>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3304      	adds	r3, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f7fe f85c 	bl	8001a4e <vListInsert>
 8003996:	e016      	b.n	80039c6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003998:	2300      	movs	r3, #0
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2300      	movs	r3, #0
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	2100      	movs	r1, #0
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff fd7c 	bl	80034a0 <xTimerGenericCommand>
 80039a8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	603b      	str	r3, [r7, #0]
    }
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <prvSwitchTimerLists+0xc0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1b1      	bne.n	8003934 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <prvSwitchTimerLists+0xc0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <prvSwitchTimerLists+0xc4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <prvSwitchTimerLists+0xc0>)
 80039dc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80039de:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <prvSwitchTimerLists+0xc4>)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	6013      	str	r3, [r2, #0]
    }
 80039e4:	bf00      	nop
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200001f4 	.word	0x200001f4
 80039f0:	200001f8 	.word	0x200001f8

080039f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80039f8:	f000 f95e 	bl	8003cb8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <prvCheckForValidListAndQueue+0x54>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11d      	bne.n	8003a40 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a04:	4811      	ldr	r0, [pc, #68]	; (8003a4c <prvCheckForValidListAndQueue+0x58>)
 8003a06:	f7fd ffd1 	bl	80019ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a0a:	4811      	ldr	r0, [pc, #68]	; (8003a50 <prvCheckForValidListAndQueue+0x5c>)
 8003a0c:	f7fd ffce 	bl	80019ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <prvCheckForValidListAndQueue+0x60>)
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <prvCheckForValidListAndQueue+0x58>)
 8003a14:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <prvCheckForValidListAndQueue+0x64>)
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <prvCheckForValidListAndQueue+0x5c>)
 8003a1a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	210c      	movs	r1, #12
 8003a20:	200a      	movs	r0, #10
 8003a22:	f7fe f8df 	bl	8001be4 <xQueueGenericCreate>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <prvCheckForValidListAndQueue+0x54>)
 8003a2a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <prvCheckForValidListAndQueue+0x54>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <prvCheckForValidListAndQueue+0x54>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4908      	ldr	r1, [pc, #32]	; (8003a5c <prvCheckForValidListAndQueue+0x68>)
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fcec 	bl	8002418 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a40:	f000 f96a 	bl	8003d18 <vPortExitCritical>
    }
 8003a44:	bf00      	nop
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200001fc 	.word	0x200001fc
 8003a4c:	200001cc 	.word	0x200001cc
 8003a50:	200001e0 	.word	0x200001e0
 8003a54:	200001f4 	.word	0x200001f4
 8003a58:	200001f8 	.word	0x200001f8
 8003a5c:	080043a4 	.word	0x080043a4

08003a60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3b04      	subs	r3, #4
 8003a70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3b04      	subs	r3, #4
 8003a7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f023 0201 	bic.w	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3b04      	subs	r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003a90:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <pxPortInitialiseStack+0x64>)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3b14      	subs	r3, #20
 8003a9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3b04      	subs	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f06f 0202 	mvn.w	r2, #2
 8003aae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3b20      	subs	r3, #32
 8003ab4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	08003ac9 	.word	0x08003ac9

08003ac8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <prvTaskExitError+0x54>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d00a      	beq.n	8003af2 <prvTaskExitError+0x2a>
        __asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
    }
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <prvTaskExitError+0x28>
        __asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60bb      	str	r3, [r7, #8]
    }
 8003b04:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b06:	bf00      	nop
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0fc      	beq.n	8003b08 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	20000010 	.word	0x20000010

08003b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b20:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <pxCurrentTCBConst2>)
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	6808      	ldr	r0, [r1, #0]
 8003b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2a:	f380 8809 	msr	PSP, r0
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f380 8811 	msr	BASEPRI, r0
 8003b3a:	4770      	bx	lr
 8003b3c:	f3af 8000 	nop.w

08003b40 <pxCurrentTCBConst2>:
 8003b40:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop

08003b48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b48:	4808      	ldr	r0, [pc, #32]	; (8003b6c <prvPortStartFirstTask+0x24>)
 8003b4a:	6800      	ldr	r0, [r0, #0]
 8003b4c:	6800      	ldr	r0, [r0, #0]
 8003b4e:	f380 8808 	msr	MSP, r0
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8814 	msr	CONTROL, r0
 8003b5a:	b662      	cpsie	i
 8003b5c:	b661      	cpsie	f
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	df00      	svc	0
 8003b68:	bf00      	nop
 8003b6a:	0000      	.short	0x0000
 8003b6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop

08003b74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b7a:	4b46      	ldr	r3, [pc, #280]	; (8003c94 <xPortStartScheduler+0x120>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a46      	ldr	r2, [pc, #280]	; (8003c98 <xPortStartScheduler+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d10a      	bne.n	8003b9a <xPortStartScheduler+0x26>
        __asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	613b      	str	r3, [r7, #16]
    }
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <xPortStartScheduler+0x120>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a3f      	ldr	r2, [pc, #252]	; (8003c9c <xPortStartScheduler+0x128>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d10a      	bne.n	8003bba <xPortStartScheduler+0x46>
        __asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	60fb      	str	r3, [r7, #12]
    }
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <xPortStartScheduler+0x12c>)
 8003bbc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <xPortStartScheduler+0x130>)
 8003be0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003be2:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <xPortStartScheduler+0x134>)
 8003be4:	2207      	movs	r2, #7
 8003be6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003be8:	e009      	b.n	8003bfe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003bea:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <xPortStartScheduler+0x134>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <xPortStartScheduler+0x134>)
 8003bf2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b80      	cmp	r3, #128	; 0x80
 8003c08:	d0ef      	beq.n	8003bea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c0a:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <xPortStartScheduler+0x134>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1c3 0307 	rsb	r3, r3, #7
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d00a      	beq.n	8003c2c <xPortStartScheduler+0xb8>
        __asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60bb      	str	r3, [r7, #8]
    }
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <xPortStartScheduler+0x134>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <xPortStartScheduler+0x134>)
 8003c34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <xPortStartScheduler+0x134>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <xPortStartScheduler+0x134>)
 8003c40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c4a:	4b18      	ldr	r3, [pc, #96]	; (8003cac <xPortStartScheduler+0x138>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <xPortStartScheduler+0x138>)
 8003c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <xPortStartScheduler+0x138>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a14      	ldr	r2, [pc, #80]	; (8003cac <xPortStartScheduler+0x138>)
 8003c5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c62:	f000 f8db 	bl	8003e1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <xPortStartScheduler+0x13c>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c6c:	f000 f8fa 	bl	8003e64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <xPortStartScheduler+0x140>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0f      	ldr	r2, [pc, #60]	; (8003cb4 <xPortStartScheduler+0x140>)
 8003c76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c7c:	f7ff ff64 	bl	8003b48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c80:	f7ff f896 	bl	8002db0 <vTaskSwitchContext>
    prvTaskExitError();
 8003c84:	f7ff ff20 	bl	8003ac8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00
 8003c98:	410fc271 	.word	0x410fc271
 8003c9c:	410fc270 	.word	0x410fc270
 8003ca0:	e000e400 	.word	0xe000e400
 8003ca4:	20000208 	.word	0x20000208
 8003ca8:	2000020c 	.word	0x2000020c
 8003cac:	e000ed20 	.word	0xe000ed20
 8003cb0:	20000010 	.word	0x20000010
 8003cb4:	e000ef34 	.word	0xe000ef34

08003cb8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
        __asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	607b      	str	r3, [r7, #4]
    }
 8003cd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <vPortEnterCritical+0x58>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <vPortEnterCritical+0x58>)
 8003cda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <vPortEnterCritical+0x58>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d10f      	bne.n	8003d04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <vPortEnterCritical+0x5c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <vPortEnterCritical+0x4c>
        __asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	603b      	str	r3, [r7, #0]
    }
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <vPortEnterCritical+0x4a>
    }
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	20000010 	.word	0x20000010
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <vPortExitCritical+0x50>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <vPortExitCritical+0x24>
        __asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	607b      	str	r3, [r7, #4]
    }
 8003d38:	bf00      	nop
 8003d3a:	e7fe      	b.n	8003d3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <vPortExitCritical+0x50>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <vPortExitCritical+0x50>)
 8003d44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <vPortExitCritical+0x50>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d105      	bne.n	8003d5a <vPortExitCritical+0x42>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f383 8811 	msr	BASEPRI, r3
    }
 8003d58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000010 	.word	0x20000010
 8003d6c:	00000000 	.word	0x00000000

08003d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003d70:	f3ef 8009 	mrs	r0, PSP
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <pxCurrentTCBConst>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f01e 0f10 	tst.w	lr, #16
 8003d80:	bf08      	it	eq
 8003d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8a:	6010      	str	r0, [r2, #0]
 8003d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d94:	f380 8811 	msr	BASEPRI, r0
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f7ff f806 	bl	8002db0 <vTaskSwitchContext>
 8003da4:	f04f 0000 	mov.w	r0, #0
 8003da8:	f380 8811 	msr	BASEPRI, r0
 8003dac:	bc09      	pop	{r0, r3}
 8003dae:	6819      	ldr	r1, [r3, #0]
 8003db0:	6808      	ldr	r0, [r1, #0]
 8003db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db6:	f01e 0f10 	tst.w	lr, #16
 8003dba:	bf08      	it	eq
 8003dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003dc0:	f380 8809 	msr	PSP, r0
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	f3af 8000 	nop.w

08003dd0 <pxCurrentTCBConst>:
 8003dd0:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop

08003dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
        __asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	607b      	str	r3, [r7, #4]
    }
 8003df0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003df2:	f7fe ff25 	bl	8002c40 <xTaskIncrementTick>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <SysTick_Handler+0x40>)
 8003dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	2300      	movs	r3, #0
 8003e06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f383 8811 	msr	BASEPRI, r3
    }
 8003e0e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <vPortSetupTimerInterrupt+0x34>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <vPortSetupTimerInterrupt+0x38>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <vPortSetupTimerInterrupt+0x3c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <vPortSetupTimerInterrupt+0x40>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <vPortSetupTimerInterrupt+0x44>)
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <vPortSetupTimerInterrupt+0x34>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010
 8003e54:	e000e018 	.word	0xe000e018
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	10624dd3 	.word	0x10624dd3
 8003e60:	e000e014 	.word	0xe000e014

08003e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e74 <vPortEnableVFP+0x10>
 8003e68:	6801      	ldr	r1, [r0, #0]
 8003e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e6e:	6001      	str	r1, [r0, #0]
 8003e70:	4770      	bx	lr
 8003e72:	0000      	.short	0x0000
 8003e74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop

08003e7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003e82:	f3ef 8305 	mrs	r3, IPSR
 8003e86:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b0f      	cmp	r3, #15
 8003e8c:	d914      	bls.n	8003eb8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e8e:	4a17      	ldr	r2, [pc, #92]	; (8003eec <vPortValidateInterruptPriority+0x70>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <vPortValidateInterruptPriority+0x74>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	7afa      	ldrb	r2, [r7, #11]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d20a      	bcs.n	8003eb8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	607b      	str	r3, [r7, #4]
    }
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <vPortValidateInterruptPriority+0x78>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <vPortValidateInterruptPriority+0x7c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d90a      	bls.n	8003ede <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	603b      	str	r3, [r7, #0]
    }
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <vPortValidateInterruptPriority+0x60>
    }
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000e3f0 	.word	0xe000e3f0
 8003ef0:	20000208 	.word	0x20000208
 8003ef4:	e000ed0c 	.word	0xe000ed0c
 8003ef8:	2000020c 	.word	0x2000020c

08003efc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003f08:	f7fe fde0 	bl	8002acc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f0c:	4b65      	ldr	r3, [pc, #404]	; (80040a4 <pvPortMalloc+0x1a8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f14:	f000 f934 	bl	8004180 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f18:	4b63      	ldr	r3, [pc, #396]	; (80040a8 <pvPortMalloc+0x1ac>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 80a7 	bne.w	8004074 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02d      	beq.n	8003f88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d227      	bcs.n	8003f88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003f38:	2208      	movs	r2, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d021      	beq.n	8003f8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f023 0307 	bic.w	r3, r3, #7
 8003f50:	3308      	adds	r3, #8
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d214      	bcs.n	8003f82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	3308      	adds	r3, #8
 8003f60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d010      	beq.n	8003f8e <pvPortMalloc+0x92>
        __asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	617b      	str	r3, [r7, #20]
    }
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f86:	e002      	b.n	8003f8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	e000      	b.n	8003f90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d06e      	beq.n	8004074 <pvPortMalloc+0x178>
 8003f96:	4b45      	ldr	r3, [pc, #276]	; (80040ac <pvPortMalloc+0x1b0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d869      	bhi.n	8004074 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <pvPortMalloc+0x1b4>)
 8003fa2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003fa4:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <pvPortMalloc+0x1b4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003faa:	e004      	b.n	8003fb6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d903      	bls.n	8003fc8 <pvPortMalloc+0xcc>
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f1      	bne.n	8003fac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <pvPortMalloc+0x1a8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d050      	beq.n	8004074 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	1ad2      	subs	r2, r2, r3
 8003fec:	2308      	movs	r3, #8
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d91f      	bls.n	8004034 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <pvPortMalloc+0x120>
        __asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	613b      	str	r3, [r7, #16]
    }
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1ad2      	subs	r2, r2, r3
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800402e:	69b8      	ldr	r0, [r7, #24]
 8004030:	f000 f908 	bl	8004244 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <pvPortMalloc+0x1b0>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <pvPortMalloc+0x1b0>)
 8004040:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <pvPortMalloc+0x1b0>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <pvPortMalloc+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d203      	bcs.n	8004056 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <pvPortMalloc+0x1b0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <pvPortMalloc+0x1b8>)
 8004054:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <pvPortMalloc+0x1ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	431a      	orrs	r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <pvPortMalloc+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3301      	adds	r3, #1
 8004070:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <pvPortMalloc+0x1bc>)
 8004072:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004074:	f7fe fd38 	bl	8002ae8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <pvPortMalloc+0x19c>
        __asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	60fb      	str	r3, [r7, #12]
    }
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <pvPortMalloc+0x19a>
    return pvReturn;
 8004098:	69fb      	ldr	r3, [r7, #28]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3728      	adds	r7, #40	; 0x28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20012e18 	.word	0x20012e18
 80040a8:	20012e2c 	.word	0x20012e2c
 80040ac:	20012e1c 	.word	0x20012e1c
 80040b0:	20012e10 	.word	0x20012e10
 80040b4:	20012e20 	.word	0x20012e20
 80040b8:	20012e24 	.word	0x20012e24

080040bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d04d      	beq.n	800416a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040ce:	2308      	movs	r3, #8
 80040d0:	425b      	negs	r3, r3
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4b24      	ldr	r3, [pc, #144]	; (8004174 <vPortFree+0xb8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <vPortFree+0x44>
        __asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
    }
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <vPortFree+0x62>
        __asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60bb      	str	r3, [r7, #8]
    }
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <vPortFree+0xb8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01e      	beq.n	800416a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11a      	bne.n	800416a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <vPortFree+0xb8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	43db      	mvns	r3, r3
 800413e:	401a      	ands	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004144:	f7fe fcc2 	bl	8002acc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <vPortFree+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4413      	add	r3, r2
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <vPortFree+0xbc>)
 8004154:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004156:	6938      	ldr	r0, [r7, #16]
 8004158:	f000 f874 	bl	8004244 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <vPortFree+0xc0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	4a06      	ldr	r2, [pc, #24]	; (800417c <vPortFree+0xc0>)
 8004164:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004166:	f7fe fcbf 	bl	8002ae8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20012e2c 	.word	0x20012e2c
 8004178:	20012e1c 	.word	0x20012e1c
 800417c:	20012e28 	.word	0x20012e28

08004180 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004186:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800418a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <prvHeapInit+0xac>)
 800418e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00c      	beq.n	80041b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3307      	adds	r3, #7
 800419e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <prvHeapInit+0xac>)
 80041b0:	4413      	add	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <prvHeapInit+0xb0>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <prvHeapInit+0xb0>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041cc:	2208      	movs	r2, #8
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0307 	bic.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a15      	ldr	r2, [pc, #84]	; (8004234 <prvHeapInit+0xb4>)
 80041e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <prvHeapInit+0xb4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <prvHeapInit+0xb4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	1ad2      	subs	r2, r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <prvHeapInit+0xb4>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <prvHeapInit+0xb8>)
 800420e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a09      	ldr	r2, [pc, #36]	; (800423c <prvHeapInit+0xbc>)
 8004216:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <prvHeapInit+0xc0>)
 800421a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20000210 	.word	0x20000210
 8004230:	20012e10 	.word	0x20012e10
 8004234:	20012e18 	.word	0x20012e18
 8004238:	20012e20 	.word	0x20012e20
 800423c:	20012e1c 	.word	0x20012e1c
 8004240:	20012e2c 	.word	0x20012e2c

08004244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <prvInsertBlockIntoFreeList+0xac>)
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e002      	b.n	8004258 <prvInsertBlockIntoFreeList+0x14>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d8f7      	bhi.n	8004252 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d108      	bne.n	8004286 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	441a      	add	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	441a      	add	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d118      	bne.n	80042cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <prvInsertBlockIntoFreeList+0xb0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d00d      	beq.n	80042c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e008      	b.n	80042d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <prvInsertBlockIntoFreeList+0xb0>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e003      	b.n	80042d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d002      	beq.n	80042e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20012e10 	.word	0x20012e10
 80042f4:	20012e18 	.word	0x20012e18

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4d0d      	ldr	r5, [pc, #52]	; (8004330 <__libc_init_array+0x38>)
 80042fc:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	2600      	movs	r6, #0
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	4d0b      	ldr	r5, [pc, #44]	; (8004338 <__libc_init_array+0x40>)
 800430a:	4c0c      	ldr	r4, [pc, #48]	; (800433c <__libc_init_array+0x44>)
 800430c:	f000 f82e 	bl	800436c <_init>
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	2600      	movs	r6, #0
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	080043cc 	.word	0x080043cc
 8004334:	080043cc 	.word	0x080043cc
 8004338:	080043cc 	.word	0x080043cc
 800433c:	080043d0 	.word	0x080043d0

08004340 <memcpy>:
 8004340:	440a      	add	r2, r1
 8004342:	4291      	cmp	r1, r2
 8004344:	f100 33ff 	add.w	r3, r0, #4294967295
 8004348:	d100      	bne.n	800434c <memcpy+0xc>
 800434a:	4770      	bx	lr
 800434c:	b510      	push	{r4, lr}
 800434e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004356:	4291      	cmp	r1, r2
 8004358:	d1f9      	bne.n	800434e <memcpy+0xe>
 800435a:	bd10      	pop	{r4, pc}

0800435c <memset>:
 800435c:	4402      	add	r2, r0
 800435e:	4603      	mov	r3, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	f803 1b01 	strb.w	r1, [r3], #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <_init>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	bf00      	nop
 8004370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004372:	bc08      	pop	{r3}
 8004374:	469e      	mov	lr, r3
 8004376:	4770      	bx	lr

08004378 <_fini>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr
