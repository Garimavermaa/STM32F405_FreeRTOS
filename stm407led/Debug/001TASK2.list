
001TASK2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d08  08004d08  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e2c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ea4  20012ea4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9c6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024fa  00000000  00000000  0002ea6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00030f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b8b  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc09  00000000  00000000  0005379b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7579  00000000  00000000  000633a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a91d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004438  00000000  00000000  0012a970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c24 	.word	0x08004c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004c24 	.word	0x08004c24

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <task1>:

TaskHandle_t task1Handle = NULL;

uint8_t x=0,y=0,z=0;
void task1(void* parameters)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint8_t task1_count=0;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		task1_count++;
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	3301      	adds	r3, #1
 80004e4:	73fb      	strb	r3, [r7, #15]
		x=task1_count;
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <task1+0x34>)
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	7013      	strb	r3, [r2, #0]
		printf("%s\n",(char*)parameters);
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f003 fefb 	bl	80042e8 <puts>
		GPIOD->ODR ^= (1<<12);
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <task1+0x38>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <task1+0x38>)
 80004f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80004fc:	6153      	str	r3, [r2, #20]
		vTaskDelay(1000);
 80004fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000502:	f002 f9ad 	bl	8002860 <vTaskDelay>
		task1_count++;
 8000506:	e7eb      	b.n	80004e0 <task1+0xc>
 8000508:	20000098 	.word	0x20000098
 800050c:	40020c00 	.word	0x40020c00

08000510 <task2>:
	}
}
void task2(void* parameters)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint8_t task2_count=1;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		task2_count++;
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	3301      	adds	r3, #1
 8000520:	73fb      	strb	r3, [r7, #15]
		y=task2_count;
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <task2+0x34>)
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	7013      	strb	r3, [r2, #0]
		printf("%s\n",(char*)parameters);
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f003 fedd 	bl	80042e8 <puts>
		GPIOD->ODR ^= (1<<14);
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <task2+0x38>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <task2+0x38>)
 8000534:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000538:	6153      	str	r3, [r2, #20]
		vTaskDelay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053e:	f002 f98f 	bl	8002860 <vTaskDelay>
		task2_count++;
 8000542:	e7eb      	b.n	800051c <task2+0xc>
 8000544:	20000099 	.word	0x20000099
 8000548:	40020c00 	.word	0x40020c00

0800054c <task3>:
	}
}
void task3(void* parameters)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	uint8_t task3_count=2;
 8000554:	2302      	movs	r3, #2
 8000556:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		task3_count++;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	3301      	adds	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
		z=task3_count;
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <task3+0x34>)
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	7013      	strb	r3, [r2, #0]
		printf("%s\n",(char*)parameters);
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f003 febf 	bl	80042e8 <puts>
		GPIOD->ODR ^= (1<<15);
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <task3+0x38>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <task3+0x38>)
 8000570:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000574:	6153      	str	r3, [r2, #20]
		vTaskDelay(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057a:	f002 f971 	bl	8002860 <vTaskDelay>
		task3_count++;
 800057e:	e7eb      	b.n	8000558 <task3+0xc>
 8000580:	2000009a 	.word	0x2000009a
 8000584:	40020c00 	.word	0x40020c00

08000588 <ledconfig>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

extern TIM_HandleTypeDef htim6;
void ledconfig()
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|= (1<<3);
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <ledconfig+0x34>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <ledconfig+0x34>)
 8000592:	f043 0308 	orr.w	r3, r3, #8
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (1<<24)|(1<<28)|(1<<30);
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <ledconfig+0x38>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <ledconfig+0x38>)
 800059e:	f043 43a2 	orr.w	r3, r3, #1358954496	; 0x51000000
 80005a2:	6013      	str	r3, [r2, #0]
	GPIOD->ODR |= (1<<12)|(1<<14)|(1<<15);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <ledconfig+0x38>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <ledconfig+0x38>)
 80005aa:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 80005ae:	6153      	str	r3, [r2, #20]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020c00 	.word	0x40020c00

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fa27 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f83d 	bl	800064c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  ledconfig();
 80005d2:	f7ff ffd9 	bl	8000588 <ledconfig>
  HAL_TIM_Base_Start_IT(&htim6);
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <main+0x5c>)
 80005d8:	f001 f814 	bl	8001604 <HAL_TIM_Base_Start_IT>
  	  xTaskCreate(task1,"task1", 200, "task11", 1,&task1Handle);
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <main+0x60>)
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <main+0x64>)
 80005e6:	22c8      	movs	r2, #200	; 0xc8
 80005e8:	4910      	ldr	r1, [pc, #64]	; (800062c <main+0x68>)
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0x6c>)
 80005ec:	f001 fff2 	bl	80025d4 <xTaskCreate>
  	  xTaskCreate(task2,"task2", 200,"task22", 2,NULL);
 80005f0:	2300      	movs	r3, #0
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <main+0x70>)
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	490e      	ldr	r1, [pc, #56]	; (8000638 <main+0x74>)
 80005fe:	480f      	ldr	r0, [pc, #60]	; (800063c <main+0x78>)
 8000600:	f001 ffe8 	bl	80025d4 <xTaskCreate>
  	  xTaskCreate(task3,"task3", 200, "task33", 3,NULL);
 8000604:	2300      	movs	r3, #0
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2303      	movs	r3, #3
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <main+0x7c>)
 800060e:	22c8      	movs	r2, #200	; 0xc8
 8000610:	490c      	ldr	r1, [pc, #48]	; (8000644 <main+0x80>)
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <main+0x84>)
 8000614:	f001 ffde 	bl	80025d4 <xTaskCreate>
  	  vTaskStartScheduler();
 8000618:	f002 f956 	bl	80028c8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x58>
 800061e:	bf00      	nop
 8000620:	2000009c 	.word	0x2000009c
 8000624:	20000094 	.word	0x20000094
 8000628:	08004c3c 	.word	0x08004c3c
 800062c:	08004c44 	.word	0x08004c44
 8000630:	080004d5 	.word	0x080004d5
 8000634:	08004c4c 	.word	0x08004c4c
 8000638:	08004c54 	.word	0x08004c54
 800063c:	08000511 	.word	0x08000511
 8000640:	08004c5c 	.word	0x08004c5c
 8000644:	08004c64 	.word	0x08004c64
 8000648:	0800054d 	.word	0x0800054d

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fdce 	bl	80041fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xb4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xb4>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xb4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <SystemClock_Config+0xb8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <SystemClock_Config+0xb8>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <SystemClock_Config+0xb8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fad1 	bl	8000c64 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c8:	f000 f830 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fd34 	bl	8001154 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006f2:	f000 f81b 	bl	800072c <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f000 f9a1 	bl	8000a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40001000 	.word	0x40001000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	2036      	movs	r0, #54	; 0x36
 800079e:	f000 fa37 	bl	8000c10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007a2:	2036      	movs	r0, #54	; 0x36
 80007a4:	f000 fa50 	bl	8000c48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_InitTick+0xa0>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <HAL_InitTick+0xa0>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_InitTick+0xa0>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 0310 	and.w	r3, r3, #16
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c4:	f107 0210 	add.w	r2, r7, #16
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fe8c 	bl	80014ec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007d4:	f000 fe76 	bl	80014c4 <HAL_RCC_GetPCLK1Freq>
 80007d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <HAL_InitTick+0xa4>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9b      	lsrs	r3, r3, #18
 80007e4:	3b01      	subs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_InitTick+0xa8>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <HAL_InitTick+0xac>)
 80007ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_InitTick+0xa8>)
 80007f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_InitTick+0xa8>)
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_InitTick+0xa8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_InitTick+0xa8>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <HAL_InitTick+0xa8>)
 800080a:	f000 fea1 	bl	8001550 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d104      	bne.n	800081e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <HAL_InitTick+0xa8>)
 8000816:	f000 fef5 	bl	8001604 <HAL_TIM_Base_Start_IT>
 800081a:	4603      	mov	r3, r0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3730      	adds	r7, #48	; 0x30
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	431bde83 	.word	0x431bde83
 8000830:	2000009c 	.word	0x2000009c
 8000834:	40001000 	.word	0x40001000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <TIM6_DAC_IRQHandler+0x10>)
 800086a:	f000 ff3b 	bl	80016e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000009c 	.word	0x2000009c

08000878 <ITM_SendChar>:
#define DEMCR *((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*)0xE0000000 )
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)
void ITM_SendChar(uint8_t ch)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
//Enable TRCENA
DEMCR |= ( 1 << 24);
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <ITM_SendChar+0x48>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <ITM_SendChar+0x48>)
 8000888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800088c:	6013      	str	r3, [r2, #0]
//enable stimulus port 0
ITM_TRACE_EN |= ( 1 << 0);
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <ITM_SendChar+0x4c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <ITM_SendChar+0x4c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6013      	str	r3, [r2, #0]
// read FIFO status in bit [0]:
while(!(ITM_STIMULUS_PORT0 & 1));
 800089a:	bf00      	nop
 800089c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f8      	beq.n	800089c <ITM_SendChar+0x24>
//Write to ITM stimulus port0
ITM_STIMULUS_PORT0 = ch;
 80008aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000edfc 	.word	0xe000edfc
 80008c4:	e0000e00 	.word	0xe0000e00

080008c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e00a      	b.n	80008f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008da:	f3af 8000 	nop.w
 80008de:	4601      	mov	r1, r0
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	60ba      	str	r2, [r7, #8]
 80008e6:	b2ca      	uxtb	r2, r1
 80008e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	3301      	adds	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dbf0      	blt.n	80008da <_read+0x12>
	}

return len;
 80008f8:	687b      	ldr	r3, [r7, #4]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e009      	b.n	8000928 <_write+0x26>
	{
		//__io_putchar(*ptr++);
				ITM_SendChar(*ptr++);
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ffab 	bl	8000878 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf1      	blt.n	8000914 <_write+0x12>
	}
	return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_close>:

int _close(int file)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	return -1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000962:	605a      	str	r2, [r3, #4]
	return 0;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_isatty>:

int _isatty(int file)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
	return 1;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ce:	490e      	ldr	r1, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f2:	f7ff ffd7 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f6:	f003 fbcf 	bl	8004198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fde3 	bl	80005c4 <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a0c:	08004d10 	.word	0x08004d10
  ldr r2, =_sbss
 8000a10:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a14:	20012ea4 	.word	0x20012ea4

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f8d8 	bl	8000bfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f7ff fe9c 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe72 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	200000e4 	.word	0x200000e4

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	200000e4 	.word	0x200000e4

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <__NVIC_EnableIRQ+0x38>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ff4c 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c22:	f7ff ff61 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f7ff ffb1 	bl	8000b94 <NVIC_EncodePriority>
 8000c32:	4602      	mov	r2, r0
 8000c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff80 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff54 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e267      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d075      	beq.n	8000d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c82:	4b88      	ldr	r3, [pc, #544]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f003 030c 	and.w	r3, r3, #12
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d00c      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c8e:	4b85      	ldr	r3, [pc, #532]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d112      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c9a:	4b82      	ldr	r3, [pc, #520]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ca6:	d10b      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca8:	4b7e      	ldr	r3, [pc, #504]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d05b      	beq.n	8000d6c <HAL_RCC_OscConfig+0x108>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d157      	bne.n	8000d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e242      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc8:	d106      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x74>
 8000cca:	4b76      	ldr	r3, [pc, #472]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a75      	ldr	r2, [pc, #468]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e01d      	b.n	8000d14 <HAL_RCC_OscConfig+0xb0>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0x98>
 8000ce2:	4b70      	ldr	r3, [pc, #448]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a6f      	ldr	r2, [pc, #444]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a6c      	ldr	r2, [pc, #432]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e00b      	b.n	8000d14 <HAL_RCC_OscConfig+0xb0>
 8000cfc:	4b69      	ldr	r3, [pc, #420]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a68      	ldr	r2, [pc, #416]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b66      	ldr	r3, [pc, #408]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a65      	ldr	r2, [pc, #404]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff feb4 	bl	8000a88 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff feb0 	bl	8000a88 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e207      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0xc0>
 8000d42:	e014      	b.n	8000d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fea0 	bl	8000a88 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fe9c 	bl	8000a88 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	; 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e1f3      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	4b51      	ldr	r3, [pc, #324]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0xe8>
 8000d6a:	e000      	b.n	8000d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d063      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00b      	beq.n	8000d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d11c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d116      	bne.n	8000dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_RCC_OscConfig+0x152>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e1c7      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4937      	ldr	r1, [pc, #220]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dca:	e03a      	b.n	8000e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d020      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd4:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <HAL_RCC_OscConfig+0x244>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dda:	f7ff fe55 	bl	8000a88 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de2:	f7ff fe51 	bl	8000a88 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e1a8      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df4:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4925      	ldr	r1, [pc, #148]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000e10:	4313      	orrs	r3, r2
 8000e12:	600b      	str	r3, [r1, #0]
 8000e14:	e015      	b.n	8000e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e16:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_RCC_OscConfig+0x244>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fe34 	bl	8000a88 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff fe30 	bl	8000a88 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e187      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d036      	beq.n	8000ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d016      	beq.n	8000e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_RCC_OscConfig+0x248>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fe14 	bl	8000a88 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff fe10 	bl	8000a88 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e167      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_RCC_OscConfig+0x240>)
 8000e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f0      	beq.n	8000e64 <HAL_RCC_OscConfig+0x200>
 8000e82:	e01b      	b.n	8000ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_RCC_OscConfig+0x248>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fdfd 	bl	8000a88 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e90:	e00e      	b.n	8000eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e92:	f7ff fdf9 	bl	8000a88 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d907      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e150      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	42470000 	.word	0x42470000
 8000eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb0:	4b88      	ldr	r3, [pc, #544]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1ea      	bne.n	8000e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 8097 	beq.w	8000ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ece:	4b81      	ldr	r3, [pc, #516]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10f      	bne.n	8000efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b7d      	ldr	r3, [pc, #500]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a7c      	ldr	r2, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b7a      	ldr	r3, [pc, #488]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efa:	4b77      	ldr	r3, [pc, #476]	; (80010d8 <HAL_RCC_OscConfig+0x474>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d118      	bne.n	8000f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f06:	4b74      	ldr	r3, [pc, #464]	; (80010d8 <HAL_RCC_OscConfig+0x474>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a73      	ldr	r2, [pc, #460]	; (80010d8 <HAL_RCC_OscConfig+0x474>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fdb9 	bl	8000a88 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1a:	f7ff fdb5 	bl	8000a88 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e10c      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2c:	4b6a      	ldr	r3, [pc, #424]	; (80010d8 <HAL_RCC_OscConfig+0x474>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f0      	beq.n	8000f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d106      	bne.n	8000f4e <HAL_RCC_OscConfig+0x2ea>
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f44:	4a63      	ldr	r2, [pc, #396]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f4c:	e01c      	b.n	8000f88 <HAL_RCC_OscConfig+0x324>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x30c>
 8000f56:	4b5f      	ldr	r3, [pc, #380]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5a:	4a5e      	ldr	r2, [pc, #376]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6713      	str	r3, [r2, #112]	; 0x70
 8000f62:	4b5c      	ldr	r3, [pc, #368]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f66:	4a5b      	ldr	r2, [pc, #364]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6e:	e00b      	b.n	8000f88 <HAL_RCC_OscConfig+0x324>
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f7c:	4b55      	ldr	r3, [pc, #340]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f80:	4a54      	ldr	r2, [pc, #336]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000f82:	f023 0304 	bic.w	r3, r3, #4
 8000f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d015      	beq.n	8000fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f90:	f7ff fd7a 	bl	8000a88 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f96:	e00a      	b.n	8000fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f98:	f7ff fd76 	bl	8000a88 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e0cb      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fae:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0ee      	beq.n	8000f98 <HAL_RCC_OscConfig+0x334>
 8000fba:	e014      	b.n	8000fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fd64 	bl	8000a88 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc2:	e00a      	b.n	8000fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fd60 	bl	8000a88 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e0b5      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1ee      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d105      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a38      	ldr	r2, [pc, #224]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8000ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a1 	beq.w	8001144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b08      	cmp	r3, #8
 800100c:	d05c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d141      	bne.n	800109a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <HAL_RCC_OscConfig+0x478>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fd34 	bl	8000a88 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff fd30 	bl	8000a88 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e087      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69da      	ldr	r2, [r3, #28]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	019b      	lsls	r3, r3, #6
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	3b01      	subs	r3, #1
 800105c:	041b      	lsls	r3, r3, #16
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	491b      	ldr	r1, [pc, #108]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_RCC_OscConfig+0x478>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fd09 	bl	8000a88 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107a:	f7ff fd05 	bl	8000a88 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e05c      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x416>
 8001098:	e054      	b.n	8001144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_RCC_OscConfig+0x478>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fcf2 	bl	8000a88 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a8:	f7ff fcee 	bl	8000a88 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e045      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_RCC_OscConfig+0x470>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x444>
 80010c6:	e03d      	b.n	8001144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d107      	bne.n	80010e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e038      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000
 80010dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_RCC_OscConfig+0x4ec>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d028      	beq.n	8001140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d121      	bne.n	8001140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001106:	429a      	cmp	r2, r3
 8001108:	d11a      	bne.n	8001140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001110:	4013      	ands	r3, r2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001118:	4293      	cmp	r3, r2
 800111a:	d111      	bne.n	8001140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	3b01      	subs	r3, #1
 800112a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800112c:	429a      	cmp	r2, r3
 800112e:	d107      	bne.n	8001140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0cc      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001168:	4b68      	ldr	r3, [pc, #416]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d90c      	bls.n	8001190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b65      	ldr	r3, [pc, #404]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0b8      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a8:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a58      	ldr	r2, [pc, #352]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c0:	4b53      	ldr	r3, [pc, #332]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011cc:	4b50      	ldr	r3, [pc, #320]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	494d      	ldr	r1, [pc, #308]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d044      	beq.n	8001274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d119      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e07f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d003      	beq.n	8001212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120e:	2b03      	cmp	r3, #3
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e067      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f023 0203 	bic.w	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4934      	ldr	r1, [pc, #208]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	4313      	orrs	r3, r2
 8001242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001244:	f7ff fc20 	bl	8000a88 <HAL_GetTick>
 8001248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	e00a      	b.n	8001262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124c:	f7ff fc1c 	bl	8000a88 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f241 3288 	movw	r2, #5000	; 0x1388
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e04f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 020c 	and.w	r2, r3, #12
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	429a      	cmp	r2, r3
 8001272:	d1eb      	bne.n	800124c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d20c      	bcs.n	800129c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e032      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4916      	ldr	r1, [pc, #88]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	490e      	ldr	r1, [pc, #56]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012da:	f000 f821 	bl	8001320 <HAL_RCC_GetSysClockFreq>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	490a      	ldr	r1, [pc, #40]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	5ccb      	ldrb	r3, [r1, r3]
 80012ee:	fa22 f303 	lsr.w	r3, r2, r3
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_RCC_ClockConfig+0x1c8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fa44 	bl	8000788 <HAL_InitTick>

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00
 8001310:	40023800 	.word	0x40023800
 8001314:	08004c84 	.word	0x08004c84
 8001318:	20000000 	.word	0x20000000
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001324:	b090      	sub	sp, #64	; 0x40
 8001326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
 800132c:	2300      	movs	r3, #0
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001338:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b08      	cmp	r3, #8
 8001342:	d00d      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0x40>
 8001344:	2b08      	cmp	r3, #8
 8001346:	f200 80a1 	bhi.w	800148c <HAL_RCC_GetSysClockFreq+0x16c>
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <HAL_RCC_GetSysClockFreq+0x34>
 800134e:	2b04      	cmp	r3, #4
 8001350:	d003      	beq.n	800135a <HAL_RCC_GetSysClockFreq+0x3a>
 8001352:	e09b      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001358:	e09b      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800135e:	e098      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001360:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800136a:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d028      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001376:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	099b      	lsrs	r3, r3, #6
 800137c:	2200      	movs	r2, #0
 800137e:	623b      	str	r3, [r7, #32]
 8001380:	627a      	str	r2, [r7, #36]	; 0x24
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001388:	2100      	movs	r1, #0
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800138c:	fb03 f201 	mul.w	r2, r3, r1
 8001390:	2300      	movs	r3, #0
 8001392:	fb00 f303 	mul.w	r3, r0, r3
 8001396:	4413      	add	r3, r2
 8001398:	4a43      	ldr	r2, [pc, #268]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800139a:	fba0 1202 	umull	r1, r2, r0, r2
 800139e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013a0:	460a      	mov	r2, r1
 80013a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80013a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a6:	4413      	add	r3, r2
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	2200      	movs	r2, #0
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	61fa      	str	r2, [r7, #28]
 80013b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013ba:	f7fe ff09 	bl	80001d0 <__aeabi_uldivmod>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4613      	mov	r3, r2
 80013c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013c6:	e053      	b.n	8001470 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c8:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	2200      	movs	r2, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	617a      	str	r2, [r7, #20]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013da:	f04f 0b00 	mov.w	fp, #0
 80013de:	4652      	mov	r2, sl
 80013e0:	465b      	mov	r3, fp
 80013e2:	f04f 0000 	mov.w	r0, #0
 80013e6:	f04f 0100 	mov.w	r1, #0
 80013ea:	0159      	lsls	r1, r3, #5
 80013ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013f0:	0150      	lsls	r0, r2, #5
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	ebb2 080a 	subs.w	r8, r2, sl
 80013fa:	eb63 090b 	sbc.w	r9, r3, fp
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800140a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800140e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001412:	ebb2 0408 	subs.w	r4, r2, r8
 8001416:	eb63 0509 	sbc.w	r5, r3, r9
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	00eb      	lsls	r3, r5, #3
 8001424:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001428:	00e2      	lsls	r2, r4, #3
 800142a:	4614      	mov	r4, r2
 800142c:	461d      	mov	r5, r3
 800142e:	eb14 030a 	adds.w	r3, r4, sl
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	eb45 030b 	adc.w	r3, r5, fp
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001446:	4629      	mov	r1, r5
 8001448:	028b      	lsls	r3, r1, #10
 800144a:	4621      	mov	r1, r4
 800144c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001450:	4621      	mov	r1, r4
 8001452:	028a      	lsls	r2, r1, #10
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145a:	2200      	movs	r2, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	60fa      	str	r2, [r7, #12]
 8001460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001464:	f7fe feb4 	bl	80001d0 <__aeabi_uldivmod>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4613      	mov	r3, r2
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	0c1b      	lsrs	r3, r3, #16
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	3301      	adds	r3, #1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001480:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	fbb2 f3f3 	udiv	r3, r2, r3
 8001488:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800148a:	e002      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001494:	4618      	mov	r0, r3
 8001496:	3740      	adds	r7, #64	; 0x40
 8001498:	46bd      	mov	sp, r7
 800149a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	00f42400 	.word	0x00f42400
 80014a8:	017d7840 	.word	0x017d7840

080014ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000

080014c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014c8:	f7ff fff0 	bl	80014ac <HAL_RCC_GetHCLKFreq>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	0a9b      	lsrs	r3, r3, #10
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	4903      	ldr	r1, [pc, #12]	; (80014e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014da:	5ccb      	ldrb	r3, [r1, r3]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	08004c94 	.word	0x08004c94

080014ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	220f      	movs	r2, #15
 80014fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_RCC_GetClockConfig+0x5c>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_RCC_GetClockConfig+0x5c>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_GetClockConfig+0x5c>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_GetClockConfig+0x5c>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	08db      	lsrs	r3, r3, #3
 8001526:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_RCC_GetClockConfig+0x60>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40023c00 	.word	0x40023c00

08001550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e041      	b.n	80015e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f839 	bl	80015ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3304      	adds	r3, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f000 f9d8 	bl	8001944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d001      	beq.n	800161c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e04e      	b.n	80016ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d022      	beq.n	8001684 <HAL_TIM_Base_Start_IT+0x80>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001646:	d01d      	beq.n	8001684 <HAL_TIM_Base_Start_IT+0x80>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <HAL_TIM_Base_Start_IT+0xc8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d018      	beq.n	8001684 <HAL_TIM_Base_Start_IT+0x80>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d013      	beq.n	8001684 <HAL_TIM_Base_Start_IT+0x80>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d00e      	beq.n	8001684 <HAL_TIM_Base_Start_IT+0x80>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d009      	beq.n	8001684 <HAL_TIM_Base_Start_IT+0x80>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <HAL_TIM_Base_Start_IT+0xd8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d004      	beq.n	8001684 <HAL_TIM_Base_Start_IT+0x80>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d111      	bne.n	80016a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b06      	cmp	r3, #6
 8001694:	d010      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016a6:	e007      	b.n	80016b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40000400 	.word	0x40000400
 80016d0:	40000800 	.word	0x40000800
 80016d4:	40000c00 	.word	0x40000c00
 80016d8:	40010400 	.word	0x40010400
 80016dc:	40014000 	.word	0x40014000
 80016e0:	40001800 	.word	0x40001800

080016e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d122      	bne.n	8001740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b02      	cmp	r3, #2
 8001706:	d11b      	bne.n	8001740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f06f 0202 	mvn.w	r2, #2
 8001710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f8ee 	bl	8001908 <HAL_TIM_IC_CaptureCallback>
 800172c:	e005      	b.n	800173a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f8e0 	bl	80018f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f8f1 	bl	800191c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b04      	cmp	r3, #4
 800174c:	d122      	bne.n	8001794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b04      	cmp	r3, #4
 800175a:	d11b      	bne.n	8001794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0204 	mvn.w	r2, #4
 8001764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2202      	movs	r2, #2
 800176a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8c4 	bl	8001908 <HAL_TIM_IC_CaptureCallback>
 8001780:	e005      	b.n	800178e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8b6 	bl	80018f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8c7 	bl	800191c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d122      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d11b      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0208 	mvn.w	r2, #8
 80017b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2204      	movs	r2, #4
 80017be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f89a 	bl	8001908 <HAL_TIM_IC_CaptureCallback>
 80017d4:	e005      	b.n	80017e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f88c 	bl	80018f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f89d 	bl	800191c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d122      	bne.n	800183c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	2b10      	cmp	r3, #16
 8001802:	d11b      	bne.n	800183c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0210 	mvn.w	r2, #16
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2208      	movs	r2, #8
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f870 	bl	8001908 <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f862 	bl	80018f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f873 	bl	800191c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10e      	bne.n	8001868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0201 	mvn.w	r2, #1
 8001860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe ff50 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b80      	cmp	r3, #128	; 0x80
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d107      	bne.n	8001894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800188c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f902 	bl	8001a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b40      	cmp	r3, #64	; 0x40
 80018a0:	d10e      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ac:	2b40      	cmp	r3, #64	; 0x40
 80018ae:	d107      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f838 	bl	8001930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d10e      	bne.n	80018ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d107      	bne.n	80018ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f06f 0220 	mvn.w	r2, #32
 80018e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f8cc 	bl	8001a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <TIM_Base_SetConfig+0x114>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <TIM_Base_SetConfig+0x40>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001962:	d00f      	beq.n	8001984 <TIM_Base_SetConfig+0x40>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3d      	ldr	r2, [pc, #244]	; (8001a5c <TIM_Base_SetConfig+0x118>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00b      	beq.n	8001984 <TIM_Base_SetConfig+0x40>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <TIM_Base_SetConfig+0x11c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <TIM_Base_SetConfig+0x40>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <TIM_Base_SetConfig+0x120>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d003      	beq.n	8001984 <TIM_Base_SetConfig+0x40>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <TIM_Base_SetConfig+0x124>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d108      	bne.n	8001996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <TIM_Base_SetConfig+0x114>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d02b      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d027      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a2c      	ldr	r2, [pc, #176]	; (8001a5c <TIM_Base_SetConfig+0x118>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d023      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a2b      	ldr	r2, [pc, #172]	; (8001a60 <TIM_Base_SetConfig+0x11c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01f      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <TIM_Base_SetConfig+0x120>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01b      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <TIM_Base_SetConfig+0x124>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d017      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <TIM_Base_SetConfig+0x128>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <TIM_Base_SetConfig+0x12c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00f      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <TIM_Base_SetConfig+0x130>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00b      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <TIM_Base_SetConfig+0x134>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <TIM_Base_SetConfig+0x138>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d003      	beq.n	80019f6 <TIM_Base_SetConfig+0xb2>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <TIM_Base_SetConfig+0x13c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d108      	bne.n	8001a08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <TIM_Base_SetConfig+0x114>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d003      	beq.n	8001a3c <TIM_Base_SetConfig+0xf8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <TIM_Base_SetConfig+0x124>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d103      	bne.n	8001a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	615a      	str	r2, [r3, #20]
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40000800 	.word	0x40000800
 8001a64:	40000c00 	.word	0x40000c00
 8001a68:	40010400 	.word	0x40010400
 8001a6c:	40014000 	.word	0x40014000
 8001a70:	40014400 	.word	0x40014400
 8001a74:	40014800 	.word	0x40014800
 8001a78:	40001800 	.word	0x40001800
 8001a7c:	40001c00 	.word	0x40001c00
 8001a80:	40002000 	.word	0x40002000

08001a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f103 0208 	add.w	r2, r3, #8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f103 0208 	add.w	r2, r3, #8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f103 0208 	add.w	r2, r3, #8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d103      	bne.n	8001b6e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	e00c      	b.n	8001b88 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3308      	adds	r3, #8
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	e002      	b.n	8001b7c <vListInsert+0x2e>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d2f6      	bcs.n	8001b76 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6892      	ldr	r2, [r2, #8]
 8001bd6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6852      	ldr	r2, [r2, #4]
 8001be0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d103      	bne.n	8001bf4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1e5a      	subs	r2, r3, #1
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10a      	bne.n	8001c3e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2c:	f383 8811 	msr	BASEPRI, r3
 8001c30:	f3bf 8f6f 	isb	sy
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001c3a:	bf00      	nop
 8001c3c:	e7fe      	b.n	8001c3c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001c3e:	f001 ff8b 	bl	8003b58 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	441a      	add	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	441a      	add	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	22ff      	movs	r2, #255	; 0xff
 8001c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	22ff      	movs	r2, #255	; 0xff
 8001c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d114      	bne.n	8001cbe <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01a      	beq.n	8001cd2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3310      	adds	r3, #16
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 f881 	bl	8002da8 <xTaskRemoveFromEventList>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d012      	beq.n	8001cd2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <xQueueGenericReset+0xcc>)
 8001cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	e009      	b.n	8001cd2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3310      	adds	r3, #16
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fef2 	bl	8001aac <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3324      	adds	r3, #36	; 0x24
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff feed 	bl	8001aac <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001cd2:	f001 ff71 	bl	8003bb8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	e000ed04 	.word	0xe000ed04

08001ce4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <xQueueGenericCreate+0x2a>
        __asm volatile
 8001cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	61bb      	str	r3, [r7, #24]
    }
 8001d0a:	bf00      	nop
 8001d0c:	e7fe      	b.n	8001d0c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <xQueueGenericCreate+0x48>
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d101      	bne.n	8001d30 <xQueueGenericCreate+0x4c>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <xQueueGenericCreate+0x4e>
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <xQueueGenericCreate+0x68>
        __asm volatile
 8001d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3a:	f383 8811 	msr	BASEPRI, r3
 8001d3e:	f3bf 8f6f 	isb	sy
 8001d42:	f3bf 8f4f 	dsb	sy
 8001d46:	617b      	str	r3, [r7, #20]
    }
 8001d48:	bf00      	nop
 8001d4a:	e7fe      	b.n	8001d4a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001d52:	d90a      	bls.n	8001d6a <xQueueGenericCreate+0x86>
        __asm volatile
 8001d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d58:	f383 8811 	msr	BASEPRI, r3
 8001d5c:	f3bf 8f6f 	isb	sy
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	613b      	str	r3, [r7, #16]
    }
 8001d66:	bf00      	nop
 8001d68:	e7fe      	b.n	8001d68 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	3350      	adds	r3, #80	; 0x50
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 f814 	bl	8003d9c <pvPortMalloc>
 8001d74:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3350      	adds	r3, #80	; 0x50
 8001d84:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d86:	79fa      	ldrb	r2, [r7, #7]
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f805 	bl	8001da2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d98:	6a3b      	ldr	r3, [r7, #32]
    }
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e002      	b.n	8001dc4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	69b8      	ldr	r0, [r7, #24]
 8001dd4:	f7ff ff1e 	bl	8001c14 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08e      	sub	sp, #56	; 0x38
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <xQueueGenericSend+0x32>
        __asm volatile
 8001e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e08:	f383 8811 	msr	BASEPRI, r3
 8001e0c:	f3bf 8f6f 	isb	sy
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001e16:	bf00      	nop
 8001e18:	e7fe      	b.n	8001e18 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d103      	bne.n	8001e28 <xQueueGenericSend+0x40>
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <xQueueGenericSend+0x44>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <xQueueGenericSend+0x46>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <xQueueGenericSend+0x60>
        __asm volatile
 8001e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e36:	f383 8811 	msr	BASEPRI, r3
 8001e3a:	f3bf 8f6f 	isb	sy
 8001e3e:	f3bf 8f4f 	dsb	sy
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001e44:	bf00      	nop
 8001e46:	e7fe      	b.n	8001e46 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d103      	bne.n	8001e56 <xQueueGenericSend+0x6e>
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <xQueueGenericSend+0x72>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <xQueueGenericSend+0x74>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <xQueueGenericSend+0x8e>
        __asm volatile
 8001e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e64:	f383 8811 	msr	BASEPRI, r3
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	623b      	str	r3, [r7, #32]
    }
 8001e72:	bf00      	nop
 8001e74:	e7fe      	b.n	8001e74 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e76:	f001 f933 	bl	80030e0 <xTaskGetSchedulerState>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <xQueueGenericSend+0x9e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <xQueueGenericSend+0xa2>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <xQueueGenericSend+0xa4>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <xQueueGenericSend+0xbe>
        __asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	61fb      	str	r3, [r7, #28]
    }
 8001ea2:	bf00      	nop
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001ea6:	f001 fe57 	bl	8003b58 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <xQueueGenericSend+0xd4>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d129      	bne.n	8001f10 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ec2:	f000 fa19 	bl	80022f8 <prvCopyDataToQueue>
 8001ec6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d010      	beq.n	8001ef2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	3324      	adds	r3, #36	; 0x24
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 ff67 	bl	8002da8 <xTaskRemoveFromEventList>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <xQueueGenericSend+0x1f8>)
 8001ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	e00a      	b.n	8001f08 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <xQueueGenericSend+0x1f8>)
 8001efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001f08:	f001 fe56 	bl	8003bb8 <vPortExitCritical>
                return pdPASS;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e063      	b.n	8001fd8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f16:	f001 fe4f 	bl	8003bb8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e05c      	b.n	8001fd8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 ff9f 	bl	8002e6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f32:	f001 fe41 	bl	8003bb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f36:	f000 fd19 	bl	800296c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f3a:	f001 fe0d 	bl	8003b58 <vPortEnterCritical>
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d103      	bne.n	8001f54 <xQueueGenericSend+0x16c>
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f5a:	b25b      	sxtb	r3, r3
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d103      	bne.n	8001f6a <xQueueGenericSend+0x182>
 8001f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f6a:	f001 fe25 	bl	8003bb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f6e:	1d3a      	adds	r2, r7, #4
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 ff8e 	bl	8002e98 <xTaskCheckForTimeOut>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d124      	bne.n	8001fcc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f84:	f000 fab0 	bl	80024e8 <prvIsQueueFull>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d018      	beq.n	8001fc0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	3310      	adds	r3, #16
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 feb6 	bl	8002d08 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f9e:	f000 fa3b 	bl	8002418 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001fa2:	f000 fcf1 	bl	8002988 <xTaskResumeAll>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f af7c 	bne.w	8001ea6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <xQueueGenericSend+0x1f8>)
 8001fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f3bf 8f4f 	dsb	sy
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	e772      	b.n	8001ea6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fc2:	f000 fa29 	bl	8002418 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001fc6:	f000 fcdf 	bl	8002988 <xTaskResumeAll>
 8001fca:	e76c      	b.n	8001ea6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fce:	f000 fa23 	bl	8002418 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001fd2:	f000 fcd9 	bl	8002988 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001fd6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3738      	adds	r7, #56	; 0x38
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	e000ed04 	.word	0xe000ed04

08001fe4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b090      	sub	sp, #64	; 0x40
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800200e:	bf00      	nop
 8002010:	e7fe      	b.n	8002010 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <xQueueGenericSendFromISR+0x3c>
 8002018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <xQueueGenericSendFromISR+0x40>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <xQueueGenericSendFromISR+0x42>
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800202a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
 8002036:	f3bf 8f4f 	dsb	sy
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800203c:	bf00      	nop
 800203e:	e7fe      	b.n	800203e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d103      	bne.n	800204e <xQueueGenericSendFromISR+0x6a>
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <xQueueGenericSendFromISR+0x6e>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <xQueueGenericSendFromISR+0x70>
 8002052:	2300      	movs	r3, #0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10a      	bne.n	800206e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	623b      	str	r3, [r7, #32]
    }
 800206a:	bf00      	nop
 800206c:	e7fe      	b.n	800206c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800206e:	f001 fe55 	bl	8003d1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002072:	f3ef 8211 	mrs	r2, BASEPRI
 8002076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207a:	f383 8811 	msr	BASEPRI, r3
 800207e:	f3bf 8f6f 	isb	sy
 8002082:	f3bf 8f4f 	dsb	sy
 8002086:	61fa      	str	r2, [r7, #28]
 8002088:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800208a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <xQueueGenericSendFromISR+0xbc>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d13e      	bne.n	800211e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80020a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020b6:	f000 f91f 	bl	80022f8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80020ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d112      	bne.n	80020ea <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d025      	beq.n	8002118 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ce:	3324      	adds	r3, #36	; 0x24
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fe69 	bl	8002da8 <xTaskRemoveFromEventList>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01d      	beq.n	8002118 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01a      	beq.n	8002118 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e016      	b.n	8002118 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80020ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020ee:	2b7f      	cmp	r3, #127	; 0x7f
 80020f0:	d10a      	bne.n	8002108 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80020f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f6:	f383 8811 	msr	BASEPRI, r3
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	617b      	str	r3, [r7, #20]
    }
 8002104:	bf00      	nop
 8002106:	e7fe      	b.n	8002106 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800210c:	3301      	adds	r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	b25a      	sxtb	r2, r3
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002118:	2301      	movs	r3, #1
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800211c:	e001      	b.n	8002122 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800211e:	2300      	movs	r3, #0
 8002120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800212c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800212e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002130:	4618      	mov	r0, r3
 8002132:	3740      	adds	r7, #64	; 0x40
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	; 0x30
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <xQueueReceive+0x30>
        __asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	623b      	str	r3, [r7, #32]
    }
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <xQueueReceive+0x3e>
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <xQueueReceive+0x42>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <xQueueReceive+0x44>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <xQueueReceive+0x5e>
        __asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	61fb      	str	r3, [r7, #28]
    }
 8002192:	bf00      	nop
 8002194:	e7fe      	b.n	8002194 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002196:	f000 ffa3 	bl	80030e0 <xTaskGetSchedulerState>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <xQueueReceive+0x6e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <xQueueReceive+0x72>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <xQueueReceive+0x74>
 80021aa:	2300      	movs	r3, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xQueueReceive+0x8e>
        __asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	61bb      	str	r3, [r7, #24]
    }
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021c6:	f001 fcc7 	bl	8003b58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01f      	beq.n	8002216 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021da:	f000 f8f7 	bl	80023cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00f      	beq.n	800220e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	3310      	adds	r3, #16
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fdd8 	bl	8002da8 <xTaskRemoveFromEventList>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <xQueueReceive+0x1bc>)
 8002200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800220e:	f001 fcd3 	bl	8003bb8 <vPortExitCritical>
                return pdPASS;
 8002212:	2301      	movs	r3, #1
 8002214:	e069      	b.n	80022ea <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800221c:	f001 fccc 	bl	8003bb8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002220:	2300      	movs	r3, #0
 8002222:	e062      	b.n	80022ea <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fe1c 	bl	8002e6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002234:	2301      	movs	r3, #1
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002238:	f001 fcbe 	bl	8003bb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800223c:	f000 fb96 	bl	800296c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002240:	f001 fc8a 	bl	8003b58 <vPortEnterCritical>
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800224a:	b25b      	sxtb	r3, r3
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d103      	bne.n	800225a <xQueueReceive+0x122>
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002260:	b25b      	sxtb	r3, r3
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d103      	bne.n	8002270 <xQueueReceive+0x138>
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002270:	f001 fca2 	bl	8003bb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002274:	1d3a      	adds	r2, r7, #4
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fe0b 	bl	8002e98 <xTaskCheckForTimeOut>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d123      	bne.n	80022d0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800228a:	f000 f917 	bl	80024bc <prvIsQueueEmpty>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d017      	beq.n	80022c4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002296:	3324      	adds	r3, #36	; 0x24
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fd33 	bl	8002d08 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80022a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022a4:	f000 f8b8 	bl	8002418 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80022a8:	f000 fb6e 	bl	8002988 <xTaskResumeAll>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d189      	bne.n	80021c6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <xQueueReceive+0x1bc>)
 80022b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	e780      	b.n	80021c6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80022c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022c6:	f000 f8a7 	bl	8002418 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80022ca:	f000 fb5d 	bl	8002988 <xTaskResumeAll>
 80022ce:	e77a      	b.n	80021c6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80022d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d2:	f000 f8a1 	bl	8002418 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022d6:	f000 fb57 	bl	8002988 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022dc:	f000 f8ee 	bl	80024bc <prvIsQueueEmpty>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f43f af6f 	beq.w	80021c6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80022e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3730      	adds	r7, #48	; 0x30
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000ed04 	.word	0xe000ed04

080022f8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d14d      	bne.n	80023ba <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fefa 	bl	800311c <xTaskPriorityDisinherit>
 8002328:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	e043      	b.n	80023ba <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d119      	bne.n	800236c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6858      	ldr	r0, [r3, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	461a      	mov	r2, r3
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	f001 ff4c 	bl	80041e0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	441a      	add	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d32b      	bcc.n	80023ba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	e026      	b.n	80023ba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	68d8      	ldr	r0, [r3, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	461a      	mov	r2, r3
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	f001 ff32 	bl	80041e0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	425b      	negs	r3, r3
 8002386:	441a      	add	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	425b      	negs	r3, r3
 80023a2:	441a      	add	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d105      	bne.n	80023ba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80023c2:	697b      	ldr	r3, [r7, #20]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d018      	beq.n	8002410 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	441a      	add	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d303      	bcc.n	8002400 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68d9      	ldr	r1, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	461a      	mov	r2, r3
 800240a:	6838      	ldr	r0, [r7, #0]
 800240c:	f001 fee8 	bl	80041e0 <memcpy>
    }
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002420:	f001 fb9a 	bl	8003b58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800242a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800242c:	e011      	b.n	8002452 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d012      	beq.n	800245c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3324      	adds	r3, #36	; 0x24
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fcb4 	bl	8002da8 <xTaskRemoveFromEventList>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002446:	f000 fd8d 	bl	8002f64 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3b01      	subs	r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	dce9      	bgt.n	800242e <prvUnlockQueue+0x16>
 800245a:	e000      	b.n	800245e <prvUnlockQueue+0x46>
                        break;
 800245c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	22ff      	movs	r2, #255	; 0xff
 8002462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002466:	f001 fba7 	bl	8003bb8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800246a:	f001 fb75 	bl	8003b58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002474:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002476:	e011      	b.n	800249c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d012      	beq.n	80024a6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3310      	adds	r3, #16
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fc8f 	bl	8002da8 <xTaskRemoveFromEventList>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002490:	f000 fd68 	bl	8002f64 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002494:	7bbb      	ldrb	r3, [r7, #14]
 8002496:	3b01      	subs	r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800249c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	dce9      	bgt.n	8002478 <prvUnlockQueue+0x60>
 80024a4:	e000      	b.n	80024a8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80024a6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80024b0:	f001 fb82 	bl	8003bb8 <vPortExitCritical>
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80024c4:	f001 fb48 	bl	8003b58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e001      	b.n	80024da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80024da:	f001 fb6d 	bl	8003bb8 <vPortExitCritical>

    return xReturn;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80024f0:	f001 fb32 	bl	8003b58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d102      	bne.n	8002506 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002500:	2301      	movs	r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e001      	b.n	800250a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800250a:	f001 fb55 	bl	8003bb8 <vPortExitCritical>

    return xReturn;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e014      	b.n	8002552 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002528:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <vQueueAddToRegistry+0x50>)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002534:	490c      	ldr	r1, [pc, #48]	; (8002568 <vQueueAddToRegistry+0x50>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <vQueueAddToRegistry+0x50>)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800254a:	e006      	b.n	800255a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d9e7      	bls.n	8002528 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	200000e8 	.word	0x200000e8

0800256c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800257c:	f001 faec 	bl	8003b58 <vPortEnterCritical>
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002586:	b25b      	sxtb	r3, r3
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d103      	bne.n	8002596 <vQueueWaitForMessageRestricted+0x2a>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800259c:	b25b      	sxtb	r3, r3
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d103      	bne.n	80025ac <vQueueWaitForMessageRestricted+0x40>
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ac:	f001 fb04 	bl	8003bb8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d106      	bne.n	80025c6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3324      	adds	r3, #36	; 0x24
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fbc5 	bl	8002d50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff26 	bl	8002418 <prvUnlockQueue>
    }
 80025cc:	bf00      	nop
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af04      	add	r7, sp, #16
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 fbd7 	bl	8003d9c <pvPortMalloc>
 80025ee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00e      	beq.n	8002614 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025f6:	2058      	movs	r0, #88	; 0x58
 80025f8:	f001 fbd0 	bl	8003d9c <pvPortMalloc>
 80025fc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
 800260a:	e005      	b.n	8002618 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800260c:	6978      	ldr	r0, [r7, #20]
 800260e:	f001 fca5 	bl	8003f5c <vPortFree>
 8002612:	e001      	b.n	8002618 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d013      	beq.n	8002646 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	2300      	movs	r3, #0
 8002622:	9303      	str	r3, [sp, #12]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f80e 	bl	8002656 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800263a:	69f8      	ldr	r0, [r7, #28]
 800263c:	f000 f8a2 	bl	8002784 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002640:	2301      	movs	r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	e002      	b.n	800264c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800264c:	69bb      	ldr	r3, [r7, #24]
    }
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b088      	sub	sp, #32
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	461a      	mov	r2, r3
 800266e:	21a5      	movs	r1, #165	; 0xa5
 8002670:	f001 fdc4 	bl	80041fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800267e:	3b01      	subs	r3, #1
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f023 0307 	bic.w	r3, r3, #7
 800268c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <prvInitialiseNewTask+0x58>
        __asm volatile
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	617b      	str	r3, [r7, #20]
    }
 80026aa:	bf00      	nop
 80026ac:	e7fe      	b.n	80026ac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01f      	beq.n	80026f4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	e012      	b.n	80026e0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	7819      	ldrb	r1, [r3, #0]
 80026c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	3334      	adds	r3, #52	; 0x34
 80026ca:	460a      	mov	r2, r1
 80026cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d006      	beq.n	80026e8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b09      	cmp	r3, #9
 80026e4:	d9e9      	bls.n	80026ba <prvInitialiseNewTask+0x64>
 80026e6:	e000      	b.n	80026ea <prvInitialiseNewTask+0x94>
            {
                break;
 80026e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80026f2:	e003      	b.n	80026fc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d901      	bls.n	8002706 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002702:	2304      	movs	r3, #4
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002710:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	2200      	movs	r2, #0
 8002716:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	3304      	adds	r3, #4
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff f9e5 	bl	8001aec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	3318      	adds	r3, #24
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f9e0 	bl	8001aec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002730:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	f1c3 0205 	rsb	r2, r3, #5
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	3350      	adds	r3, #80	; 0x50
 8002746:	2204      	movs	r2, #4
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f001 fd56 	bl	80041fc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	3354      	adds	r3, #84	; 0x54
 8002754:	2201      	movs	r2, #1
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f001 fd4f 	bl	80041fc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	68f9      	ldr	r1, [r7, #12]
 8002762:	69b8      	ldr	r0, [r7, #24]
 8002764:	f001 f8cc 	bl	8003900 <pxPortInitialiseStack>
 8002768:	4602      	mov	r2, r0
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002778:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800277a:	bf00      	nop
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800278c:	f001 f9e4 	bl	8003b58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <prvAddNewTaskToReadyList+0xc0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	4a2b      	ldr	r2, [pc, #172]	; (8002844 <prvAddNewTaskToReadyList+0xc0>)
 8002798:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800279a:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <prvAddNewTaskToReadyList+0xc4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027a2:	4a29      	ldr	r2, [pc, #164]	; (8002848 <prvAddNewTaskToReadyList+0xc4>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027a8:	4b26      	ldr	r3, [pc, #152]	; (8002844 <prvAddNewTaskToReadyList+0xc0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d110      	bne.n	80027d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80027b0:	f000 fbfc 	bl	8002fac <prvInitialiseTaskLists>
 80027b4:	e00d      	b.n	80027d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80027b6:	4b25      	ldr	r3, [pc, #148]	; (800284c <prvAddNewTaskToReadyList+0xc8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <prvAddNewTaskToReadyList+0xc4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d802      	bhi.n	80027d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80027cc:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <prvAddNewTaskToReadyList+0xc4>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <prvAddNewTaskToReadyList+0xcc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <prvAddNewTaskToReadyList+0xcc>)
 80027da:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <prvAddNewTaskToReadyList+0xcc>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <prvAddNewTaskToReadyList+0xd0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <prvAddNewTaskToReadyList+0xd0>)
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4a15      	ldr	r2, [pc, #84]	; (8002858 <prvAddNewTaskToReadyList+0xd4>)
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3304      	adds	r3, #4
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f7ff f97a 	bl	8001b06 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002812:	f001 f9d1 	bl	8003bb8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <prvAddNewTaskToReadyList+0xc8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <prvAddNewTaskToReadyList+0xc4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d207      	bcs.n	800283c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <prvAddNewTaskToReadyList+0xd8>)
 800282e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000200 	.word	0x20000200
 8002848:	20000128 	.word	0x20000128
 800284c:	2000020c 	.word	0x2000020c
 8002850:	2000021c 	.word	0x2000021c
 8002854:	20000208 	.word	0x20000208
 8002858:	2000012c 	.word	0x2000012c
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d017      	beq.n	80028a2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <vTaskDelay+0x60>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <vTaskDelay+0x30>
        __asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	60bb      	str	r3, [r7, #8]
    }
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002890:	f000 f86c 	bl	800296c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002894:	2100      	movs	r1, #0
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fcba 	bl	8003210 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800289c:	f000 f874 	bl	8002988 <xTaskResumeAll>
 80028a0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <vTaskDelay+0x64>)
 80028aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000228 	.word	0x20000228
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <vTaskStartScheduler+0x88>)
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	2300      	movs	r3, #0
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2300      	movs	r3, #0
 80028d8:	2282      	movs	r2, #130	; 0x82
 80028da:	491e      	ldr	r1, [pc, #120]	; (8002954 <vTaskStartScheduler+0x8c>)
 80028dc:	481e      	ldr	r0, [pc, #120]	; (8002958 <vTaskStartScheduler+0x90>)
 80028de:	f7ff fe79 	bl	80025d4 <xTaskCreate>
 80028e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80028ea:	f000 fcf7 	bl	80032dc <xTimerCreateTimerTask>
 80028ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d116      	bne.n	8002924 <vTaskStartScheduler+0x5c>
        __asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	60bb      	str	r3, [r7, #8]
    }
 8002908:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <vTaskStartScheduler+0x94>)
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <vTaskStartScheduler+0x98>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <vTaskStartScheduler+0x9c>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800291e:	f001 f879 	bl	8003a14 <xPortStartScheduler>
 8002922:	e00e      	b.n	8002942 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d10a      	bne.n	8002942 <vTaskStartScheduler+0x7a>
        __asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	607b      	str	r3, [r7, #4]
    }
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <vTaskStartScheduler+0xa0>)
 8002944:	681b      	ldr	r3, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000224 	.word	0x20000224
 8002954:	08004c6c 	.word	0x08004c6c
 8002958:	08002f7d 	.word	0x08002f7d
 800295c:	20000220 	.word	0x20000220
 8002960:	2000020c 	.word	0x2000020c
 8002964:	20000204 	.word	0x20000204
 8002968:	2000000c 	.word	0x2000000c

0800296c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <vTaskSuspendAll+0x18>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	4a03      	ldr	r2, [pc, #12]	; (8002984 <vTaskSuspendAll+0x18>)
 8002978:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20000228 	.word	0x20000228

08002988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <xTaskResumeAll+0x114>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	603b      	str	r3, [r7, #0]
    }
 80029b0:	bf00      	nop
 80029b2:	e7fe      	b.n	80029b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80029b4:	f001 f8d0 	bl	8003b58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <xTaskResumeAll+0x114>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3b01      	subs	r3, #1
 80029be:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <xTaskResumeAll+0x114>)
 80029c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <xTaskResumeAll+0x114>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d161      	bne.n	8002a8e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029ca:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <xTaskResumeAll+0x118>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d05d      	beq.n	8002a8e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029d2:	e02e      	b.n	8002a32 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <xTaskResumeAll+0x11c>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3318      	adds	r3, #24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f8ed 	bl	8001bc0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3304      	adds	r3, #4
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f8e8 	bl	8001bc0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <xTaskResumeAll+0x120>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <xTaskResumeAll+0x120>)
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4a27      	ldr	r2, [pc, #156]	; (8002aac <xTaskResumeAll+0x124>)
 8002a10:	441a      	add	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3304      	adds	r3, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f7ff f874 	bl	8001b06 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a22:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <xTaskResumeAll+0x128>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <xTaskResumeAll+0x12c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <xTaskResumeAll+0x11c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1cc      	bne.n	80029d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a40:	f000 fb32 	bl	80030a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <xTaskResumeAll+0x130>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a50:	f000 f846 	bl	8002ae0 <xTaskIncrementTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <xTaskResumeAll+0x12c>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f1      	bne.n	8002a50 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <xTaskResumeAll+0x130>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <xTaskResumeAll+0x12c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <xTaskResumeAll+0x134>)
 8002a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a8e:	f001 f893 	bl	8003bb8 <vPortExitCritical>

    return xAlreadyYielded;
 8002a92:	68bb      	ldr	r3, [r7, #8]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000228 	.word	0x20000228
 8002aa0:	20000200 	.word	0x20000200
 8002aa4:	200001c0 	.word	0x200001c0
 8002aa8:	20000208 	.word	0x20000208
 8002aac:	2000012c 	.word	0x2000012c
 8002ab0:	20000128 	.word	0x20000128
 8002ab4:	20000214 	.word	0x20000214
 8002ab8:	20000210 	.word	0x20000210
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <xTaskGetTickCount+0x1c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000204 	.word	0x20000204

08002ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <xTaskIncrementTick+0x144>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 808e 	bne.w	8002c10 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002af4:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <xTaskIncrementTick+0x148>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002afc:	4a4a      	ldr	r2, [pc, #296]	; (8002c28 <xTaskIncrementTick+0x148>)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d120      	bne.n	8002b4a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b08:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <xTaskIncrementTick+0x14c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <xTaskIncrementTick+0x48>
        __asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	603b      	str	r3, [r7, #0]
    }
 8002b24:	bf00      	nop
 8002b26:	e7fe      	b.n	8002b26 <xTaskIncrementTick+0x46>
 8002b28:	4b40      	ldr	r3, [pc, #256]	; (8002c2c <xTaskIncrementTick+0x14c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <xTaskIncrementTick+0x150>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <xTaskIncrementTick+0x14c>)
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4a3e      	ldr	r2, [pc, #248]	; (8002c30 <xTaskIncrementTick+0x150>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <xTaskIncrementTick+0x154>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	4a3c      	ldr	r2, [pc, #240]	; (8002c34 <xTaskIncrementTick+0x154>)
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	f000 faaf 	bl	80030a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <xTaskIncrementTick+0x158>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d348      	bcc.n	8002be6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <xTaskIncrementTick+0x14c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <xTaskIncrementTick+0x158>)
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	601a      	str	r2, [r3, #0]
                    break;
 8002b66:	e03e      	b.n	8002be6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <xTaskIncrementTick+0x14c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d203      	bcs.n	8002b88 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b80:	4a2d      	ldr	r2, [pc, #180]	; (8002c38 <xTaskIncrementTick+0x158>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b86:	e02e      	b.n	8002be6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f817 	bl	8001bc0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	3318      	adds	r3, #24
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f80e 	bl	8001bc0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	2201      	movs	r2, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <xTaskIncrementTick+0x15c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <xTaskIncrementTick+0x15c>)
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <xTaskIncrementTick+0x160>)
 8002bc4:	441a      	add	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f7fe ff9a 	bl	8001b06 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <xTaskIncrementTick+0x164>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d3b9      	bcc.n	8002b54 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002be0:	2301      	movs	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be4:	e7b6      	b.n	8002b54 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <xTaskIncrementTick+0x164>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bec:	4914      	ldr	r1, [pc, #80]	; (8002c40 <xTaskIncrementTick+0x160>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d901      	bls.n	8002c02 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <xTaskIncrementTick+0x168>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e004      	b.n	8002c1a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <xTaskIncrementTick+0x16c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <xTaskIncrementTick+0x16c>)
 8002c18:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002c1a:	697b      	ldr	r3, [r7, #20]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000228 	.word	0x20000228
 8002c28:	20000204 	.word	0x20000204
 8002c2c:	200001b8 	.word	0x200001b8
 8002c30:	200001bc 	.word	0x200001bc
 8002c34:	20000218 	.word	0x20000218
 8002c38:	20000220 	.word	0x20000220
 8002c3c:	20000208 	.word	0x20000208
 8002c40:	2000012c 	.word	0x2000012c
 8002c44:	20000128 	.word	0x20000128
 8002c48:	20000214 	.word	0x20000214
 8002c4c:	20000210 	.word	0x20000210

08002c50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c56:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <vTaskSwitchContext+0xa4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <vTaskSwitchContext+0xa8>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002c64:	e03f      	b.n	8002ce6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <vTaskSwitchContext+0xa8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <vTaskSwitchContext+0xac>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c7a:	7afb      	ldrb	r3, [r7, #11]
 8002c7c:	f1c3 031f 	rsb	r3, r3, #31
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	491f      	ldr	r1, [pc, #124]	; (8002d00 <vTaskSwitchContext+0xb0>)
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	607b      	str	r3, [r7, #4]
    }
 8002ca8:	bf00      	nop
 8002caa:	e7fe      	b.n	8002caa <vTaskSwitchContext+0x5a>
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <vTaskSwitchContext+0xb0>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d104      	bne.n	8002cdc <vTaskSwitchContext+0x8c>
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <vTaskSwitchContext+0xb4>)
 8002ce4:	6013      	str	r3, [r2, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000228 	.word	0x20000228
 8002cf8:	20000214 	.word	0x20000214
 8002cfc:	20000208 	.word	0x20000208
 8002d00:	2000012c 	.word	0x2000012c
 8002d04:	20000128 	.word	0x20000128

08002d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	60fb      	str	r3, [r7, #12]
    }
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <vTaskPlaceOnEventList+0x44>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3318      	adds	r3, #24
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe ff09 	bl	8001b4e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	6838      	ldr	r0, [r7, #0]
 8002d40:	f000 fa66 	bl	8003210 <prvAddCurrentTaskToDelayedList>
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000128 	.word	0x20000128

08002d50 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	617b      	str	r3, [r7, #20]
    }
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <vTaskPlaceOnEventListRestricted+0x54>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	4619      	mov	r1, r3
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7fe fec0 	bl	8001b06 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	68b8      	ldr	r0, [r7, #8]
 8002d96:	f000 fa3b 	bl	8003210 <prvAddCurrentTaskToDelayedList>
    }
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000128 	.word	0x20000128

08002da8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	60fb      	str	r3, [r7, #12]
    }
 8002dd0:	bf00      	nop
 8002dd2:	e7fe      	b.n	8002dd2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fef1 	bl	8001bc0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <xTaskRemoveFromEventList+0xac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11c      	bne.n	8002e20 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fee8 	bl	8001bc0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	2201      	movs	r2, #1
 8002df6:	409a      	lsls	r2, r3
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <xTaskRemoveFromEventList+0xb0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <xTaskRemoveFromEventList+0xb0>)
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <xTaskRemoveFromEventList+0xb4>)
 8002e10:	441a      	add	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f7fe fe74 	bl	8001b06 <vListInsertEnd>
 8002e1e:	e005      	b.n	8002e2c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	3318      	adds	r3, #24
 8002e24:	4619      	mov	r1, r3
 8002e26:	480e      	ldr	r0, [pc, #56]	; (8002e60 <xTaskRemoveFromEventList+0xb8>)
 8002e28:	f7fe fe6d 	bl	8001b06 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <xTaskRemoveFromEventList+0xbc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d905      	bls.n	8002e46 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <xTaskRemoveFromEventList+0xc0>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e001      	b.n	8002e4a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002e4a:	697b      	ldr	r3, [r7, #20]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000228 	.word	0x20000228
 8002e58:	20000208 	.word	0x20000208
 8002e5c:	2000012c 	.word	0x2000012c
 8002e60:	200001c0 	.word	0x200001c0
 8002e64:	20000128 	.word	0x20000128
 8002e68:	20000214 	.word	0x20000214

08002e6c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <vTaskInternalSetTimeOutState+0x24>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <vTaskInternalSetTimeOutState+0x28>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	605a      	str	r2, [r3, #4]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	20000218 	.word	0x20000218
 8002e94:	20000204 	.word	0x20000204

08002e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	613b      	str	r3, [r7, #16]
    }
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	60fb      	str	r3, [r7, #12]
    }
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002eda:	f000 fe3d 	bl	8003b58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <xTaskCheckForTimeOut+0xc4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d102      	bne.n	8002efe <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	e026      	b.n	8002f4c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <xTaskCheckForTimeOut+0xc8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d00a      	beq.n	8002f20 <xTaskCheckForTimeOut+0x88>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d305      	bcc.n	8002f20 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002f14:	2301      	movs	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e015      	b.n	8002f4c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d20b      	bcs.n	8002f42 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	1ad2      	subs	r2, r2, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ff98 	bl	8002e6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e004      	b.n	8002f4c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002f4c:	f000 fe34 	bl	8003bb8 <vPortExitCritical>

    return xReturn;
 8002f50:	69fb      	ldr	r3, [r7, #28]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000204 	.word	0x20000204
 8002f60:	20000218 	.word	0x20000218

08002f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <vTaskMissedYield+0x14>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	20000214 	.word	0x20000214

08002f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f84:	f000 f852 	bl	800302c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <prvIdleTask+0x28>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d9f9      	bls.n	8002f84 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <prvIdleTask+0x2c>)
 8002f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002fa0:	e7f0      	b.n	8002f84 <prvIdleTask+0x8>
 8002fa2:	bf00      	nop
 8002fa4:	2000012c 	.word	0x2000012c
 8002fa8:	e000ed04 	.word	0xe000ed04

08002fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	e00c      	b.n	8002fd2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <prvInitialiseTaskLists+0x60>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fd70 	bl	8001aac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d9ef      	bls.n	8002fb8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002fd8:	480d      	ldr	r0, [pc, #52]	; (8003010 <prvInitialiseTaskLists+0x64>)
 8002fda:	f7fe fd67 	bl	8001aac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002fde:	480d      	ldr	r0, [pc, #52]	; (8003014 <prvInitialiseTaskLists+0x68>)
 8002fe0:	f7fe fd64 	bl	8001aac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <prvInitialiseTaskLists+0x6c>)
 8002fe6:	f7fe fd61 	bl	8001aac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002fea:	480c      	ldr	r0, [pc, #48]	; (800301c <prvInitialiseTaskLists+0x70>)
 8002fec:	f7fe fd5e 	bl	8001aac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002ff0:	480b      	ldr	r0, [pc, #44]	; (8003020 <prvInitialiseTaskLists+0x74>)
 8002ff2:	f7fe fd5b 	bl	8001aac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <prvInitialiseTaskLists+0x78>)
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <prvInitialiseTaskLists+0x64>)
 8002ffa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <prvInitialiseTaskLists+0x7c>)
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <prvInitialiseTaskLists+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000012c 	.word	0x2000012c
 8003010:	20000190 	.word	0x20000190
 8003014:	200001a4 	.word	0x200001a4
 8003018:	200001c0 	.word	0x200001c0
 800301c:	200001d4 	.word	0x200001d4
 8003020:	200001ec 	.word	0x200001ec
 8003024:	200001b8 	.word	0x200001b8
 8003028:	200001bc 	.word	0x200001bc

0800302c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003032:	e019      	b.n	8003068 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003034:	f000 fd90 	bl	8003b58 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <prvCheckTasksWaitingTermination+0x50>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fdbb 	bl	8001bc0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <prvCheckTasksWaitingTermination+0x54>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3b01      	subs	r3, #1
 8003050:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <prvCheckTasksWaitingTermination+0x54>)
 8003052:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 800305c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800305e:	f000 fdab 	bl	8003bb8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f810 	bl	8003088 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e1      	bne.n	8003034 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200001d4 	.word	0x200001d4
 8003080:	20000200 	.word	0x20000200
 8003084:	200001e8 	.word	0x200001e8

08003088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4618      	mov	r0, r3
 8003096:	f000 ff61 	bl	8003f5c <vPortFree>
                vPortFree( pxTCB );
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 ff5e 	bl	8003f5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <prvResetNextTaskUnblockTime+0x30>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <prvResetNextTaskUnblockTime+0x34>)
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80030be:	e005      	b.n	80030cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <prvResetNextTaskUnblockTime+0x30>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a04      	ldr	r2, [pc, #16]	; (80030dc <prvResetNextTaskUnblockTime+0x34>)
 80030ca:	6013      	str	r3, [r2, #0]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	200001b8 	.word	0x200001b8
 80030dc:	20000220 	.word	0x20000220

080030e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <xTaskGetSchedulerState+0x34>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80030ee:	2301      	movs	r3, #1
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	e008      	b.n	8003106 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <xTaskGetSchedulerState+0x38>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80030fc:	2302      	movs	r3, #2
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	e001      	b.n	8003106 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003106:	687b      	ldr	r3, [r7, #4]
    }
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	2000020c 	.word	0x2000020c
 8003118:	20000228 	.word	0x20000228

0800311c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d063      	beq.n	80031fa <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <xTaskPriorityDisinherit+0xe8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d00a      	beq.n	8003152 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	60fb      	str	r3, [r7, #12]
    }
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	60bb      	str	r3, [r7, #8]
    }
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003174:	1e5a      	subs	r2, r3, #1
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003182:	429a      	cmp	r2, r3
 8003184:	d039      	beq.n	80031fa <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d135      	bne.n	80031fa <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3304      	adds	r3, #4
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fd14 	bl	8001bc0 <uxListRemove>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	2201      	movs	r2, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43da      	mvns	r2, r3
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <xTaskPriorityDisinherit+0xec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4013      	ands	r3, r2
 80031b0:	4a15      	ldr	r2, [pc, #84]	; (8003208 <xTaskPriorityDisinherit+0xec>)
 80031b2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f1c3 0205 	rsb	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	2201      	movs	r2, #1
 80031ce:	409a      	lsls	r2, r3
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <xTaskPriorityDisinherit+0xec>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <xTaskPriorityDisinherit+0xec>)
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <xTaskPriorityDisinherit+0xf0>)
 80031e8:	441a      	add	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7fe fc88 	bl	8001b06 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80031fa:	697b      	ldr	r3, [r7, #20]
    }
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000128 	.word	0x20000128
 8003208:	20000208 	.word	0x20000208
 800320c:	2000012c 	.word	0x2000012c

08003210 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800321a:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3304      	adds	r3, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fcca 	bl	8001bc0 <uxListRemove>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2201      	movs	r2, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4013      	ands	r3, r2
 8003246:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003248:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d10a      	bne.n	8003268 <prvAddCurrentTaskToDelayedList+0x58>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3304      	adds	r3, #4
 800325e:	4619      	mov	r1, r3
 8003260:	481a      	ldr	r0, [pc, #104]	; (80032cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003262:	f7fe fc50 	bl	8001b06 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003266:	e026      	b.n	80032b6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d209      	bcs.n	8003294 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3304      	adds	r3, #4
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f7fe fc5e 	bl	8001b4e <vListInsert>
}
 8003292:	e010      	b.n	80032b6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3304      	adds	r3, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7fe fc54 	bl	8001b4e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d202      	bcs.n	80032b6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80032b0:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6013      	str	r3, [r2, #0]
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000204 	.word	0x20000204
 80032c4:	20000128 	.word	0x20000128
 80032c8:	20000208 	.word	0x20000208
 80032cc:	200001ec 	.word	0x200001ec
 80032d0:	200001bc 	.word	0x200001bc
 80032d4:	200001b8 	.word	0x200001b8
 80032d8:	20000220 	.word	0x20000220

080032dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80032e6:	f000 fad5 	bl	8003894 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <xTimerCreateTimerTask+0x54>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <xTimerCreateTimerTask+0x58>)
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2300      	movs	r3, #0
 80032fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003300:	490d      	ldr	r1, [pc, #52]	; (8003338 <xTimerCreateTimerTask+0x5c>)
 8003302:	480e      	ldr	r0, [pc, #56]	; (800333c <xTimerCreateTimerTask+0x60>)
 8003304:	f7ff f966 	bl	80025d4 <xTaskCreate>
 8003308:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	603b      	str	r3, [r7, #0]
    }
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003326:	687b      	ldr	r3, [r7, #4]
    }
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	2000025c 	.word	0x2000025c
 8003334:	20000260 	.word	0x20000260
 8003338:	08004c74 	.word	0x08004c74
 800333c:	08003475 	.word	0x08003475

08003340 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	623b      	str	r3, [r7, #32]
    }
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <xTimerGenericCommand+0x98>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d02a      	beq.n	80033cc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b05      	cmp	r3, #5
 8003386:	dc18      	bgt.n	80033ba <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003388:	f7ff feaa 	bl	80030e0 <xTaskGetSchedulerState>
 800338c:	4603      	mov	r3, r0
 800338e:	2b02      	cmp	r3, #2
 8003390:	d109      	bne.n	80033a6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <xTimerGenericCommand+0x98>)
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	f107 0114 	add.w	r1, r7, #20
 800339a:	2300      	movs	r3, #0
 800339c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339e:	f7fe fd23 	bl	8001de8 <xQueueGenericSend>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24
 80033a4:	e012      	b.n	80033cc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <xTimerGenericCommand+0x98>)
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	f107 0114 	add.w	r1, r7, #20
 80033ae:	2300      	movs	r3, #0
 80033b0:	2200      	movs	r2, #0
 80033b2:	f7fe fd19 	bl	8001de8 <xQueueGenericSend>
 80033b6:	6278      	str	r0, [r7, #36]	; 0x24
 80033b8:	e008      	b.n	80033cc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <xTimerGenericCommand+0x98>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f107 0114 	add.w	r1, r7, #20
 80033c2:	2300      	movs	r3, #0
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	f7fe fe0d 	bl	8001fe4 <xQueueGenericSendFromISR>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80033ce:	4618      	mov	r0, r3
 80033d0:	3728      	adds	r7, #40	; 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	2000025c 	.word	0x2000025c

080033dc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <prvProcessExpiredTimer+0x94>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fbe3 	bl	8001bc0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d022      	beq.n	800344e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	18d1      	adds	r1, r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	6978      	ldr	r0, [r7, #20]
 8003416:	f000 f8d1 	bl	80035bc <prvInsertTimerInActiveList>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01f      	beq.n	8003460 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003420:	2300      	movs	r3, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	2100      	movs	r1, #0
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff88 	bl	8003340 <xTimerGenericCommand>
 8003430:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d113      	bne.n	8003460 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	60fb      	str	r3, [r7, #12]
    }
 800344a:	bf00      	nop
 800344c:	e7fe      	b.n	800344c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	b2da      	uxtb	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	6978      	ldr	r0, [r7, #20]
 8003466:	4798      	blx	r3
    }
 8003468:	bf00      	nop
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000254 	.word	0x20000254

08003474 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800347c:	f107 0308 	add.w	r3, r7, #8
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f857 	bl	8003534 <prvGetNextExpireTime>
 8003486:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4619      	mov	r1, r3
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f803 	bl	8003498 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003492:	f000 f8d5 	bl	8003640 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003496:	e7f1      	b.n	800347c <prvTimerTask+0x8>

08003498 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80034a2:	f7ff fa63 	bl	800296c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034a6:	f107 0308 	add.w	r3, r7, #8
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f866 	bl	800357c <prvSampleTimeNow>
 80034b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d130      	bne.n	800351a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <prvProcessTimerOrBlockTask+0x3c>
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d806      	bhi.n	80034d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80034c6:	f7ff fa5f 	bl	8002988 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff85 	bl	80033dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80034d2:	e024      	b.n	800351e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <prvProcessTimerOrBlockTask+0x90>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <prvProcessTimerOrBlockTask+0x50>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <prvProcessTimerOrBlockTask+0x52>
 80034e8:	2300      	movs	r3, #0
 80034ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <prvProcessTimerOrBlockTask+0x94>)
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f7ff f837 	bl	800256c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80034fe:	f7ff fa43 	bl	8002988 <xTaskResumeAll>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <prvProcessTimerOrBlockTask+0x98>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
    }
 8003518:	e001      	b.n	800351e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800351a:	f7ff fa35 	bl	8002988 <xTaskResumeAll>
    }
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000258 	.word	0x20000258
 800352c:	2000025c 	.word	0x2000025c
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <prvGetNextExpireTime+0x44>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <prvGetNextExpireTime+0x16>
 8003546:	2201      	movs	r2, #1
 8003548:	e000      	b.n	800354c <prvGetNextExpireTime+0x18>
 800354a:	2200      	movs	r2, #0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <prvGetNextExpireTime+0x44>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e001      	b.n	8003568 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003568:	68fb      	ldr	r3, [r7, #12]
    }
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000254 	.word	0x20000254

0800357c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003584:	f7ff fa9c 	bl	8002ac0 <xTaskGetTickCount>
 8003588:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <prvSampleTimeNow+0x3c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	429a      	cmp	r2, r3
 8003592:	d205      	bcs.n	80035a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003594:	f000 f91a 	bl	80037cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e002      	b.n	80035a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <prvSampleTimeNow+0x3c>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80035ac:	68fb      	ldr	r3, [r7, #12]
    }
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000264 	.word	0x20000264

080035bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d812      	bhi.n	8003608 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	1ad2      	subs	r2, r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e01b      	b.n	800362e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035f6:	4b10      	ldr	r3, [pc, #64]	; (8003638 <prvInsertTimerInActiveList+0x7c>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f7fe faa4 	bl	8001b4e <vListInsert>
 8003606:	e012      	b.n	800362e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d206      	bcs.n	800361e <prvInsertTimerInActiveList+0x62>
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d302      	bcc.n	800361e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003618:	2301      	movs	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e007      	b.n	800362e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <prvInsertTimerInActiveList+0x80>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7fe fa90 	bl	8001b4e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800362e:	697b      	ldr	r3, [r7, #20]
    }
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000258 	.word	0x20000258
 800363c:	20000254 	.word	0x20000254

08003640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003646:	e0ae      	b.n	80037a6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f2c0 80aa 	blt.w	80037a4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d004      	beq.n	8003666 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	3304      	adds	r3, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe faad 	bl	8001bc0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff87 	bl	800357c <prvSampleTimeNow>
 800366e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b09      	cmp	r3, #9
 8003674:	f200 8097 	bhi.w	80037a6 <prvProcessReceivedCommands+0x166>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <prvProcessReceivedCommands+0x40>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	080036a9 	.word	0x080036a9
 8003684:	080036a9 	.word	0x080036a9
 8003688:	080036a9 	.word	0x080036a9
 800368c:	0800371d 	.word	0x0800371d
 8003690:	08003731 	.word	0x08003731
 8003694:	0800377b 	.word	0x0800377b
 8003698:	080036a9 	.word	0x080036a9
 800369c:	080036a9 	.word	0x080036a9
 80036a0:	0800371d 	.word	0x0800371d
 80036a4:	08003731 	.word	0x08003731
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	18d1      	adds	r1, r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a3a      	ldr	r2, [r7, #32]
 80036c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036c8:	f7ff ff78 	bl	80035bc <prvInsertTimerInActiveList>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d069      	beq.n	80037a6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05e      	beq.n	80037a6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	441a      	add	r2, r3
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	2100      	movs	r1, #0
 80036f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036fa:	f7ff fe21 	bl	8003340 <xTimerGenericCommand>
 80036fe:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d14f      	bne.n	80037a6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	61bb      	str	r3, [r7, #24]
    }
 8003718:	bf00      	nop
 800371a:	e7fe      	b.n	800371a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	b2da      	uxtb	r2, r3
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800372e:	e03a      	b.n	80037a6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	617b      	str	r3, [r7, #20]
    }
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	18d1      	adds	r1, r2, r3
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003774:	f7ff ff22 	bl	80035bc <prvInsertTimerInActiveList>
                        break;
 8003778:	e015      	b.n	80037a6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d103      	bne.n	8003790 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800378a:	f000 fbe7 	bl	8003f5c <vPortFree>
 800378e:	e00a      	b.n	80037a6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	b2da      	uxtb	r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80037a2:	e000      	b.n	80037a6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80037a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <prvProcessReceivedCommands+0x188>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f107 0108 	add.w	r1, r7, #8
 80037ae:	2200      	movs	r2, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fcc1 	bl	8002138 <xQueueReceive>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f af45 	bne.w	8003648 <prvProcessReceivedCommands+0x8>
        }
    }
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	; 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	2000025c 	.word	0x2000025c

080037cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037d2:	e048      	b.n	8003866 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <prvSwitchTimerLists+0xc0>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <prvSwitchTimerLists+0xc0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe f9e7 	bl	8001bc0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02e      	beq.n	8003866 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90e      	bls.n	8003838 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <prvSwitchTimerLists+0xc0>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f7fe f98c 	bl	8001b4e <vListInsert>
 8003836:	e016      	b.n	8003866 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003838:	2300      	movs	r3, #0
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2300      	movs	r3, #0
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	2100      	movs	r1, #0
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff fd7c 	bl	8003340 <xTimerGenericCommand>
 8003848:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	603b      	str	r3, [r7, #0]
    }
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <prvSwitchTimerLists+0xc0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1b1      	bne.n	80037d4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <prvSwitchTimerLists+0xc0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <prvSwitchTimerLists+0xc4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <prvSwitchTimerLists+0xc0>)
 800387c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <prvSwitchTimerLists+0xc4>)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	6013      	str	r3, [r2, #0]
    }
 8003884:	bf00      	nop
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20000254 	.word	0x20000254
 8003890:	20000258 	.word	0x20000258

08003894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003898:	f000 f95e 	bl	8003b58 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <prvCheckForValidListAndQueue+0x54>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11d      	bne.n	80038e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80038a4:	4811      	ldr	r0, [pc, #68]	; (80038ec <prvCheckForValidListAndQueue+0x58>)
 80038a6:	f7fe f901 	bl	8001aac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80038aa:	4811      	ldr	r0, [pc, #68]	; (80038f0 <prvCheckForValidListAndQueue+0x5c>)
 80038ac:	f7fe f8fe 	bl	8001aac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <prvCheckForValidListAndQueue+0x60>)
 80038b2:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <prvCheckForValidListAndQueue+0x58>)
 80038b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <prvCheckForValidListAndQueue+0x64>)
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <prvCheckForValidListAndQueue+0x5c>)
 80038ba:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80038bc:	2200      	movs	r2, #0
 80038be:	210c      	movs	r1, #12
 80038c0:	200a      	movs	r0, #10
 80038c2:	f7fe fa0f 	bl	8001ce4 <xQueueGenericCreate>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <prvCheckForValidListAndQueue+0x54>)
 80038ca:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <prvCheckForValidListAndQueue+0x54>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <prvCheckForValidListAndQueue+0x54>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4908      	ldr	r1, [pc, #32]	; (80038fc <prvCheckForValidListAndQueue+0x68>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fe1c 	bl	8002518 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038e0:	f000 f96a 	bl	8003bb8 <vPortExitCritical>
    }
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	2000025c 	.word	0x2000025c
 80038ec:	2000022c 	.word	0x2000022c
 80038f0:	20000240 	.word	0x20000240
 80038f4:	20000254 	.word	0x20000254
 80038f8:	20000258 	.word	0x20000258
 80038fc:	08004c7c 	.word	0x08004c7c

08003900 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3b04      	subs	r3, #4
 8003910:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003918:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3b04      	subs	r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f023 0201 	bic.w	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3b04      	subs	r3, #4
 800392e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003930:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <pxPortInitialiseStack+0x64>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b14      	subs	r3, #20
 800393a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3b04      	subs	r3, #4
 8003946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f06f 0202 	mvn.w	r2, #2
 800394e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3b20      	subs	r3, #32
 8003954:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	08003969 	.word	0x08003969

08003968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <prvTaskExitError+0x54>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397a:	d00a      	beq.n	8003992 <prvTaskExitError+0x2a>
        __asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	60fb      	str	r3, [r7, #12]
    }
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <prvTaskExitError+0x28>
        __asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	60bb      	str	r3, [r7, #8]
    }
 80039a4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80039a6:	bf00      	nop
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0fc      	beq.n	80039a8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80039ae:	bf00      	nop
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	20000010 	.word	0x20000010

080039c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <pxCurrentTCBConst2>)
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	6808      	ldr	r0, [r1, #0]
 80039c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ca:	f380 8809 	msr	PSP, r0
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f380 8811 	msr	BASEPRI, r0
 80039da:	4770      	bx	lr
 80039dc:	f3af 8000 	nop.w

080039e0 <pxCurrentTCBConst2>:
 80039e0:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop

080039e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80039e8:	4808      	ldr	r0, [pc, #32]	; (8003a0c <prvPortStartFirstTask+0x24>)
 80039ea:	6800      	ldr	r0, [r0, #0]
 80039ec:	6800      	ldr	r0, [r0, #0]
 80039ee:	f380 8808 	msr	MSP, r0
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8814 	msr	CONTROL, r0
 80039fa:	b662      	cpsie	i
 80039fc:	b661      	cpsie	f
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	df00      	svc	0
 8003a08:	bf00      	nop
 8003a0a:	0000      	.short	0x0000
 8003a0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop

08003a14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a1a:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <xPortStartScheduler+0x120>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <xPortStartScheduler+0x124>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10a      	bne.n	8003a3a <xPortStartScheduler+0x26>
        __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	613b      	str	r3, [r7, #16]
    }
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a3a:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <xPortStartScheduler+0x120>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a3f      	ldr	r2, [pc, #252]	; (8003b3c <xPortStartScheduler+0x128>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d10a      	bne.n	8003a5a <xPortStartScheduler+0x46>
        __asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
    }
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a5a:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <xPortStartScheduler+0x12c>)
 8003a5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	22ff      	movs	r2, #255	; 0xff
 8003a6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <xPortStartScheduler+0x130>)
 8003a80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <xPortStartScheduler+0x134>)
 8003a84:	2207      	movs	r2, #7
 8003a86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a88:	e009      	b.n	8003a9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003a8a:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <xPortStartScheduler+0x134>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <xPortStartScheduler+0x134>)
 8003a92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d0ef      	beq.n	8003a8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <xPortStartScheduler+0x134>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1c3 0307 	rsb	r3, r3, #7
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d00a      	beq.n	8003acc <xPortStartScheduler+0xb8>
        __asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	60bb      	str	r3, [r7, #8]
    }
 8003ac8:	bf00      	nop
 8003aca:	e7fe      	b.n	8003aca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003acc:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <xPortStartScheduler+0x134>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <xPortStartScheduler+0x134>)
 8003ad4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ad6:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <xPortStartScheduler+0x134>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ade:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <xPortStartScheduler+0x134>)
 8003ae0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <xPortStartScheduler+0x138>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <xPortStartScheduler+0x138>)
 8003af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <xPortStartScheduler+0x138>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <xPortStartScheduler+0x138>)
 8003afc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003b02:	f000 f8db 	bl	8003cbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <xPortStartScheduler+0x13c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003b0c:	f000 f8fa 	bl	8003d04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <xPortStartScheduler+0x140>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a0f      	ldr	r2, [pc, #60]	; (8003b54 <xPortStartScheduler+0x140>)
 8003b16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003b1c:	f7ff ff64 	bl	80039e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003b20:	f7ff f896 	bl	8002c50 <vTaskSwitchContext>
    prvTaskExitError();
 8003b24:	f7ff ff20 	bl	8003968 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	e000ed00 	.word	0xe000ed00
 8003b38:	410fc271 	.word	0x410fc271
 8003b3c:	410fc270 	.word	0x410fc270
 8003b40:	e000e400 	.word	0xe000e400
 8003b44:	20000268 	.word	0x20000268
 8003b48:	2000026c 	.word	0x2000026c
 8003b4c:	e000ed20 	.word	0xe000ed20
 8003b50:	20000010 	.word	0x20000010
 8003b54:	e000ef34 	.word	0xe000ef34

08003b58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
        __asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	607b      	str	r3, [r7, #4]
    }
 8003b70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <vPortEnterCritical+0x58>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	4a0d      	ldr	r2, [pc, #52]	; (8003bb0 <vPortEnterCritical+0x58>)
 8003b7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <vPortEnterCritical+0x58>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10f      	bne.n	8003ba4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <vPortEnterCritical+0x5c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	603b      	str	r3, [r7, #0]
    }
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <vPortEnterCritical+0x4a>
    }
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	20000010 	.word	0x20000010
 8003bb4:	e000ed04 	.word	0xe000ed04

08003bb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <vPortExitCritical+0x50>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <vPortExitCritical+0x24>
        __asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	607b      	str	r3, [r7, #4]
    }
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <vPortExitCritical+0x50>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <vPortExitCritical+0x50>)
 8003be4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <vPortExitCritical+0x50>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <vPortExitCritical+0x42>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f383 8811 	msr	BASEPRI, r3
    }
 8003bf8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000010 	.word	0x20000010
 8003c0c:	00000000 	.word	0x00000000

08003c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c10:	f3ef 8009 	mrs	r0, PSP
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <pxCurrentTCBConst>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	f01e 0f10 	tst.w	lr, #16
 8003c20:	bf08      	it	eq
 8003c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2a:	6010      	str	r0, [r2, #0]
 8003c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c34:	f380 8811 	msr	BASEPRI, r0
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f7ff f806 	bl	8002c50 <vTaskSwitchContext>
 8003c44:	f04f 0000 	mov.w	r0, #0
 8003c48:	f380 8811 	msr	BASEPRI, r0
 8003c4c:	bc09      	pop	{r0, r3}
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	6808      	ldr	r0, [r1, #0]
 8003c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c56:	f01e 0f10 	tst.w	lr, #16
 8003c5a:	bf08      	it	eq
 8003c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c60:	f380 8809 	msr	PSP, r0
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	f3af 8000 	nop.w

08003c70 <pxCurrentTCBConst>:
 8003c70:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop

08003c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	607b      	str	r3, [r7, #4]
    }
 8003c90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003c92:	f7fe ff25 	bl	8002ae0 <xTaskIncrementTick>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <SysTick_Handler+0x40>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f383 8811 	msr	BASEPRI, r3
    }
 8003cae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <vPortSetupTimerInterrupt+0x34>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <vPortSetupTimerInterrupt+0x38>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <vPortSetupTimerInterrupt+0x3c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <vPortSetupTimerInterrupt+0x40>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <vPortSetupTimerInterrupt+0x44>)
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cde:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <vPortSetupTimerInterrupt+0x34>)
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	601a      	str	r2, [r3, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000e010 	.word	0xe000e010
 8003cf4:	e000e018 	.word	0xe000e018
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	10624dd3 	.word	0x10624dd3
 8003d00:	e000e014 	.word	0xe000e014

08003d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d14 <vPortEnableVFP+0x10>
 8003d08:	6801      	ldr	r1, [r0, #0]
 8003d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d0e:	6001      	str	r1, [r0, #0]
 8003d10:	4770      	bx	lr
 8003d12:	0000      	.short	0x0000
 8003d14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop

08003d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003d22:	f3ef 8305 	mrs	r3, IPSR
 8003d26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	d914      	bls.n	8003d58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <vPortValidateInterruptPriority+0x70>)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <vPortValidateInterruptPriority+0x74>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	7afa      	ldrb	r2, [r7, #11]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d20a      	bcs.n	8003d58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	607b      	str	r3, [r7, #4]
    }
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <vPortValidateInterruptPriority+0x78>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d60:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <vPortValidateInterruptPriority+0x7c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d90a      	bls.n	8003d7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	603b      	str	r3, [r7, #0]
    }
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <vPortValidateInterruptPriority+0x60>
    }
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000e3f0 	.word	0xe000e3f0
 8003d90:	20000268 	.word	0x20000268
 8003d94:	e000ed0c 	.word	0xe000ed0c
 8003d98:	2000026c 	.word	0x2000026c

08003d9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003da8:	f7fe fde0 	bl	800296c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003dac:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <pvPortMalloc+0x1a8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003db4:	f000 f934 	bl	8004020 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003db8:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <pvPortMalloc+0x1ac>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f040 80a7 	bne.w	8003f14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d02d      	beq.n	8003e28 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003dcc:	2208      	movs	r2, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d227      	bcs.n	8003e28 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003dd8:	2208      	movs	r2, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d021      	beq.n	8003e2e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f023 0307 	bic.w	r3, r3, #7
 8003df0:	3308      	adds	r3, #8
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d214      	bcs.n	8003e22 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f023 0307 	bic.w	r3, r3, #7
 8003dfe:	3308      	adds	r3, #8
 8003e00:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d010      	beq.n	8003e2e <pvPortMalloc+0x92>
        __asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	617b      	str	r3, [r7, #20]
    }
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e26:	e002      	b.n	8003e2e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	e000      	b.n	8003e30 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d06e      	beq.n	8003f14 <pvPortMalloc+0x178>
 8003e36:	4b45      	ldr	r3, [pc, #276]	; (8003f4c <pvPortMalloc+0x1b0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d869      	bhi.n	8003f14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003e40:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <pvPortMalloc+0x1b4>)
 8003e42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003e44:	4b42      	ldr	r3, [pc, #264]	; (8003f50 <pvPortMalloc+0x1b4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e4a:	e004      	b.n	8003e56 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d903      	bls.n	8003e68 <pvPortMalloc+0xcc>
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f1      	bne.n	8003e4c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <pvPortMalloc+0x1a8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d050      	beq.n	8003f14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2208      	movs	r2, #8
 8003e78:	4413      	add	r3, r2
 8003e7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	1ad2      	subs	r2, r2, r3
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d91f      	bls.n	8003ed4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <pvPortMalloc+0x120>
        __asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	613b      	str	r3, [r7, #16]
    }
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1ad2      	subs	r2, r2, r3
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ece:	69b8      	ldr	r0, [r7, #24]
 8003ed0:	f000 f908 	bl	80040e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <pvPortMalloc+0x1b0>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <pvPortMalloc+0x1b0>)
 8003ee0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <pvPortMalloc+0x1b0>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <pvPortMalloc+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d203      	bcs.n	8003ef6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <pvPortMalloc+0x1b0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <pvPortMalloc+0x1b8>)
 8003ef4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <pvPortMalloc+0x1ac>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003f0a:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <pvPortMalloc+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	4a11      	ldr	r2, [pc, #68]	; (8003f58 <pvPortMalloc+0x1bc>)
 8003f12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003f14:	f7fe fd38 	bl	8002988 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <pvPortMalloc+0x19c>
        __asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	60fb      	str	r3, [r7, #12]
    }
 8003f34:	bf00      	nop
 8003f36:	e7fe      	b.n	8003f36 <pvPortMalloc+0x19a>
    return pvReturn;
 8003f38:	69fb      	ldr	r3, [r7, #28]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3728      	adds	r7, #40	; 0x28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20012e78 	.word	0x20012e78
 8003f48:	20012e8c 	.word	0x20012e8c
 8003f4c:	20012e7c 	.word	0x20012e7c
 8003f50:	20012e70 	.word	0x20012e70
 8003f54:	20012e80 	.word	0x20012e80
 8003f58:	20012e84 	.word	0x20012e84

08003f5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d04d      	beq.n	800400a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003f6e:	2308      	movs	r3, #8
 8003f70:	425b      	negs	r3, r3
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4413      	add	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <vPortFree+0xb8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <vPortFree+0x44>
        __asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60fb      	str	r3, [r7, #12]
    }
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <vPortFree+0x62>
        __asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60bb      	str	r3, [r7, #8]
    }
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	4b14      	ldr	r3, [pc, #80]	; (8004014 <vPortFree+0xb8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01e      	beq.n	800400a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11a      	bne.n	800400a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <vPortFree+0xb8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003fe4:	f7fe fcc2 	bl	800296c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <vPortFree+0xbc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <vPortFree+0xbc>)
 8003ff4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ff6:	6938      	ldr	r0, [r7, #16]
 8003ff8:	f000 f874 	bl	80040e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003ffc:	4b07      	ldr	r3, [pc, #28]	; (800401c <vPortFree+0xc0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	4a06      	ldr	r2, [pc, #24]	; (800401c <vPortFree+0xc0>)
 8004004:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004006:	f7fe fcbf 	bl	8002988 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800400a:	bf00      	nop
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20012e8c 	.word	0x20012e8c
 8004018:	20012e7c 	.word	0x20012e7c
 800401c:	20012e88 	.word	0x20012e88

08004020 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004026:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800402a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <prvHeapInit+0xac>)
 800402e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3307      	adds	r3, #7
 800403e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0307 	bic.w	r3, r3, #7
 8004046:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <prvHeapInit+0xac>)
 8004050:	4413      	add	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <prvHeapInit+0xb0>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800405e:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <prvHeapInit+0xb0>)
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4413      	add	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800406c:	2208      	movs	r2, #8
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <prvHeapInit+0xb4>)
 8004080:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004082:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <prvHeapInit+0xb4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <prvHeapInit+0xb4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	1ad2      	subs	r2, r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <prvHeapInit+0xb4>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <prvHeapInit+0xb8>)
 80040ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a09      	ldr	r2, [pc, #36]	; (80040dc <prvHeapInit+0xbc>)
 80040b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <prvHeapInit+0xc0>)
 80040ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040be:	601a      	str	r2, [r3, #0]
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	20000270 	.word	0x20000270
 80040d0:	20012e70 	.word	0x20012e70
 80040d4:	20012e78 	.word	0x20012e78
 80040d8:	20012e80 	.word	0x20012e80
 80040dc:	20012e7c 	.word	0x20012e7c
 80040e0:	20012e8c 	.word	0x20012e8c

080040e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040ec:	4b28      	ldr	r3, [pc, #160]	; (8004190 <prvInsertBlockIntoFreeList+0xac>)
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e002      	b.n	80040f8 <prvInsertBlockIntoFreeList+0x14>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d8f7      	bhi.n	80040f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	d108      	bne.n	8004126 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	441a      	add	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	441a      	add	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d118      	bne.n	800416c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <prvInsertBlockIntoFreeList+0xb0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d00d      	beq.n	8004162 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	441a      	add	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e008      	b.n	8004174 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <prvInsertBlockIntoFreeList+0xb0>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e003      	b.n	8004174 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d002      	beq.n	8004182 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20012e70 	.word	0x20012e70
 8004194:	20012e78 	.word	0x20012e78

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4d0d      	ldr	r5, [pc, #52]	; (80041d0 <__libc_init_array+0x38>)
 800419c:	4c0d      	ldr	r4, [pc, #52]	; (80041d4 <__libc_init_array+0x3c>)
 800419e:	1b64      	subs	r4, r4, r5
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	2600      	movs	r6, #0
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	4d0b      	ldr	r5, [pc, #44]	; (80041d8 <__libc_init_array+0x40>)
 80041aa:	4c0c      	ldr	r4, [pc, #48]	; (80041dc <__libc_init_array+0x44>)
 80041ac:	f000 fd3a 	bl	8004c24 <_init>
 80041b0:	1b64      	subs	r4, r4, r5
 80041b2:	10a4      	asrs	r4, r4, #2
 80041b4:	2600      	movs	r6, #0
 80041b6:	42a6      	cmp	r6, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c0:	4798      	blx	r3
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ca:	4798      	blx	r3
 80041cc:	3601      	adds	r6, #1
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	08004d08 	.word	0x08004d08
 80041d4:	08004d08 	.word	0x08004d08
 80041d8:	08004d08 	.word	0x08004d08
 80041dc:	08004d0c 	.word	0x08004d0c

080041e0 <memcpy>:
 80041e0:	440a      	add	r2, r1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041e8:	d100      	bne.n	80041ec <memcpy+0xc>
 80041ea:	4770      	bx	lr
 80041ec:	b510      	push	{r4, lr}
 80041ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f6:	4291      	cmp	r1, r2
 80041f8:	d1f9      	bne.n	80041ee <memcpy+0xe>
 80041fa:	bd10      	pop	{r4, pc}

080041fc <memset>:
 80041fc:	4402      	add	r2, r0
 80041fe:	4603      	mov	r3, r0
 8004200:	4293      	cmp	r3, r2
 8004202:	d100      	bne.n	8004206 <memset+0xa>
 8004204:	4770      	bx	lr
 8004206:	f803 1b01 	strb.w	r1, [r3], #1
 800420a:	e7f9      	b.n	8004200 <memset+0x4>

0800420c <_puts_r>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	460e      	mov	r6, r1
 8004210:	4605      	mov	r5, r0
 8004212:	b118      	cbz	r0, 800421c <_puts_r+0x10>
 8004214:	6983      	ldr	r3, [r0, #24]
 8004216:	b90b      	cbnz	r3, 800421c <_puts_r+0x10>
 8004218:	f000 fa48 	bl	80046ac <__sinit>
 800421c:	69ab      	ldr	r3, [r5, #24]
 800421e:	68ac      	ldr	r4, [r5, #8]
 8004220:	b913      	cbnz	r3, 8004228 <_puts_r+0x1c>
 8004222:	4628      	mov	r0, r5
 8004224:	f000 fa42 	bl	80046ac <__sinit>
 8004228:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <_puts_r+0xd0>)
 800422a:	429c      	cmp	r4, r3
 800422c:	d120      	bne.n	8004270 <_puts_r+0x64>
 800422e:	686c      	ldr	r4, [r5, #4]
 8004230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004232:	07db      	lsls	r3, r3, #31
 8004234:	d405      	bmi.n	8004242 <_puts_r+0x36>
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	0598      	lsls	r0, r3, #22
 800423a:	d402      	bmi.n	8004242 <_puts_r+0x36>
 800423c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800423e:	f000 fad3 	bl	80047e8 <__retarget_lock_acquire_recursive>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	0719      	lsls	r1, r3, #28
 8004246:	d51d      	bpl.n	8004284 <_puts_r+0x78>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	b1db      	cbz	r3, 8004284 <_puts_r+0x78>
 800424c:	3e01      	subs	r6, #1
 800424e:	68a3      	ldr	r3, [r4, #8]
 8004250:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004254:	3b01      	subs	r3, #1
 8004256:	60a3      	str	r3, [r4, #8]
 8004258:	bb39      	cbnz	r1, 80042aa <_puts_r+0x9e>
 800425a:	2b00      	cmp	r3, #0
 800425c:	da38      	bge.n	80042d0 <_puts_r+0xc4>
 800425e:	4622      	mov	r2, r4
 8004260:	210a      	movs	r1, #10
 8004262:	4628      	mov	r0, r5
 8004264:	f000 f848 	bl	80042f8 <__swbuf_r>
 8004268:	3001      	adds	r0, #1
 800426a:	d011      	beq.n	8004290 <_puts_r+0x84>
 800426c:	250a      	movs	r5, #10
 800426e:	e011      	b.n	8004294 <_puts_r+0x88>
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <_puts_r+0xd4>)
 8004272:	429c      	cmp	r4, r3
 8004274:	d101      	bne.n	800427a <_puts_r+0x6e>
 8004276:	68ac      	ldr	r4, [r5, #8]
 8004278:	e7da      	b.n	8004230 <_puts_r+0x24>
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <_puts_r+0xd8>)
 800427c:	429c      	cmp	r4, r3
 800427e:	bf08      	it	eq
 8004280:	68ec      	ldreq	r4, [r5, #12]
 8004282:	e7d5      	b.n	8004230 <_puts_r+0x24>
 8004284:	4621      	mov	r1, r4
 8004286:	4628      	mov	r0, r5
 8004288:	f000 f888 	bl	800439c <__swsetup_r>
 800428c:	2800      	cmp	r0, #0
 800428e:	d0dd      	beq.n	800424c <_puts_r+0x40>
 8004290:	f04f 35ff 	mov.w	r5, #4294967295
 8004294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004296:	07da      	lsls	r2, r3, #31
 8004298:	d405      	bmi.n	80042a6 <_puts_r+0x9a>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	059b      	lsls	r3, r3, #22
 800429e:	d402      	bmi.n	80042a6 <_puts_r+0x9a>
 80042a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a2:	f000 faa2 	bl	80047ea <__retarget_lock_release_recursive>
 80042a6:	4628      	mov	r0, r5
 80042a8:	bd70      	pop	{r4, r5, r6, pc}
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da04      	bge.n	80042b8 <_puts_r+0xac>
 80042ae:	69a2      	ldr	r2, [r4, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	dc06      	bgt.n	80042c2 <_puts_r+0xb6>
 80042b4:	290a      	cmp	r1, #10
 80042b6:	d004      	beq.n	80042c2 <_puts_r+0xb6>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	6022      	str	r2, [r4, #0]
 80042be:	7019      	strb	r1, [r3, #0]
 80042c0:	e7c5      	b.n	800424e <_puts_r+0x42>
 80042c2:	4622      	mov	r2, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 f817 	bl	80042f8 <__swbuf_r>
 80042ca:	3001      	adds	r0, #1
 80042cc:	d1bf      	bne.n	800424e <_puts_r+0x42>
 80042ce:	e7df      	b.n	8004290 <_puts_r+0x84>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	250a      	movs	r5, #10
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	6022      	str	r2, [r4, #0]
 80042d8:	701d      	strb	r5, [r3, #0]
 80042da:	e7db      	b.n	8004294 <_puts_r+0x88>
 80042dc:	08004cc0 	.word	0x08004cc0
 80042e0:	08004ce0 	.word	0x08004ce0
 80042e4:	08004ca0 	.word	0x08004ca0

080042e8 <puts>:
 80042e8:	4b02      	ldr	r3, [pc, #8]	; (80042f4 <puts+0xc>)
 80042ea:	4601      	mov	r1, r0
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	f7ff bf8d 	b.w	800420c <_puts_r>
 80042f2:	bf00      	nop
 80042f4:	20000014 	.word	0x20000014

080042f8 <__swbuf_r>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	460e      	mov	r6, r1
 80042fc:	4614      	mov	r4, r2
 80042fe:	4605      	mov	r5, r0
 8004300:	b118      	cbz	r0, 800430a <__swbuf_r+0x12>
 8004302:	6983      	ldr	r3, [r0, #24]
 8004304:	b90b      	cbnz	r3, 800430a <__swbuf_r+0x12>
 8004306:	f000 f9d1 	bl	80046ac <__sinit>
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <__swbuf_r+0x98>)
 800430c:	429c      	cmp	r4, r3
 800430e:	d12b      	bne.n	8004368 <__swbuf_r+0x70>
 8004310:	686c      	ldr	r4, [r5, #4]
 8004312:	69a3      	ldr	r3, [r4, #24]
 8004314:	60a3      	str	r3, [r4, #8]
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	071a      	lsls	r2, r3, #28
 800431a:	d52f      	bpl.n	800437c <__swbuf_r+0x84>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	b36b      	cbz	r3, 800437c <__swbuf_r+0x84>
 8004320:	6923      	ldr	r3, [r4, #16]
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	1ac0      	subs	r0, r0, r3
 8004326:	6963      	ldr	r3, [r4, #20]
 8004328:	b2f6      	uxtb	r6, r6
 800432a:	4283      	cmp	r3, r0
 800432c:	4637      	mov	r7, r6
 800432e:	dc04      	bgt.n	800433a <__swbuf_r+0x42>
 8004330:	4621      	mov	r1, r4
 8004332:	4628      	mov	r0, r5
 8004334:	f000 f926 	bl	8004584 <_fflush_r>
 8004338:	bb30      	cbnz	r0, 8004388 <__swbuf_r+0x90>
 800433a:	68a3      	ldr	r3, [r4, #8]
 800433c:	3b01      	subs	r3, #1
 800433e:	60a3      	str	r3, [r4, #8]
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	6022      	str	r2, [r4, #0]
 8004346:	701e      	strb	r6, [r3, #0]
 8004348:	6963      	ldr	r3, [r4, #20]
 800434a:	3001      	adds	r0, #1
 800434c:	4283      	cmp	r3, r0
 800434e:	d004      	beq.n	800435a <__swbuf_r+0x62>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	07db      	lsls	r3, r3, #31
 8004354:	d506      	bpl.n	8004364 <__swbuf_r+0x6c>
 8004356:	2e0a      	cmp	r6, #10
 8004358:	d104      	bne.n	8004364 <__swbuf_r+0x6c>
 800435a:	4621      	mov	r1, r4
 800435c:	4628      	mov	r0, r5
 800435e:	f000 f911 	bl	8004584 <_fflush_r>
 8004362:	b988      	cbnz	r0, 8004388 <__swbuf_r+0x90>
 8004364:	4638      	mov	r0, r7
 8004366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <__swbuf_r+0x9c>)
 800436a:	429c      	cmp	r4, r3
 800436c:	d101      	bne.n	8004372 <__swbuf_r+0x7a>
 800436e:	68ac      	ldr	r4, [r5, #8]
 8004370:	e7cf      	b.n	8004312 <__swbuf_r+0x1a>
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <__swbuf_r+0xa0>)
 8004374:	429c      	cmp	r4, r3
 8004376:	bf08      	it	eq
 8004378:	68ec      	ldreq	r4, [r5, #12]
 800437a:	e7ca      	b.n	8004312 <__swbuf_r+0x1a>
 800437c:	4621      	mov	r1, r4
 800437e:	4628      	mov	r0, r5
 8004380:	f000 f80c 	bl	800439c <__swsetup_r>
 8004384:	2800      	cmp	r0, #0
 8004386:	d0cb      	beq.n	8004320 <__swbuf_r+0x28>
 8004388:	f04f 37ff 	mov.w	r7, #4294967295
 800438c:	e7ea      	b.n	8004364 <__swbuf_r+0x6c>
 800438e:	bf00      	nop
 8004390:	08004cc0 	.word	0x08004cc0
 8004394:	08004ce0 	.word	0x08004ce0
 8004398:	08004ca0 	.word	0x08004ca0

0800439c <__swsetup_r>:
 800439c:	4b32      	ldr	r3, [pc, #200]	; (8004468 <__swsetup_r+0xcc>)
 800439e:	b570      	push	{r4, r5, r6, lr}
 80043a0:	681d      	ldr	r5, [r3, #0]
 80043a2:	4606      	mov	r6, r0
 80043a4:	460c      	mov	r4, r1
 80043a6:	b125      	cbz	r5, 80043b2 <__swsetup_r+0x16>
 80043a8:	69ab      	ldr	r3, [r5, #24]
 80043aa:	b913      	cbnz	r3, 80043b2 <__swsetup_r+0x16>
 80043ac:	4628      	mov	r0, r5
 80043ae:	f000 f97d 	bl	80046ac <__sinit>
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <__swsetup_r+0xd0>)
 80043b4:	429c      	cmp	r4, r3
 80043b6:	d10f      	bne.n	80043d8 <__swsetup_r+0x3c>
 80043b8:	686c      	ldr	r4, [r5, #4]
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c0:	0719      	lsls	r1, r3, #28
 80043c2:	d42c      	bmi.n	800441e <__swsetup_r+0x82>
 80043c4:	06dd      	lsls	r5, r3, #27
 80043c6:	d411      	bmi.n	80043ec <__swsetup_r+0x50>
 80043c8:	2309      	movs	r3, #9
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	f04f 30ff 	mov.w	r0, #4294967295
 80043d6:	e03e      	b.n	8004456 <__swsetup_r+0xba>
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <__swsetup_r+0xd4>)
 80043da:	429c      	cmp	r4, r3
 80043dc:	d101      	bne.n	80043e2 <__swsetup_r+0x46>
 80043de:	68ac      	ldr	r4, [r5, #8]
 80043e0:	e7eb      	b.n	80043ba <__swsetup_r+0x1e>
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <__swsetup_r+0xd8>)
 80043e4:	429c      	cmp	r4, r3
 80043e6:	bf08      	it	eq
 80043e8:	68ec      	ldreq	r4, [r5, #12]
 80043ea:	e7e6      	b.n	80043ba <__swsetup_r+0x1e>
 80043ec:	0758      	lsls	r0, r3, #29
 80043ee:	d512      	bpl.n	8004416 <__swsetup_r+0x7a>
 80043f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f2:	b141      	cbz	r1, 8004406 <__swsetup_r+0x6a>
 80043f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f8:	4299      	cmp	r1, r3
 80043fa:	d002      	beq.n	8004402 <__swsetup_r+0x66>
 80043fc:	4630      	mov	r0, r6
 80043fe:	f000 fa5b 	bl	80048b8 <_free_r>
 8004402:	2300      	movs	r3, #0
 8004404:	6363      	str	r3, [r4, #52]	; 0x34
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	2300      	movs	r3, #0
 8004410:	6063      	str	r3, [r4, #4]
 8004412:	6923      	ldr	r3, [r4, #16]
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	f043 0308 	orr.w	r3, r3, #8
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	6923      	ldr	r3, [r4, #16]
 8004420:	b94b      	cbnz	r3, 8004436 <__swsetup_r+0x9a>
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d003      	beq.n	8004436 <__swsetup_r+0x9a>
 800442e:	4621      	mov	r1, r4
 8004430:	4630      	mov	r0, r6
 8004432:	f000 fa01 	bl	8004838 <__smakebuf_r>
 8004436:	89a0      	ldrh	r0, [r4, #12]
 8004438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800443c:	f010 0301 	ands.w	r3, r0, #1
 8004440:	d00a      	beq.n	8004458 <__swsetup_r+0xbc>
 8004442:	2300      	movs	r3, #0
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	6963      	ldr	r3, [r4, #20]
 8004448:	425b      	negs	r3, r3
 800444a:	61a3      	str	r3, [r4, #24]
 800444c:	6923      	ldr	r3, [r4, #16]
 800444e:	b943      	cbnz	r3, 8004462 <__swsetup_r+0xc6>
 8004450:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004454:	d1ba      	bne.n	80043cc <__swsetup_r+0x30>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	0781      	lsls	r1, r0, #30
 800445a:	bf58      	it	pl
 800445c:	6963      	ldrpl	r3, [r4, #20]
 800445e:	60a3      	str	r3, [r4, #8]
 8004460:	e7f4      	b.n	800444c <__swsetup_r+0xb0>
 8004462:	2000      	movs	r0, #0
 8004464:	e7f7      	b.n	8004456 <__swsetup_r+0xba>
 8004466:	bf00      	nop
 8004468:	20000014 	.word	0x20000014
 800446c:	08004cc0 	.word	0x08004cc0
 8004470:	08004ce0 	.word	0x08004ce0
 8004474:	08004ca0 	.word	0x08004ca0

08004478 <__sflush_r>:
 8004478:	898a      	ldrh	r2, [r1, #12]
 800447a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800447e:	4605      	mov	r5, r0
 8004480:	0710      	lsls	r0, r2, #28
 8004482:	460c      	mov	r4, r1
 8004484:	d458      	bmi.n	8004538 <__sflush_r+0xc0>
 8004486:	684b      	ldr	r3, [r1, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	dc05      	bgt.n	8004498 <__sflush_r+0x20>
 800448c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	dc02      	bgt.n	8004498 <__sflush_r+0x20>
 8004492:	2000      	movs	r0, #0
 8004494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800449a:	2e00      	cmp	r6, #0
 800449c:	d0f9      	beq.n	8004492 <__sflush_r+0x1a>
 800449e:	2300      	movs	r3, #0
 80044a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044a4:	682f      	ldr	r7, [r5, #0]
 80044a6:	602b      	str	r3, [r5, #0]
 80044a8:	d032      	beq.n	8004510 <__sflush_r+0x98>
 80044aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	075a      	lsls	r2, r3, #29
 80044b0:	d505      	bpl.n	80044be <__sflush_r+0x46>
 80044b2:	6863      	ldr	r3, [r4, #4]
 80044b4:	1ac0      	subs	r0, r0, r3
 80044b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044b8:	b10b      	cbz	r3, 80044be <__sflush_r+0x46>
 80044ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044bc:	1ac0      	subs	r0, r0, r3
 80044be:	2300      	movs	r3, #0
 80044c0:	4602      	mov	r2, r0
 80044c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c4:	6a21      	ldr	r1, [r4, #32]
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b0      	blx	r6
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	d106      	bne.n	80044de <__sflush_r+0x66>
 80044d0:	6829      	ldr	r1, [r5, #0]
 80044d2:	291d      	cmp	r1, #29
 80044d4:	d82c      	bhi.n	8004530 <__sflush_r+0xb8>
 80044d6:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <__sflush_r+0x108>)
 80044d8:	40ca      	lsrs	r2, r1
 80044da:	07d6      	lsls	r6, r2, #31
 80044dc:	d528      	bpl.n	8004530 <__sflush_r+0xb8>
 80044de:	2200      	movs	r2, #0
 80044e0:	6062      	str	r2, [r4, #4]
 80044e2:	04d9      	lsls	r1, r3, #19
 80044e4:	6922      	ldr	r2, [r4, #16]
 80044e6:	6022      	str	r2, [r4, #0]
 80044e8:	d504      	bpl.n	80044f4 <__sflush_r+0x7c>
 80044ea:	1c42      	adds	r2, r0, #1
 80044ec:	d101      	bne.n	80044f2 <__sflush_r+0x7a>
 80044ee:	682b      	ldr	r3, [r5, #0]
 80044f0:	b903      	cbnz	r3, 80044f4 <__sflush_r+0x7c>
 80044f2:	6560      	str	r0, [r4, #84]	; 0x54
 80044f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044f6:	602f      	str	r7, [r5, #0]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	d0ca      	beq.n	8004492 <__sflush_r+0x1a>
 80044fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004500:	4299      	cmp	r1, r3
 8004502:	d002      	beq.n	800450a <__sflush_r+0x92>
 8004504:	4628      	mov	r0, r5
 8004506:	f000 f9d7 	bl	80048b8 <_free_r>
 800450a:	2000      	movs	r0, #0
 800450c:	6360      	str	r0, [r4, #52]	; 0x34
 800450e:	e7c1      	b.n	8004494 <__sflush_r+0x1c>
 8004510:	6a21      	ldr	r1, [r4, #32]
 8004512:	2301      	movs	r3, #1
 8004514:	4628      	mov	r0, r5
 8004516:	47b0      	blx	r6
 8004518:	1c41      	adds	r1, r0, #1
 800451a:	d1c7      	bne.n	80044ac <__sflush_r+0x34>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0c4      	beq.n	80044ac <__sflush_r+0x34>
 8004522:	2b1d      	cmp	r3, #29
 8004524:	d001      	beq.n	800452a <__sflush_r+0xb2>
 8004526:	2b16      	cmp	r3, #22
 8004528:	d101      	bne.n	800452e <__sflush_r+0xb6>
 800452a:	602f      	str	r7, [r5, #0]
 800452c:	e7b1      	b.n	8004492 <__sflush_r+0x1a>
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004534:	81a3      	strh	r3, [r4, #12]
 8004536:	e7ad      	b.n	8004494 <__sflush_r+0x1c>
 8004538:	690f      	ldr	r7, [r1, #16]
 800453a:	2f00      	cmp	r7, #0
 800453c:	d0a9      	beq.n	8004492 <__sflush_r+0x1a>
 800453e:	0793      	lsls	r3, r2, #30
 8004540:	680e      	ldr	r6, [r1, #0]
 8004542:	bf08      	it	eq
 8004544:	694b      	ldreq	r3, [r1, #20]
 8004546:	600f      	str	r7, [r1, #0]
 8004548:	bf18      	it	ne
 800454a:	2300      	movne	r3, #0
 800454c:	eba6 0807 	sub.w	r8, r6, r7
 8004550:	608b      	str	r3, [r1, #8]
 8004552:	f1b8 0f00 	cmp.w	r8, #0
 8004556:	dd9c      	ble.n	8004492 <__sflush_r+0x1a>
 8004558:	6a21      	ldr	r1, [r4, #32]
 800455a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800455c:	4643      	mov	r3, r8
 800455e:	463a      	mov	r2, r7
 8004560:	4628      	mov	r0, r5
 8004562:	47b0      	blx	r6
 8004564:	2800      	cmp	r0, #0
 8004566:	dc06      	bgt.n	8004576 <__sflush_r+0xfe>
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456e:	81a3      	strh	r3, [r4, #12]
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e78e      	b.n	8004494 <__sflush_r+0x1c>
 8004576:	4407      	add	r7, r0
 8004578:	eba8 0800 	sub.w	r8, r8, r0
 800457c:	e7e9      	b.n	8004552 <__sflush_r+0xda>
 800457e:	bf00      	nop
 8004580:	20400001 	.word	0x20400001

08004584 <_fflush_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	690b      	ldr	r3, [r1, #16]
 8004588:	4605      	mov	r5, r0
 800458a:	460c      	mov	r4, r1
 800458c:	b913      	cbnz	r3, 8004594 <_fflush_r+0x10>
 800458e:	2500      	movs	r5, #0
 8004590:	4628      	mov	r0, r5
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	b118      	cbz	r0, 800459e <_fflush_r+0x1a>
 8004596:	6983      	ldr	r3, [r0, #24]
 8004598:	b90b      	cbnz	r3, 800459e <_fflush_r+0x1a>
 800459a:	f000 f887 	bl	80046ac <__sinit>
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <_fflush_r+0x6c>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	d11b      	bne.n	80045dc <_fflush_r+0x58>
 80045a4:	686c      	ldr	r4, [r5, #4]
 80045a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ef      	beq.n	800458e <_fflush_r+0xa>
 80045ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045b0:	07d0      	lsls	r0, r2, #31
 80045b2:	d404      	bmi.n	80045be <_fflush_r+0x3a>
 80045b4:	0599      	lsls	r1, r3, #22
 80045b6:	d402      	bmi.n	80045be <_fflush_r+0x3a>
 80045b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ba:	f000 f915 	bl	80047e8 <__retarget_lock_acquire_recursive>
 80045be:	4628      	mov	r0, r5
 80045c0:	4621      	mov	r1, r4
 80045c2:	f7ff ff59 	bl	8004478 <__sflush_r>
 80045c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045c8:	07da      	lsls	r2, r3, #31
 80045ca:	4605      	mov	r5, r0
 80045cc:	d4e0      	bmi.n	8004590 <_fflush_r+0xc>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	059b      	lsls	r3, r3, #22
 80045d2:	d4dd      	bmi.n	8004590 <_fflush_r+0xc>
 80045d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045d6:	f000 f908 	bl	80047ea <__retarget_lock_release_recursive>
 80045da:	e7d9      	b.n	8004590 <_fflush_r+0xc>
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <_fflush_r+0x70>)
 80045de:	429c      	cmp	r4, r3
 80045e0:	d101      	bne.n	80045e6 <_fflush_r+0x62>
 80045e2:	68ac      	ldr	r4, [r5, #8]
 80045e4:	e7df      	b.n	80045a6 <_fflush_r+0x22>
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <_fflush_r+0x74>)
 80045e8:	429c      	cmp	r4, r3
 80045ea:	bf08      	it	eq
 80045ec:	68ec      	ldreq	r4, [r5, #12]
 80045ee:	e7da      	b.n	80045a6 <_fflush_r+0x22>
 80045f0:	08004cc0 	.word	0x08004cc0
 80045f4:	08004ce0 	.word	0x08004ce0
 80045f8:	08004ca0 	.word	0x08004ca0

080045fc <std>:
 80045fc:	2300      	movs	r3, #0
 80045fe:	b510      	push	{r4, lr}
 8004600:	4604      	mov	r4, r0
 8004602:	e9c0 3300 	strd	r3, r3, [r0]
 8004606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800460a:	6083      	str	r3, [r0, #8]
 800460c:	8181      	strh	r1, [r0, #12]
 800460e:	6643      	str	r3, [r0, #100]	; 0x64
 8004610:	81c2      	strh	r2, [r0, #14]
 8004612:	6183      	str	r3, [r0, #24]
 8004614:	4619      	mov	r1, r3
 8004616:	2208      	movs	r2, #8
 8004618:	305c      	adds	r0, #92	; 0x5c
 800461a:	f7ff fdef 	bl	80041fc <memset>
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <std+0x38>)
 8004620:	6263      	str	r3, [r4, #36]	; 0x24
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <std+0x3c>)
 8004624:	62a3      	str	r3, [r4, #40]	; 0x28
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <std+0x40>)
 8004628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <std+0x44>)
 800462c:	6224      	str	r4, [r4, #32]
 800462e:	6323      	str	r3, [r4, #48]	; 0x30
 8004630:	bd10      	pop	{r4, pc}
 8004632:	bf00      	nop
 8004634:	08004a99 	.word	0x08004a99
 8004638:	08004abb 	.word	0x08004abb
 800463c:	08004af3 	.word	0x08004af3
 8004640:	08004b17 	.word	0x08004b17

08004644 <_cleanup_r>:
 8004644:	4901      	ldr	r1, [pc, #4]	; (800464c <_cleanup_r+0x8>)
 8004646:	f000 b8af 	b.w	80047a8 <_fwalk_reent>
 800464a:	bf00      	nop
 800464c:	08004585 	.word	0x08004585

08004650 <__sfmoreglue>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	2268      	movs	r2, #104	; 0x68
 8004654:	1e4d      	subs	r5, r1, #1
 8004656:	4355      	muls	r5, r2
 8004658:	460e      	mov	r6, r1
 800465a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800465e:	f000 f997 	bl	8004990 <_malloc_r>
 8004662:	4604      	mov	r4, r0
 8004664:	b140      	cbz	r0, 8004678 <__sfmoreglue+0x28>
 8004666:	2100      	movs	r1, #0
 8004668:	e9c0 1600 	strd	r1, r6, [r0]
 800466c:	300c      	adds	r0, #12
 800466e:	60a0      	str	r0, [r4, #8]
 8004670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004674:	f7ff fdc2 	bl	80041fc <memset>
 8004678:	4620      	mov	r0, r4
 800467a:	bd70      	pop	{r4, r5, r6, pc}

0800467c <__sfp_lock_acquire>:
 800467c:	4801      	ldr	r0, [pc, #4]	; (8004684 <__sfp_lock_acquire+0x8>)
 800467e:	f000 b8b3 	b.w	80047e8 <__retarget_lock_acquire_recursive>
 8004682:	bf00      	nop
 8004684:	20012e91 	.word	0x20012e91

08004688 <__sfp_lock_release>:
 8004688:	4801      	ldr	r0, [pc, #4]	; (8004690 <__sfp_lock_release+0x8>)
 800468a:	f000 b8ae 	b.w	80047ea <__retarget_lock_release_recursive>
 800468e:	bf00      	nop
 8004690:	20012e91 	.word	0x20012e91

08004694 <__sinit_lock_acquire>:
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <__sinit_lock_acquire+0x8>)
 8004696:	f000 b8a7 	b.w	80047e8 <__retarget_lock_acquire_recursive>
 800469a:	bf00      	nop
 800469c:	20012e92 	.word	0x20012e92

080046a0 <__sinit_lock_release>:
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <__sinit_lock_release+0x8>)
 80046a2:	f000 b8a2 	b.w	80047ea <__retarget_lock_release_recursive>
 80046a6:	bf00      	nop
 80046a8:	20012e92 	.word	0x20012e92

080046ac <__sinit>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4604      	mov	r4, r0
 80046b0:	f7ff fff0 	bl	8004694 <__sinit_lock_acquire>
 80046b4:	69a3      	ldr	r3, [r4, #24]
 80046b6:	b11b      	cbz	r3, 80046c0 <__sinit+0x14>
 80046b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046bc:	f7ff bff0 	b.w	80046a0 <__sinit_lock_release>
 80046c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046c4:	6523      	str	r3, [r4, #80]	; 0x50
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <__sinit+0x68>)
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <__sinit+0x6c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80046ce:	42a3      	cmp	r3, r4
 80046d0:	bf04      	itt	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	61a3      	streq	r3, [r4, #24]
 80046d6:	4620      	mov	r0, r4
 80046d8:	f000 f820 	bl	800471c <__sfp>
 80046dc:	6060      	str	r0, [r4, #4]
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 f81c 	bl	800471c <__sfp>
 80046e4:	60a0      	str	r0, [r4, #8]
 80046e6:	4620      	mov	r0, r4
 80046e8:	f000 f818 	bl	800471c <__sfp>
 80046ec:	2200      	movs	r2, #0
 80046ee:	60e0      	str	r0, [r4, #12]
 80046f0:	2104      	movs	r1, #4
 80046f2:	6860      	ldr	r0, [r4, #4]
 80046f4:	f7ff ff82 	bl	80045fc <std>
 80046f8:	68a0      	ldr	r0, [r4, #8]
 80046fa:	2201      	movs	r2, #1
 80046fc:	2109      	movs	r1, #9
 80046fe:	f7ff ff7d 	bl	80045fc <std>
 8004702:	68e0      	ldr	r0, [r4, #12]
 8004704:	2202      	movs	r2, #2
 8004706:	2112      	movs	r1, #18
 8004708:	f7ff ff78 	bl	80045fc <std>
 800470c:	2301      	movs	r3, #1
 800470e:	61a3      	str	r3, [r4, #24]
 8004710:	e7d2      	b.n	80046b8 <__sinit+0xc>
 8004712:	bf00      	nop
 8004714:	08004c9c 	.word	0x08004c9c
 8004718:	08004645 	.word	0x08004645

0800471c <__sfp>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	4607      	mov	r7, r0
 8004720:	f7ff ffac 	bl	800467c <__sfp_lock_acquire>
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <__sfp+0x84>)
 8004726:	681e      	ldr	r6, [r3, #0]
 8004728:	69b3      	ldr	r3, [r6, #24]
 800472a:	b913      	cbnz	r3, 8004732 <__sfp+0x16>
 800472c:	4630      	mov	r0, r6
 800472e:	f7ff ffbd 	bl	80046ac <__sinit>
 8004732:	3648      	adds	r6, #72	; 0x48
 8004734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004738:	3b01      	subs	r3, #1
 800473a:	d503      	bpl.n	8004744 <__sfp+0x28>
 800473c:	6833      	ldr	r3, [r6, #0]
 800473e:	b30b      	cbz	r3, 8004784 <__sfp+0x68>
 8004740:	6836      	ldr	r6, [r6, #0]
 8004742:	e7f7      	b.n	8004734 <__sfp+0x18>
 8004744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004748:	b9d5      	cbnz	r5, 8004780 <__sfp+0x64>
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <__sfp+0x88>)
 800474c:	60e3      	str	r3, [r4, #12]
 800474e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004752:	6665      	str	r5, [r4, #100]	; 0x64
 8004754:	f000 f847 	bl	80047e6 <__retarget_lock_init_recursive>
 8004758:	f7ff ff96 	bl	8004688 <__sfp_lock_release>
 800475c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004760:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004764:	6025      	str	r5, [r4, #0]
 8004766:	61a5      	str	r5, [r4, #24]
 8004768:	2208      	movs	r2, #8
 800476a:	4629      	mov	r1, r5
 800476c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004770:	f7ff fd44 	bl	80041fc <memset>
 8004774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800477c:	4620      	mov	r0, r4
 800477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004780:	3468      	adds	r4, #104	; 0x68
 8004782:	e7d9      	b.n	8004738 <__sfp+0x1c>
 8004784:	2104      	movs	r1, #4
 8004786:	4638      	mov	r0, r7
 8004788:	f7ff ff62 	bl	8004650 <__sfmoreglue>
 800478c:	4604      	mov	r4, r0
 800478e:	6030      	str	r0, [r6, #0]
 8004790:	2800      	cmp	r0, #0
 8004792:	d1d5      	bne.n	8004740 <__sfp+0x24>
 8004794:	f7ff ff78 	bl	8004688 <__sfp_lock_release>
 8004798:	230c      	movs	r3, #12
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	e7ee      	b.n	800477c <__sfp+0x60>
 800479e:	bf00      	nop
 80047a0:	08004c9c 	.word	0x08004c9c
 80047a4:	ffff0001 	.word	0xffff0001

080047a8 <_fwalk_reent>:
 80047a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ac:	4606      	mov	r6, r0
 80047ae:	4688      	mov	r8, r1
 80047b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047b4:	2700      	movs	r7, #0
 80047b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047ba:	f1b9 0901 	subs.w	r9, r9, #1
 80047be:	d505      	bpl.n	80047cc <_fwalk_reent+0x24>
 80047c0:	6824      	ldr	r4, [r4, #0]
 80047c2:	2c00      	cmp	r4, #0
 80047c4:	d1f7      	bne.n	80047b6 <_fwalk_reent+0xe>
 80047c6:	4638      	mov	r0, r7
 80047c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047cc:	89ab      	ldrh	r3, [r5, #12]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d907      	bls.n	80047e2 <_fwalk_reent+0x3a>
 80047d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047d6:	3301      	adds	r3, #1
 80047d8:	d003      	beq.n	80047e2 <_fwalk_reent+0x3a>
 80047da:	4629      	mov	r1, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	47c0      	blx	r8
 80047e0:	4307      	orrs	r7, r0
 80047e2:	3568      	adds	r5, #104	; 0x68
 80047e4:	e7e9      	b.n	80047ba <_fwalk_reent+0x12>

080047e6 <__retarget_lock_init_recursive>:
 80047e6:	4770      	bx	lr

080047e8 <__retarget_lock_acquire_recursive>:
 80047e8:	4770      	bx	lr

080047ea <__retarget_lock_release_recursive>:
 80047ea:	4770      	bx	lr

080047ec <__swhatbuf_r>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	460e      	mov	r6, r1
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	2900      	cmp	r1, #0
 80047f6:	b096      	sub	sp, #88	; 0x58
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	da08      	bge.n	8004810 <__swhatbuf_r+0x24>
 80047fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	602a      	str	r2, [r5, #0]
 8004806:	061a      	lsls	r2, r3, #24
 8004808:	d410      	bmi.n	800482c <__swhatbuf_r+0x40>
 800480a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800480e:	e00e      	b.n	800482e <__swhatbuf_r+0x42>
 8004810:	466a      	mov	r2, sp
 8004812:	f000 f9a7 	bl	8004b64 <_fstat_r>
 8004816:	2800      	cmp	r0, #0
 8004818:	dbf1      	blt.n	80047fe <__swhatbuf_r+0x12>
 800481a:	9a01      	ldr	r2, [sp, #4]
 800481c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004824:	425a      	negs	r2, r3
 8004826:	415a      	adcs	r2, r3
 8004828:	602a      	str	r2, [r5, #0]
 800482a:	e7ee      	b.n	800480a <__swhatbuf_r+0x1e>
 800482c:	2340      	movs	r3, #64	; 0x40
 800482e:	2000      	movs	r0, #0
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	b016      	add	sp, #88	; 0x58
 8004834:	bd70      	pop	{r4, r5, r6, pc}
	...

08004838 <__smakebuf_r>:
 8004838:	898b      	ldrh	r3, [r1, #12]
 800483a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800483c:	079d      	lsls	r5, r3, #30
 800483e:	4606      	mov	r6, r0
 8004840:	460c      	mov	r4, r1
 8004842:	d507      	bpl.n	8004854 <__smakebuf_r+0x1c>
 8004844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	6123      	str	r3, [r4, #16]
 800484c:	2301      	movs	r3, #1
 800484e:	6163      	str	r3, [r4, #20]
 8004850:	b002      	add	sp, #8
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	ab01      	add	r3, sp, #4
 8004856:	466a      	mov	r2, sp
 8004858:	f7ff ffc8 	bl	80047ec <__swhatbuf_r>
 800485c:	9900      	ldr	r1, [sp, #0]
 800485e:	4605      	mov	r5, r0
 8004860:	4630      	mov	r0, r6
 8004862:	f000 f895 	bl	8004990 <_malloc_r>
 8004866:	b948      	cbnz	r0, 800487c <__smakebuf_r+0x44>
 8004868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800486c:	059a      	lsls	r2, r3, #22
 800486e:	d4ef      	bmi.n	8004850 <__smakebuf_r+0x18>
 8004870:	f023 0303 	bic.w	r3, r3, #3
 8004874:	f043 0302 	orr.w	r3, r3, #2
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	e7e3      	b.n	8004844 <__smakebuf_r+0xc>
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <__smakebuf_r+0x7c>)
 800487e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	6020      	str	r0, [r4, #0]
 8004884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	9b00      	ldr	r3, [sp, #0]
 800488c:	6163      	str	r3, [r4, #20]
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	6120      	str	r0, [r4, #16]
 8004892:	b15b      	cbz	r3, 80048ac <__smakebuf_r+0x74>
 8004894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004898:	4630      	mov	r0, r6
 800489a:	f000 f975 	bl	8004b88 <_isatty_r>
 800489e:	b128      	cbz	r0, 80048ac <__smakebuf_r+0x74>
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	89a0      	ldrh	r0, [r4, #12]
 80048ae:	4305      	orrs	r5, r0
 80048b0:	81a5      	strh	r5, [r4, #12]
 80048b2:	e7cd      	b.n	8004850 <__smakebuf_r+0x18>
 80048b4:	08004645 	.word	0x08004645

080048b8 <_free_r>:
 80048b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ba:	2900      	cmp	r1, #0
 80048bc:	d044      	beq.n	8004948 <_free_r+0x90>
 80048be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c2:	9001      	str	r0, [sp, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f1a1 0404 	sub.w	r4, r1, #4
 80048ca:	bfb8      	it	lt
 80048cc:	18e4      	addlt	r4, r4, r3
 80048ce:	f000 f97d 	bl	8004bcc <__malloc_lock>
 80048d2:	4a1e      	ldr	r2, [pc, #120]	; (800494c <_free_r+0x94>)
 80048d4:	9801      	ldr	r0, [sp, #4]
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	b933      	cbnz	r3, 80048e8 <_free_r+0x30>
 80048da:	6063      	str	r3, [r4, #4]
 80048dc:	6014      	str	r4, [r2, #0]
 80048de:	b003      	add	sp, #12
 80048e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048e4:	f000 b978 	b.w	8004bd8 <__malloc_unlock>
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d908      	bls.n	80048fe <_free_r+0x46>
 80048ec:	6825      	ldr	r5, [r4, #0]
 80048ee:	1961      	adds	r1, r4, r5
 80048f0:	428b      	cmp	r3, r1
 80048f2:	bf01      	itttt	eq
 80048f4:	6819      	ldreq	r1, [r3, #0]
 80048f6:	685b      	ldreq	r3, [r3, #4]
 80048f8:	1949      	addeq	r1, r1, r5
 80048fa:	6021      	streq	r1, [r4, #0]
 80048fc:	e7ed      	b.n	80048da <_free_r+0x22>
 80048fe:	461a      	mov	r2, r3
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	b10b      	cbz	r3, 8004908 <_free_r+0x50>
 8004904:	42a3      	cmp	r3, r4
 8004906:	d9fa      	bls.n	80048fe <_free_r+0x46>
 8004908:	6811      	ldr	r1, [r2, #0]
 800490a:	1855      	adds	r5, r2, r1
 800490c:	42a5      	cmp	r5, r4
 800490e:	d10b      	bne.n	8004928 <_free_r+0x70>
 8004910:	6824      	ldr	r4, [r4, #0]
 8004912:	4421      	add	r1, r4
 8004914:	1854      	adds	r4, r2, r1
 8004916:	42a3      	cmp	r3, r4
 8004918:	6011      	str	r1, [r2, #0]
 800491a:	d1e0      	bne.n	80048de <_free_r+0x26>
 800491c:	681c      	ldr	r4, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	6053      	str	r3, [r2, #4]
 8004922:	4421      	add	r1, r4
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	e7da      	b.n	80048de <_free_r+0x26>
 8004928:	d902      	bls.n	8004930 <_free_r+0x78>
 800492a:	230c      	movs	r3, #12
 800492c:	6003      	str	r3, [r0, #0]
 800492e:	e7d6      	b.n	80048de <_free_r+0x26>
 8004930:	6825      	ldr	r5, [r4, #0]
 8004932:	1961      	adds	r1, r4, r5
 8004934:	428b      	cmp	r3, r1
 8004936:	bf04      	itt	eq
 8004938:	6819      	ldreq	r1, [r3, #0]
 800493a:	685b      	ldreq	r3, [r3, #4]
 800493c:	6063      	str	r3, [r4, #4]
 800493e:	bf04      	itt	eq
 8004940:	1949      	addeq	r1, r1, r5
 8004942:	6021      	streq	r1, [r4, #0]
 8004944:	6054      	str	r4, [r2, #4]
 8004946:	e7ca      	b.n	80048de <_free_r+0x26>
 8004948:	b003      	add	sp, #12
 800494a:	bd30      	pop	{r4, r5, pc}
 800494c:	20012e94 	.word	0x20012e94

08004950 <sbrk_aligned>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4e0e      	ldr	r6, [pc, #56]	; (800498c <sbrk_aligned+0x3c>)
 8004954:	460c      	mov	r4, r1
 8004956:	6831      	ldr	r1, [r6, #0]
 8004958:	4605      	mov	r5, r0
 800495a:	b911      	cbnz	r1, 8004962 <sbrk_aligned+0x12>
 800495c:	f000 f88c 	bl	8004a78 <_sbrk_r>
 8004960:	6030      	str	r0, [r6, #0]
 8004962:	4621      	mov	r1, r4
 8004964:	4628      	mov	r0, r5
 8004966:	f000 f887 	bl	8004a78 <_sbrk_r>
 800496a:	1c43      	adds	r3, r0, #1
 800496c:	d00a      	beq.n	8004984 <sbrk_aligned+0x34>
 800496e:	1cc4      	adds	r4, r0, #3
 8004970:	f024 0403 	bic.w	r4, r4, #3
 8004974:	42a0      	cmp	r0, r4
 8004976:	d007      	beq.n	8004988 <sbrk_aligned+0x38>
 8004978:	1a21      	subs	r1, r4, r0
 800497a:	4628      	mov	r0, r5
 800497c:	f000 f87c 	bl	8004a78 <_sbrk_r>
 8004980:	3001      	adds	r0, #1
 8004982:	d101      	bne.n	8004988 <sbrk_aligned+0x38>
 8004984:	f04f 34ff 	mov.w	r4, #4294967295
 8004988:	4620      	mov	r0, r4
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	20012e98 	.word	0x20012e98

08004990 <_malloc_r>:
 8004990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004994:	1ccd      	adds	r5, r1, #3
 8004996:	f025 0503 	bic.w	r5, r5, #3
 800499a:	3508      	adds	r5, #8
 800499c:	2d0c      	cmp	r5, #12
 800499e:	bf38      	it	cc
 80049a0:	250c      	movcc	r5, #12
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	4607      	mov	r7, r0
 80049a6:	db01      	blt.n	80049ac <_malloc_r+0x1c>
 80049a8:	42a9      	cmp	r1, r5
 80049aa:	d905      	bls.n	80049b8 <_malloc_r+0x28>
 80049ac:	230c      	movs	r3, #12
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	2600      	movs	r6, #0
 80049b2:	4630      	mov	r0, r6
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	4e2e      	ldr	r6, [pc, #184]	; (8004a74 <_malloc_r+0xe4>)
 80049ba:	f000 f907 	bl	8004bcc <__malloc_lock>
 80049be:	6833      	ldr	r3, [r6, #0]
 80049c0:	461c      	mov	r4, r3
 80049c2:	bb34      	cbnz	r4, 8004a12 <_malloc_r+0x82>
 80049c4:	4629      	mov	r1, r5
 80049c6:	4638      	mov	r0, r7
 80049c8:	f7ff ffc2 	bl	8004950 <sbrk_aligned>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	4604      	mov	r4, r0
 80049d0:	d14d      	bne.n	8004a6e <_malloc_r+0xde>
 80049d2:	6834      	ldr	r4, [r6, #0]
 80049d4:	4626      	mov	r6, r4
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	d140      	bne.n	8004a5c <_malloc_r+0xcc>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	4631      	mov	r1, r6
 80049de:	4638      	mov	r0, r7
 80049e0:	eb04 0803 	add.w	r8, r4, r3
 80049e4:	f000 f848 	bl	8004a78 <_sbrk_r>
 80049e8:	4580      	cmp	r8, r0
 80049ea:	d13a      	bne.n	8004a62 <_malloc_r+0xd2>
 80049ec:	6821      	ldr	r1, [r4, #0]
 80049ee:	3503      	adds	r5, #3
 80049f0:	1a6d      	subs	r5, r5, r1
 80049f2:	f025 0503 	bic.w	r5, r5, #3
 80049f6:	3508      	adds	r5, #8
 80049f8:	2d0c      	cmp	r5, #12
 80049fa:	bf38      	it	cc
 80049fc:	250c      	movcc	r5, #12
 80049fe:	4629      	mov	r1, r5
 8004a00:	4638      	mov	r0, r7
 8004a02:	f7ff ffa5 	bl	8004950 <sbrk_aligned>
 8004a06:	3001      	adds	r0, #1
 8004a08:	d02b      	beq.n	8004a62 <_malloc_r+0xd2>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	442b      	add	r3, r5
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	e00e      	b.n	8004a30 <_malloc_r+0xa0>
 8004a12:	6822      	ldr	r2, [r4, #0]
 8004a14:	1b52      	subs	r2, r2, r5
 8004a16:	d41e      	bmi.n	8004a56 <_malloc_r+0xc6>
 8004a18:	2a0b      	cmp	r2, #11
 8004a1a:	d916      	bls.n	8004a4a <_malloc_r+0xba>
 8004a1c:	1961      	adds	r1, r4, r5
 8004a1e:	42a3      	cmp	r3, r4
 8004a20:	6025      	str	r5, [r4, #0]
 8004a22:	bf18      	it	ne
 8004a24:	6059      	strne	r1, [r3, #4]
 8004a26:	6863      	ldr	r3, [r4, #4]
 8004a28:	bf08      	it	eq
 8004a2a:	6031      	streq	r1, [r6, #0]
 8004a2c:	5162      	str	r2, [r4, r5]
 8004a2e:	604b      	str	r3, [r1, #4]
 8004a30:	4638      	mov	r0, r7
 8004a32:	f104 060b 	add.w	r6, r4, #11
 8004a36:	f000 f8cf 	bl	8004bd8 <__malloc_unlock>
 8004a3a:	f026 0607 	bic.w	r6, r6, #7
 8004a3e:	1d23      	adds	r3, r4, #4
 8004a40:	1af2      	subs	r2, r6, r3
 8004a42:	d0b6      	beq.n	80049b2 <_malloc_r+0x22>
 8004a44:	1b9b      	subs	r3, r3, r6
 8004a46:	50a3      	str	r3, [r4, r2]
 8004a48:	e7b3      	b.n	80049b2 <_malloc_r+0x22>
 8004a4a:	6862      	ldr	r2, [r4, #4]
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	bf0c      	ite	eq
 8004a50:	6032      	streq	r2, [r6, #0]
 8004a52:	605a      	strne	r2, [r3, #4]
 8004a54:	e7ec      	b.n	8004a30 <_malloc_r+0xa0>
 8004a56:	4623      	mov	r3, r4
 8004a58:	6864      	ldr	r4, [r4, #4]
 8004a5a:	e7b2      	b.n	80049c2 <_malloc_r+0x32>
 8004a5c:	4634      	mov	r4, r6
 8004a5e:	6876      	ldr	r6, [r6, #4]
 8004a60:	e7b9      	b.n	80049d6 <_malloc_r+0x46>
 8004a62:	230c      	movs	r3, #12
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	4638      	mov	r0, r7
 8004a68:	f000 f8b6 	bl	8004bd8 <__malloc_unlock>
 8004a6c:	e7a1      	b.n	80049b2 <_malloc_r+0x22>
 8004a6e:	6025      	str	r5, [r4, #0]
 8004a70:	e7de      	b.n	8004a30 <_malloc_r+0xa0>
 8004a72:	bf00      	nop
 8004a74:	20012e94 	.word	0x20012e94

08004a78 <_sbrk_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_sbrk_r+0x1c>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4604      	mov	r4, r0
 8004a80:	4608      	mov	r0, r1
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	f000 f8c0 	bl	8004c08 <_sbrk>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_sbrk_r+0x1a>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_sbrk_r+0x1a>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20012e9c 	.word	0x20012e9c

08004a98 <__sread>:
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa0:	f000 f8a0 	bl	8004be4 <_read_r>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	bfab      	itete	ge
 8004aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8004aac:	181b      	addge	r3, r3, r0
 8004aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ab2:	bfac      	ite	ge
 8004ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ab6:	81a3      	strhlt	r3, [r4, #12]
 8004ab8:	bd10      	pop	{r4, pc}

08004aba <__swrite>:
 8004aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004abe:	461f      	mov	r7, r3
 8004ac0:	898b      	ldrh	r3, [r1, #12]
 8004ac2:	05db      	lsls	r3, r3, #23
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4616      	mov	r6, r2
 8004aca:	d505      	bpl.n	8004ad8 <__swrite+0x1e>
 8004acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f000 f868 	bl	8004ba8 <_lseek_r>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	4632      	mov	r2, r6
 8004ae6:	463b      	mov	r3, r7
 8004ae8:	4628      	mov	r0, r5
 8004aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aee:	f000 b817 	b.w	8004b20 <_write_r>

08004af2 <__sseek>:
 8004af2:	b510      	push	{r4, lr}
 8004af4:	460c      	mov	r4, r1
 8004af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afa:	f000 f855 	bl	8004ba8 <_lseek_r>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	bf15      	itete	ne
 8004b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b0e:	81a3      	strheq	r3, [r4, #12]
 8004b10:	bf18      	it	ne
 8004b12:	81a3      	strhne	r3, [r4, #12]
 8004b14:	bd10      	pop	{r4, pc}

08004b16 <__sclose>:
 8004b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1a:	f000 b813 	b.w	8004b44 <_close_r>
	...

08004b20 <_write_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d07      	ldr	r5, [pc, #28]	; (8004b40 <_write_r+0x20>)
 8004b24:	4604      	mov	r4, r0
 8004b26:	4608      	mov	r0, r1
 8004b28:	4611      	mov	r1, r2
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f7fb fee7 	bl	8000902 <_write>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_write_r+0x1e>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_write_r+0x1e>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	20012e9c 	.word	0x20012e9c

08004b44 <_close_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d06      	ldr	r5, [pc, #24]	; (8004b60 <_close_r+0x1c>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	f7fb fef3 	bl	800093a <_close>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_close_r+0x1a>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_close_r+0x1a>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20012e9c 	.word	0x20012e9c

08004b64 <_fstat_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4d07      	ldr	r5, [pc, #28]	; (8004b84 <_fstat_r+0x20>)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	f7fb feee 	bl	8000952 <_fstat>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d102      	bne.n	8004b80 <_fstat_r+0x1c>
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	b103      	cbz	r3, 8004b80 <_fstat_r+0x1c>
 8004b7e:	6023      	str	r3, [r4, #0]
 8004b80:	bd38      	pop	{r3, r4, r5, pc}
 8004b82:	bf00      	nop
 8004b84:	20012e9c 	.word	0x20012e9c

08004b88 <_isatty_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d06      	ldr	r5, [pc, #24]	; (8004ba4 <_isatty_r+0x1c>)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	602b      	str	r3, [r5, #0]
 8004b94:	f7fb feed 	bl	8000972 <_isatty>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d102      	bne.n	8004ba2 <_isatty_r+0x1a>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b103      	cbz	r3, 8004ba2 <_isatty_r+0x1a>
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}
 8004ba4:	20012e9c 	.word	0x20012e9c

08004ba8 <_lseek_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d07      	ldr	r5, [pc, #28]	; (8004bc8 <_lseek_r+0x20>)
 8004bac:	4604      	mov	r4, r0
 8004bae:	4608      	mov	r0, r1
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	602a      	str	r2, [r5, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f7fb fee6 	bl	8000988 <_lseek>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_lseek_r+0x1e>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_lseek_r+0x1e>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	20012e9c 	.word	0x20012e9c

08004bcc <__malloc_lock>:
 8004bcc:	4801      	ldr	r0, [pc, #4]	; (8004bd4 <__malloc_lock+0x8>)
 8004bce:	f7ff be0b 	b.w	80047e8 <__retarget_lock_acquire_recursive>
 8004bd2:	bf00      	nop
 8004bd4:	20012e90 	.word	0x20012e90

08004bd8 <__malloc_unlock>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	; (8004be0 <__malloc_unlock+0x8>)
 8004bda:	f7ff be06 	b.w	80047ea <__retarget_lock_release_recursive>
 8004bde:	bf00      	nop
 8004be0:	20012e90 	.word	0x20012e90

08004be4 <_read_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d07      	ldr	r5, [pc, #28]	; (8004c04 <_read_r+0x20>)
 8004be8:	4604      	mov	r4, r0
 8004bea:	4608      	mov	r0, r1
 8004bec:	4611      	mov	r1, r2
 8004bee:	2200      	movs	r2, #0
 8004bf0:	602a      	str	r2, [r5, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7fb fe68 	bl	80008c8 <_read>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d102      	bne.n	8004c02 <_read_r+0x1e>
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	b103      	cbz	r3, 8004c02 <_read_r+0x1e>
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	20012e9c 	.word	0x20012e9c

08004c08 <_sbrk>:
 8004c08:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <_sbrk+0x14>)
 8004c0a:	6811      	ldr	r1, [r2, #0]
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	b909      	cbnz	r1, 8004c14 <_sbrk+0xc>
 8004c10:	4903      	ldr	r1, [pc, #12]	; (8004c20 <_sbrk+0x18>)
 8004c12:	6011      	str	r1, [r2, #0]
 8004c14:	6810      	ldr	r0, [r2, #0]
 8004c16:	4403      	add	r3, r0
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4770      	bx	lr
 8004c1c:	20012ea0 	.word	0x20012ea0
 8004c20:	20012ea8 	.word	0x20012ea8

08004c24 <_init>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr

08004c30 <_fini>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	bf00      	nop
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr
